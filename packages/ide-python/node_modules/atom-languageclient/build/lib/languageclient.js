Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SymbolKind = exports.DocumentHighlightKind = exports.CompletionItemKind = exports.InsertTextFormat = exports.CompletionTriggerKind = exports.TextDocumentSaveReason = exports.WatchKind = exports.FileChangeType = exports.MessageType = exports.TextDocumentSyncKind = exports.DiagnosticSeverity = exports.LanguageClientConnection = undefined;

var _vscodeJsonrpc = require('vscode-jsonrpc');

var jsonrpc = _interopRequireWildcard(_vscodeJsonrpc);

var _logger = require('./logger');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Flow-typed wrapper around JSONRPC to implement Microsoft Language Server Protocol v3
// https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md
class LanguageClientConnection {

  constructor(rpc, logger) {
    this._rpc = rpc;
    this._log = logger || new _logger.NullLogger();
    this.setupLogging();
    rpc.listen();
  }

  setupLogging() {
    this._rpc.onError(error => this._log.error(['rpc.onError', error]));
    this._rpc.onUnhandledNotification(notification => {
      if (notification.method != null && notification.params != null) {
        this._log.warn(`rpc.onUnhandledNotification ${notification.method}`, notification.params);
      } else {
        this._log.warn('rpc.onUnhandledNotification', notification);
      }
    });
    this._rpc.onNotification((...args) => this._log.debug('rpc.onNotification', args));
  }

  dispose() {
    this._rpc.dispose();
  }

  // Public: Initialize the language server with necessary {InitializeParams}.
  //
  // * `params` The {InitializeParams} containing processId, rootPath, options and
  //            server capabilities.
  //
  // Returns a {Promise} containing the {InitializeResult} with details of the server's
  // capabilities.
  initialize(params) {
    return this._sendRequest('initialize', params);
  }

  // Public: Send an `initialized` notification to the language server.
  initialized() {
    this._sendNotification('initialized');
  }

  // Public: Send a `shutdown` request to the language server.
  shutdown() {
    return this._sendRequest('shutdown');
  }

  // Public: Send an `exit` notification to the language server.
  exit() {
    this._sendNotification('exit');
  }

  // Public: Register a callback for a custom message.
  //
  // * `method`   A string containing the name of the message to listen for.
  // * `callback` The function to be called when the message is received.
  //              The payload from the message is passed to the function.
  onCustom(method, callback) {
    this._onNotification({ method }, callback);
  }

  // Public: Register a callback for the `window/showMessage` message.
  //
  // * `callback` The function to be called when the `window/showMessage` message is
  //              received with {ShowMessageParams} being passed.
  onShowMessage(callback) {
    this._onNotification({ method: 'window/showMessage' }, callback);
  }

  // Public: Register a callback for the `window/showMessageRequest` message.
  //
  // * `callback` The function to be called when the `window/showMessageRequest` message is
  //              received with {ShowMessageRequestParam}' being passed.
  // Returns a {Promise} containing the {MessageActionItem}.
  onShowMessageRequest(callback) {
    this._onRequest({ method: 'window/showMessageRequest' }, callback);
  }

  // Public: Register a callback for the `window/logMessage` message.
  //
  // * `callback` The function to be called when the `window/logMessage` message is
  //              received with {LogMessageParams} being passed.
  onLogMessage(callback) {
    this._onNotification({ method: 'window/logMessage' }, callback);
  }

  // Public: Register a callback for the `telemetry/event` message.
  //
  // * `callback` The function to be called when the `telemetry/event` message is
  //              received with any parameters received being passed on.
  onTelemetryEvent(callback) {
    this._onNotification({ method: 'telemetry/event' }, callback);
  }

  // Public: Register a callback for the `workspace/applyEdit` message.
  //
  // * `callback` The function to be called when the `workspace/applyEdit` message is
  //              received with {ApplyWorkspaceEditParams} being passed.
  // Returns a {Promise} containing the {ApplyWorkspaceEditResponse}.
  onApplyEdit(callback) {
    this._onRequest({ method: 'workspace/applyEdit' }, callback);
  }

  // Public: Send a `workspace/didChangeConfiguration` notification.
  //
  // * `params` The {DidChangeConfigurationParams} containing the new configuration.
  didChangeConfiguration(params) {
    this._sendNotification('workspace/didChangeConfiguration', params);
  }

  // Public: Send a `textDocument/didOpen` notification.
  //
  // * `params` The {DidOpenTextDocumentParams} containing the opened text document details.
  didOpenTextDocument(params) {
    this._sendNotification('textDocument/didOpen', params);
  }

  // Public: Send a `textDocument/didChange` notification.
  //
  // * `params` The {DidChangeTextDocumentParams} containing the changed text document
  // details including the version number and actual text changes.
  didChangeTextDocument(params) {
    this._sendNotification('textDocument/didChange', params);
  }

  // Public: Send a `textDocument/didClose` notification.
  //
  // * `params` The {DidCloseTextDocumentParams} containing the opened text document details.
  didCloseTextDocument(params) {
    this._sendNotification('textDocument/didClose', params);
  }

  // Public: Send a `textDocument/willSave` notification.
  //
  // * `params` The {WillSaveTextDocumentParams} containing the to-be-saved text document
  // details and the reason for the save.
  willSaveTextDocument(params) {
    this._sendNotification('textDocument/willSave', params);
  }

  // Public: Send a `textDocument/didSave` notification.
  //
  // * `params` The {DidSaveTextDocumentParams} containing the saved text document details.
  didSaveTextDocument(params) {
    this._sendNotification('textDocument/didSave', params);
  }

  // Public: Send a `workspace/didChangeWatchedFiles` notification.
  //
  // * `params` The {DidChangeWatchedFilesParams} containing the array of {FileEvent}s that
  // have been observed upon the watched files.
  didChangeWatchedFiles(params) {
    this._sendNotification('workspace/didChangeWatchedFiles', params);
  }

  // Public: Register a callback for the `textDocument/publishDiagnostics` message.
  //
  // * `callback` The function to be called when the `textDocument/publishDiagnostics` message is
  //              received a {PublishDiagnosticsParams} containing new {Diagnostic} messages for a given uri.
  onPublishDiagnostics(callback) {
    this._onNotification({ method: 'textDocument/publishDiagnostics' }, callback);
  }

  // Public: Send a `textDocument/completion` request.
  //
  // * `params`            The {TextDocumentPositionParams} or {CompletionParams} for which
  //                       {CompletionItem}s are desired.
  // * `cancellationToken` The {CancellationToken} that is used to cancel this request if
  //                       necessary.
  // Returns a {Promise} containing either a {CompletionList} or an {Array} of {CompletionItem}s.
  completion(params, cancellationToken) {
    // Cancel prior request if necessary
    return this._sendRequest('textDocument/completion', params, cancellationToken);
  }

  // Public: Send a `completionItem/resolve` request.
  //
  // * `params` The {CompletionItem} for which a fully resolved {CompletionItem} is desired.
  // Returns a {Promise} containing a fully resolved {CompletionItem}.
  completionItemResolve(params) {
    return this._sendRequest('completionItem/resolve', params);
  }

  // Public: Send a `textDocument/hover` request.
  //
  // * `params` The {TextDocumentPositionParams} for which a {Hover} is desired.
  // Returns a {Promise} containing a {Hover}.
  hover(params) {
    return this._sendRequest('textDocument/hover', params);
  }

  // Public: Send a `textDocument/signatureHelp` request.
  //
  // * `params` The {TextDocumentPositionParams} for which a {SignatureHelp} is desired.
  // Returns a {Promise} containing a {SignatureHelp}.
  signatureHelp(params) {
    return this._sendRequest('textDocument/signatureHelp', params);
  }

  // Public: Send a `textDocument/definition` request.
  //
  // * `params` The {TextDocumentPositionParams} of a symbol for which one or more {Location}s
  // that define that symbol are required.
  // Returns a {Promise} containing either a single {Location} or an {Array} of many {Location}s.
  gotoDefinition(params) {
    return this._sendRequest('textDocument/definition', params);
  }

  // Public: Send a `textDocument/references` request.
  //
  // * `params` The {TextDocumentPositionParams} of a symbol for which all referring {Location}s
  // are desired.
  // Returns a {Promise} containing an {Array} of {Location}s that reference this symbol.
  findReferences(params) {
    return this._sendRequest('textDocument/references', params);
  }

  // Public: Send a `textDocument/documentHighlight` request.
  //
  // * `params` The {TextDocumentPositionParams} of a symbol for which all highlights are desired.
  // Returns a {Promise} containing an {Array} of {DocumentHighlight}s that can be used to
  // highlight this symbol.
  documentHighlight(params) {
    return this._sendRequest('textDocument/documentHighlight', params);
  }

  // Public: Send a `textDocument/documentSymbol` request.
  //
  // * `params`            The {DocumentSymbolParams} that identifies the document for which
  //                       symbols are desired.
  // * `cancellationToken` The {CancellationToken} that is used to cancel this request if
  //                       necessary.
  // Returns a {Promise} containing an {Array} of {SymbolInformation}s that can be used to
  // navigate this document.
  documentSymbol(params, cancellationToken) {
    return this._sendRequest('textDocument/documentSymbol', params);
  }

  // Public: Send a `workspace/symbol` request.
  //
  // * `params` The {WorkspaceSymbolParams} containing the query string to search the workspace for.
  // Returns a {Promise} containing an {Array} of {SymbolInformation}s that identify where the query
  // string occurs within the workspace.
  workspaceSymbol(params) {
    return this._sendRequest('workspace/symbol', params);
  }

  // Public: Send a `textDocument/codeAction` request.
  //
  // * `params` The {CodeActionParams} identifying the document, range and context for the code action.
  // Returns a {Promise} containing an {Array} of {Commands}s that can be performed against the given
  // documents range.
  codeAction(params) {
    return this._sendRequest('textDocument/codeAction', params);
  }

  // Public: Send a `textDocument/codeLens` request.
  //
  // * `params` The {CodeLensParams} identifying the document for which code lens commands are desired.
  // Returns a {Promise} containing an {Array} of {CodeLens}s that associate commands and data with
  // specified ranges within the document.
  codeLens(params) {
    return this._sendRequest('textDocument/codeLens', params);
  }

  // Public: Send a `codeLens/resolve` request.
  //
  // * `params` The {CodeLens} identifying the code lens to be resolved with full detail.
  // Returns a {Promise} containing the {CodeLens} fully resolved.
  codeLensResolve(params) {
    return this._sendRequest('codeLens/resolve', params);
  }

  // Public: Send a `textDocument/documentLink` request.
  //
  // * `params` The {DocumentLinkParams} identifying the document for which links should be identified.
  // Returns a {Promise} containing an {Array} of {DocumentLink}s relating uri's to specific ranges
  // within the document.
  documentLink(params) {
    return this._sendRequest('textDocument/documentLink', params);
  }

  // Public: Send a `documentLink/resolve` request.
  //
  // * `params` The {DocumentLink} identifying the document link to be resolved with full detail.
  // Returns a {Promise} containing the {DocumentLink} fully resolved.
  documentLinkResolve(params) {
    return this._sendRequest('documentLink/resolve', params);
  }

  // Public: Send a `textDocument/formatting` request.
  //
  // * `params` The {DocumentFormattingParams} identifying the document to be formatted as well as
  // additional formatting preferences.
  // Returns a {Promise} containing an {Array} of {TextEdit}s to be applied to the document to
  // correctly reformat it.
  documentFormatting(params) {
    return this._sendRequest('textDocument/formatting', params);
  }

  // Public: Send a `textDocument/rangeFormatting` request.
  //
  // * `params` The {DocumentRangeFormattingParams} identifying the document and range to be formatted
  // as well as additional formatting preferences.
  // Returns a {Promise} containing an {Array} of {TextEdit}s to be applied to the document to
  // correctly reformat it.
  documentRangeFormatting(params) {
    return this._sendRequest('textDocument/rangeFormatting', params);
  }

  // Public: Send a `textDocument/onTypeFormatting` request.
  //
  // * `params` The {DocumentOnTypeFormattingParams} identifying the document to be formatted,
  // the character that was typed and at what position as well as additional formatting preferences.
  // Returns a {Promise} containing an {Array} of {TextEdit}s to be applied to the document to
  // correctly reformat it.
  documentOnTypeFormatting(params) {
    return this._sendRequest('textDocument/onTypeFormatting', params);
  }

  // Public: Send a `textDocument/rename` request.
  //
  // * `params` The {RenameParams} identifying the document containing the symbol to be renamed,
  // as well as the position and new name.
  // Returns a {Promise} containing an {WorkspaceEdit} that contains a list of {TextEdit}s either
  // on the changes property (keyed by uri) or the documentChanges property containing
  // an {Array} of {TextDocumentEdit}s (preferred).
  rename(params) {
    return this._sendRequest('textDocument/rename', params);
  }

  // Public: Send a `workspace/executeCommand` request.
  //
  // * `params` The {ExecuteCommandParams} specifying the command and arguments
  // the language server should execute (these commands are usually from {CodeLens} or {CodeAction}
  // responses).
  // Returns a {Promise} containing anything.
  executeCommand(params) {
    return this._sendRequest('workspace/executeCommand', params);
  }

  _onRequest(type, callback) {
    this._rpc.onRequest(type, value => {
      this._log.debug(`rpc.onRequest ${type.method}`, value);
      return callback(value);
    });
  }

  _onNotification(type, callback) {
    this._rpc.onNotification(type, value => {
      this._log.debug(`rpc.onNotification ${type.method}`, value);
      callback(value);
    });
  }

  _sendNotification(method, args) {
    this._log.debug(`rpc.sendNotification ${method}`, args);
    this._rpc.sendNotification(method, args);
  }

  async _sendRequest(method, args, cancellationToken) {
    this._log.debug(`rpc.sendRequest ${method} sending`, args);
    try {
      const start = performance.now();
      let result = undefined;
      if (cancellationToken) {
        result = await this._rpc.sendRequest(method, args, cancellationToken);
      } else {
        // If cancellationToken is null or undefined, don't add the third
        // argument otherwise vscode-jsonrpc will send an additional, null
        // message parameter to the request
        result = await this._rpc.sendRequest(method, args);
      }

      const took = performance.now() - start;
      this._log.debug(`rpc.sendRequest ${method} received (${Math.floor(took)}ms)`, result);
      return result;
    } catch (e) {
      this._log.error(`rpc.sendRequest ${method} threw`, e);
      throw e;
    }
  }
}

exports.LanguageClientConnection = LanguageClientConnection; // Public: Position in a text document expressed as zero-based line and zero-based character offset.
// A position is between two characters like an 'insert' cursor in a editor.


// Public: A range in a text document expressed as (zero-based) start and end positions.
// A range is comparable to a selection in an editor. Therefore the end position is exclusive.
// If you want to specify a range that contains a line including the line ending character(s)
// then use an end position denoting the start of the next line.


// Public: Represents a location inside a resource, such as a line inside a text file.


// Public: Represents a diagnostic, such as a compiler error or warning. Diagnostic objects are only
// valid in the scope of a resource.

// Public: Severity of a Diagnostic message.
const DiagnosticSeverity = exports.DiagnosticSeverity = {
  // Reports an error.
  Error: 1,
  // Reports a warning.
  Warning: 2,
  // Reports an information.
  Information: 3,
  // Reports a hint.
  Hint: 4
};

// Public: Represents a reference to a command. Provides a title which will be used
// to represent a command in the UI. Commands are identified by a string identifier.


// Public: A textual edit applicable to a text document.


// Public: Describes textual changes on a single text document. The text document is
// referred to as a VersionedTextDocumentIdentifier to allow clients to check the text
// document version before an edit is applied.


// Public: A workspace edit represents changes to many resources managed in the workspace.
// The edit should either provide changes or documentChanges. If the client can handle
// versioned document edits and if documentChanges are present, the latter are preferred
// over changes.


// Public: Text documents are identified using a URI. On the protocol level, URIs are
// passed as strings.


// Public: An item to transfer a text document from the client to the server.


// Public: An identifier to denote a specific version of a text document.


// Public: Was TextDocumentPosition in 1.0 with inlined parameters.
// A parameter literal used in requests to pass a text document and a position inside
// that document.


// Public: A document filter denotes a document through properties like language, schema
// or pattern.


// Public: A document selector is the combination of one or more document filters.


// Public: Parameters required to initialize the language server.


// Public: Defines capabilities the editor / tool provides on the workspace.


// Public: Defines capabilities the editor / tool provides on text document.


// Public: ClientCapabilities now define capabilities for dynamic registration,
// workspace and text document features the client supports. The experimental can
// be used to pass experimential capabilities under development.


// Public: Result recieved from the server in response to the initialization request.


// Public: Initialization error details.


// Public: Defines how the host (editor) should sync document changes to the language server.
const TextDocumentSyncKind = exports.TextDocumentSyncKind = {
  // Documents should not be synced at all.
  None: 0,
  // Documents are synced by always sending the full content of the document.
  Full: 1,
  // Documents are synced by sending the full content on open. After that only incremental
  // updates to the document are sent.
  Incremental: 2
};

// Public: Completion options.


// Public: Signature Help options.


// Public: Code Lens options.


// Public: Format Document on type options


// Public: Document Link options


// Public: Execute Command options.


// Public: Document save options.


// Public: Text document synchronization options.


// Public: Defines capabilities that will be returned by the server.


// Public: Details of a message to be shown to the user.


// Public: The types of messages available.
const MessageType = exports.MessageType = {
  // Public: An error message.
  Error: 1,
  // Public: A warning message.
  Warning: 2,
  // Public: An informational message.
  Info: 3,
  // Public: A log message.
  Log: 4
};

// Public: Details of a request to show a message with actions to take.


// Public: Details of an individual action that can be taken in response
// to a {ShowMessageRequest} message.


// Public: Details of the LogMessage to be handled.


// Public: General parameters to register for a capability.


// Public: Capability registration parameters.


// Public: Text document registration options.


// Public: General parameters to unregister a capability.


// Public: General parameters to unregister a capability.


// Public: Details of a configuration change that has occured.


// Public: Details of file activities on files that are being watched.


// Public: An event describing a file change.


// Public: The type of file changes that may occur.
const FileChangeType = exports.FileChangeType = {
  // Public: The file was created.
  Created: 1,
  // Public: The file was changed.
  Changed: 2,
  // Public: The file was deleted.
  Deleted: 3
};

// Public: Describe options to be used when registered for text document change events.


// Public: Parameters for a file system watcher.


// Public: The kind of file system to event to watch.
const WatchKind = exports.WatchKind = {
  // Interested in create events.
  Create: 1,
  // Interested in change events
  Change: 2,
  // Interested in delete events
  Delete: 4
};

// Public: The parameters of a Workspace Symbol Request.


// Public: Parameters to send with a workspace/executeCommand request.


// Public: Execute command registration options.


// Public: Parameters to receive with a workspace/applyEdit request.


// Public: Parameters to send with a workspace/applyEdit response.


// Public: Details of a text document that has been opened.


// Public: Details of a text document that has been changed.


// Public: An event describing a change to a text document.
// If range and rangeLength are omitted the new text is considered to be
// the full content of the document.


// Public: Describe options to be used when registered for text document change events.


// Public: The parameters send in a will save text document notification.


// Public: Represents reasons why a text document is saved.
const TextDocumentSaveReason = exports.TextDocumentSaveReason = {
  // Manually triggered, e.g. by the user pressing save, by starting debugging,
  // or by an API call.
  Manual: 1,
  // Automatic after a delay.
  AfterDelay: 2,
  // When the editor lost focus.
  FocusOut: 3
};

// Public: Details of a text document that has been saved.


// Public: Registration options for text document save events.


// Public: Details of text documents that has been closed.


// Public: Parameters for textDocument/publishDiagnostics events.


// Public: Parameters for completion requests.


// Public: How a completion was triggered
const CompletionTriggerKind = exports.CompletionTriggerKind = {
  // Completion was triggered by typing an identifier (24x7 code
  // complete), manual invocation (e.g Ctrl+Space) or via API.
  Invoked: 1,
  // Completion was triggered by a trigger character specified by
  // the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
  TriggerCharacter: 2
};

// Public: Contains additional information about the context in which a completion request is triggered.


// Public: Represents a collection of [completion items](#CompletionItem) to be presented in the editor.


// Public: Defines whether the insert text in a completion item should be interpreted as
// plain text or a snippet.
const InsertTextFormat = exports.InsertTextFormat = {
  // The primary text to be inserted is treated as a plain string.
  PlainText: 1,
  // The primary text to be inserted is treated as a snippet.
  //
  // A snippet can define tab stops and placeholders with `$1`, `$2`
  // and `${3:foo}`. `$0` defines the final tab stop, it defaults to
  // the end of the snippet. Placeholders with equal identifiers are linked,
  // that is typing in one will update others too.
  Snippet: 2
};

// Public: CompletionItem details.


// Public: The kind of a completion entry.
const CompletionItemKind = exports.CompletionItemKind = {
  Text: 1,
  Method: 2,
  Function: 3,
  Constructor: 4,
  Field: 5,
  Variable: 6,
  Class: 7,
  Interface: 8,
  Module: 9,
  Property: 10,
  Unit: 11,
  Value: 12,
  Enum: 13,
  Keyword: 14,
  Snippet: 15,
  Color: 16,
  File: 17,
  Reference: 18
};

// Public: Registration options for the completions capability.


// Public: The result of a hover request.


// Public: The marked string is rendered:
// - as markdown if it is represented as a string
// - as code block of the given langauge if it is represented as a pair of a language and a value
//
// The pair of a language and a value is an equivalent to markdown:
// ```${language};
// ${value};
// ```


// Public: Signature help represents the signature of something
// callable. There can be multiple signature but only one
// active and only one active parameter.


// Public: Represents the signature of something callable. A signature
// can have a label, like a function-name, a doc-comment, and
// a set of parameters.


// Public: Represents a parameter of a callable-signature. A parameter can
// have a label and a doc-comment.


// Public: Registration options for the signature help capability.


// Public: Parameters for the references request.


// Public: The context of a references request.


// Public: A document highlight is a range inside a text document which deserves
// special attention. Usually a document highlight is visualized by changing
// the background color of its range.


// Public: The kind of a {DocumentHighlight}.
const DocumentHighlightKind = exports.DocumentHighlightKind = {
  // A textual occurrance.
  Text: 1,
  // Read-access of a symbol, like reading a variable.
  Read: 2,
  // Write-access of a symbol, like writing to a variable.
  Write: 3
};

// Public: Parameters for a document symbol request.


// Public: Represents information about programming constructs like variables, classes,
// interfaces etc.


// Public: The kind of a symbol.
const SymbolKind = exports.SymbolKind = {
  File: 1,
  Module: 2,
  Namespace: 3,
  Package: 4,
  Class: 5,
  Method: 6,
  Property: 7,
  Field: 8,
  Constructor: 9,
  Enum: 10,
  Interface: 11,
  Function: 12,
  Variable: 13,
  Constant: 14,
  String: 15,
  Number: 16,
  Boolean: 17,
  Array: 18
};

// Public: Params for the CodeActionRequest


// Public: Contains additional diagnostic information about the context in which a code action is run.


// Public: Parameters for the CodeLens request.


// Public: A code lens represents a command that should be shown along with
// source text, like the number of references, a way to run tests, etc.
//
// A code lens is _unresolved_ when no command is associated to it. For performance
// reasons the creation of a code lens and resolving should be done in two stages.


// Public: Registration options for the CodeLens capability.


// Public: Parameters for the DocumentLink request.


// Public: A document link is a range in a text document that links to an internal or
// external resource, like another
// text document or a web site.


// Public: Registration options for the DocumentLink capability.


// Public: Parameters to be send with a DocumentFormatting request.


// Public: Value-object describing what options formatting should use.


// Public: Parameters to be send with a DocumentRangeFormatting request.


// Public: Parameters to be send with a DocumentOnTypeFormatting request.


// Public: Registration options for the on-type document formatting capability.


// Public: Parameters to send with a Rename request.
//# sourceMappingURL=data:application/json;charset=utf-8;base64,