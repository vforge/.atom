"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
class CREditorControl {
    constructor(editor, pluginManager) {
        this.editor = editor;
        this.updateResults = () => {
            this.markers.clear();
            const path = this.editor.getPath();
            for (const r of this.resultsDB.filter((m) => m.uri === path && m.isValid())) {
                this.markerFromCheckResult(r);
            }
        };
        const gutter = this.editor.gutterWithName('ide-haskell-check-results');
        if (gutter) {
            this.gutter = gutter;
        }
        else {
            this.gutter = this.editor.addGutter({
                name: 'ide-haskell-check-results',
                priority: 10,
            });
        }
        this.gutterElement = atom.views.getView(this.gutter);
        this.resultsDB = pluginManager.resultsDB;
        this.tooltipRegistry = pluginManager.tooltipRegistry;
        this.disposables = new atom_1.CompositeDisposable();
        this.markers = editor.addMarkerLayer({
            maintainHistory: true,
            persistent: false,
        });
        this.markerProps = new WeakMap();
        this.disposables.add(this.resultsDB.onDidUpdate(this.updateResults));
        this.updateResults();
        this.registerGutterEvents();
    }
    static supportsGrammar(grammar) {
        return [
            'source.c2hs',
            'source.hsc2hs',
            'source.haskell',
            'text.tex.latex.haskell',
            'source.hsig',
        ].includes(grammar);
    }
    destroy() {
        this.markers.destroy();
        this.disposables.dispose();
        try {
            this.gutter.destroy();
        }
        catch (e) {
            console.warn(e);
        }
    }
    getMessageAt(pos, type) {
        const markers = this.find(pos, type);
        const result = [];
        for (const marker of markers) {
            if (!marker.isValid()) {
                continue;
            }
            const res = this.markerProps.get(marker);
            if (!res) {
                continue;
            }
            result.push(res.message);
        }
        return result;
    }
    registerGutterEvents() {
        this.disposables.add(utils_1.listen(this.gutterElement, 'mouseover', '.decoration', (e) => {
            const bufferPt = utils_1.bufferPositionFromMouseEvent(this.editor, e);
            if (bufferPt) {
                const msg = this.getMessageAt(bufferPt, 'gutter');
                if (msg.length > 0) {
                    this.tooltipRegistry.showTooltip(this.editor, "mouse", {
                        pluginName: 'builtin:check-results',
                        tooltip: {
                            text: msg,
                            range: new atom_1.Range(bufferPt, bufferPt),
                        },
                    });
                }
            }
        }));
        this.disposables.add(utils_1.listen(this.gutterElement, 'mouseout', '.decoration', () => this.tooltipRegistry.hideTooltip(this.editor, "mouse", 'builtin:check-results')));
    }
    markerFromCheckResult(resItem) {
        const { position } = resItem;
        if (!position) {
            return;
        }
        const range = new atom_1.Range(position, atom_1.Point.fromObject([position.row, position.column + 1]));
        const marker = this.markers.markBufferRange(range, { invalidate: 'inside' });
        this.markerProps.set(marker, resItem);
        const disp = new atom_1.CompositeDisposable();
        disp.add(marker.onDidDestroy(() => {
            this.markerProps.delete(marker);
            disp.dispose();
        }), marker.onDidChange(({ isValid }) => {
            resItem.setValid(isValid);
        }));
        this.decorateMarker(marker, resItem);
    }
    decorateMarker(m, r) {
        const cls = { class: `ide-haskell-${r.severity}` };
        this.gutter.decorateMarker(m, Object.assign({ type: 'line-number' }, cls));
        this.editor.decorateMarker(m, Object.assign({ type: 'highlight' }, cls));
    }
    find(pos, type) {
        switch (type) {
            case 'gutter':
                return this.markers.findMarkers({ startBufferRow: pos.row });
            case 'keyboard':
                return this.markers.findMarkers({ startBufferPosition: pos });
            case 'mouse':
                return this.markers.findMarkers({ containsBufferPosition: pos });
            default:
                throw new TypeError('Switch assertion failed');
        }
    }
}
exports.CREditorControl = CREditorControl;
//# sourceMappingURL=data:application/json;base64,