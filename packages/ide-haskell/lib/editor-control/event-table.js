"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
class EventTable {
    constructor(editor, groups) {
        this.editor = editor;
        this.table = Object.create(null);
        for (const i of utils_1.eventRangeTypeVals) {
            this.table[i] = new Map();
        }
        this.layers = new Set();
        for (const i of groups) {
            const layer = this.editor.addMarkerLayer();
            this.layers.add(layer);
            for (const { type, source } of i) {
                ;
                this.table[type].set(source, layer);
            }
        }
    }
    destroy() {
        for (const i of this.layers.values()) {
            i.destroy();
        }
        for (const i of this.values()) {
            i.clear();
        }
    }
    get(type, source) {
        const tbl = this.table[type];
        let res = tbl.get(source);
        if (!res) {
            res = tbl.get(undefined);
        }
        if (!res) {
            throw new Error(`Failed to classify ${type}:${source}`);
        }
        return res;
    }
    clear() {
        for (const i of this.layers.values()) {
            i.clear();
        }
    }
    getMarkerCount() {
        let count = 0;
        for (const i of this.layers.values()) {
            count += i.getMarkerCount();
        }
        return count;
    }
    *values() {
        for (const i of utils_1.eventRangeTypeVals) {
            yield this.table[i];
        }
    }
    *entries() {
        for (const i of utils_1.eventRangeTypeVals) {
            yield [i, this.table[i]];
        }
    }
}
exports.EventTable = EventTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWRpdG9yLWNvbnRyb2wvZXZlbnQtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvQ0FBNkM7QUFVN0M7SUFHRSxZQUFvQixNQUFrQixFQUFFLE1BQXNCO1FBQTFDLFdBQU0sR0FBTixNQUFNLENBQVk7UUFFcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2hDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLDBCQUFrQixDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7UUFDM0IsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUN2QixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUE7WUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDdEIsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFnQixDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDdEQsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRU0sT0FBTztRQUNaLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNiLENBQUM7UUFDRCxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNYLENBQUM7SUFDSCxDQUFDO0lBRU0sR0FBRyxDQUFDLElBQXFCLEVBQUUsTUFBZTtRQUMvQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBZ0QsQ0FBQTtRQUMzRSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNULEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzFCLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixJQUFJLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQTtRQUN6RCxDQUFDO1FBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQTtJQUNaLENBQUM7SUFFTSxLQUFLO1FBQ1YsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ1gsQ0FBQztJQUNILENBQUM7SUFFTSxjQUFjO1FBQ25CLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUNiLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLEtBQUssSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDN0IsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRU0sQ0FBQyxNQUFNO1FBQ1osR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksMEJBQWtCLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQWUsQ0FBQTtRQUNuQyxDQUFDO0lBQ0gsQ0FBQztJQUVNLENBQUMsT0FBTztRQUNiLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLDBCQUFrQixDQUFDLENBQUMsQ0FBQztZQUNuQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMxQixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBakVELGdDQWlFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRFZGl0b3IsIERpc3BsYXlNYXJrZXJMYXllciB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBldmVudFJhbmdlVHlwZVZhbHMgfSBmcm9tICcuLi91dGlscydcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuaW1wb3J0IFRFdmVudFJhbmdlVHlwZSA9IFVQSS5URXZlbnRSYW5nZVR5cGVcblxuZXhwb3J0IHR5cGUgSU1hcmtlckdyb3VwID0gQXJyYXk8eyB0eXBlOiBURXZlbnRSYW5nZVR5cGU7IHNvdXJjZT86IHN0cmluZyB9PlxuXG5leHBvcnQgdHlwZSBUVGFibGVDZWxsID0gTWFwPHN0cmluZyB8IHVuZGVmaW5lZCwgRGlzcGxheU1hcmtlckxheWVyPlxuXG5leHBvcnQgdHlwZSBUVGFibGUgPSB7IFtLIGluIFRFdmVudFJhbmdlVHlwZV06IFRUYWJsZUNlbGwgfVxuXG5leHBvcnQgY2xhc3MgRXZlbnRUYWJsZSB7XG4gIHByaXZhdGUgdGFibGU6IFRUYWJsZVxuICBwcml2YXRlIGxheWVyczogU2V0PERpc3BsYXlNYXJrZXJMYXllcj5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlZGl0b3I6IFRleHRFZGl0b3IsIGdyb3VwczogSU1hcmtlckdyb3VwW10pIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbnVsbC1rZXl3b3JkIG5vLXVuc2FmZS1hbnlcbiAgICB0aGlzLnRhYmxlID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgIGZvciAoY29uc3QgaSBvZiBldmVudFJhbmdlVHlwZVZhbHMpIHtcbiAgICAgIHRoaXMudGFibGVbaV0gPSBuZXcgTWFwKClcbiAgICB9XG4gICAgdGhpcy5sYXllcnMgPSBuZXcgU2V0KClcbiAgICBmb3IgKGNvbnN0IGkgb2YgZ3JvdXBzKSB7XG4gICAgICBjb25zdCBsYXllciA9IHRoaXMuZWRpdG9yLmFkZE1hcmtlckxheWVyKClcbiAgICAgIHRoaXMubGF5ZXJzLmFkZChsYXllcilcbiAgICAgIGZvciAoY29uc3QgeyB0eXBlLCBzb3VyY2UgfSBvZiBpKSB7XG4gICAgICAgIDsodGhpcy50YWJsZVt0eXBlXSBhcyBUVGFibGVDZWxsKS5zZXQoc291cmNlLCBsYXllcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5sYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGkuZGVzdHJveSgpXG4gICAgfVxuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLnZhbHVlcygpKSB7XG4gICAgICBpLmNsZWFyKClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0KHR5cGU6IFRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nKSB7XG4gICAgY29uc3QgdGJsID0gdGhpcy50YWJsZVt0eXBlXSBhcyBNYXA8c3RyaW5nIHwgdW5kZWZpbmVkLCBEaXNwbGF5TWFya2VyTGF5ZXI+XG4gICAgbGV0IHJlcyA9IHRibC5nZXQoc291cmNlKVxuICAgIGlmICghcmVzKSB7XG4gICAgICByZXMgPSB0YmwuZ2V0KHVuZGVmaW5lZClcbiAgICB9XG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNsYXNzaWZ5ICR7dHlwZX06JHtzb3VyY2V9YClcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgcHVibGljIGNsZWFyKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmxheWVycy52YWx1ZXMoKSkge1xuICAgICAgaS5jbGVhcigpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldE1hcmtlckNvdW50KCkge1xuICAgIGxldCBjb3VudCA9IDBcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5sYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGNvdW50ICs9IGkuZ2V0TWFya2VyQ291bnQoKVxuICAgIH1cbiAgICByZXR1cm4gY291bnRcbiAgfVxuXG4gIHB1YmxpYyAqdmFsdWVzKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiBldmVudFJhbmdlVHlwZVZhbHMpIHtcbiAgICAgIHlpZWxkIHRoaXMudGFibGVbaV0gYXMgVFRhYmxlQ2VsbFxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyAqZW50cmllcygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgZXZlbnRSYW5nZVR5cGVWYWxzKSB7XG4gICAgICB5aWVsZCBbaSwgdGhpcy50YWJsZVtpXV1cbiAgICB9XG4gIH1cbn1cbiJdfQ==