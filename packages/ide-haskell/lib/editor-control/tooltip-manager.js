"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tooltip_view_1 = require("./tooltip-view");
const event_table_1 = require("./event-table");
class TooltipManager {
    constructor(editor) {
        this.editor = editor;
        this.markers = new event_table_1.EventTable(editor, [
            [{ type: "keyboard" }, { type: "context" }],
            [{ type: "mouse" }, { type: "selection" }],
        ]);
        this.editorElement = atom.views.getView(this.editor);
    }
    dispose() {
        this.markers.destroy();
        this.editorElement.classList.remove('ide-haskell--has-tooltips');
    }
    show(range, text, type, source, detail) {
        this.hide(type, source);
        const highlightMarker = this.markers
            .get(type, source)
            .markBufferRange(range);
        highlightMarker.setProperties(detail);
        this.decorate(highlightMarker, new tooltip_view_1.TooltipMessage(text));
        this.editorElement.classList.add('ide-haskell--has-tooltips');
    }
    hide(type, source, template) {
        if (type === undefined) {
            this.markers.clear();
            return;
        }
        if (!template) {
            this.markers.get(type, source).clear();
        }
        else {
            this.markers
                .get(type, source)
                .findMarkers(template)
                .forEach((m) => m.destroy());
        }
        if (!this.has()) {
            this.editorElement.classList.remove('ide-haskell--has-tooltips');
        }
    }
    has(type, source, template) {
        if (type === undefined) {
            return this.markers.getMarkerCount() > 0;
        }
        if (!template) {
            return this.markers.get(type, source).getMarkerCount() > 0;
        }
        else {
            return this.markers.get(type, source).findMarkers(template).length > 0;
        }
    }
    decorate(marker, tooltipView) {
        this.editor.decorateMarker(marker, {
            type: 'overlay',
            position: 'tail',
            item: tooltipView,
        });
        this.editor.decorateMarker(marker, {
            type: 'highlight',
            class: 'ide-haskell-type',
        });
    }
}
exports.TooltipManager = TooltipManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUErQztBQUMvQywrQ0FBMEM7QUFhMUM7SUFHRSxZQUFvQixNQUFrQjtRQUFsQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSx3QkFBVSxDQUFDLE1BQU0sRUFBRTtZQUNwQyxDQUFDLEVBQUUsSUFBSSxZQUEwQixFQUFFLEVBQUUsRUFBRSxJQUFJLFdBQXlCLEVBQUUsQ0FBQztZQUN2RSxDQUFDLEVBQUUsSUFBSSxTQUF1QixFQUFFLEVBQUUsRUFBRSxJQUFJLGFBQTJCLEVBQUUsQ0FBQztTQUN2RSxDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN0RCxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUE7SUFDbEUsQ0FBQztJQUVNLElBQUksQ0FDVCxLQUFZLEVBQ1osSUFBcUMsRUFDckMsSUFBcUIsRUFDckIsTUFBYyxFQUNkLE1BQXlCO1FBRXpCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ3ZCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPO2FBQ2pDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO2FBQ2pCLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN6QixlQUFlLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLElBQUksNkJBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3hELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQy9ELENBQUM7SUFFTSxJQUFJLENBQ1QsSUFBc0IsRUFDdEIsTUFBZSxFQUNmLFFBQTRCO1FBRTVCLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDcEIsTUFBTSxDQUFBO1FBQ1IsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUN4QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsT0FBTztpQkFDVCxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztpQkFDakIsV0FBVyxDQUFDLFFBQVEsQ0FBQztpQkFDckIsT0FBTyxDQUFDLENBQUMsQ0FBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDL0MsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoQixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtRQUNsRSxDQUFDO0lBQ0gsQ0FBQztJQUVNLEdBQUcsQ0FDUixJQUFzQixFQUN0QixNQUFlLEVBQ2YsUUFBNEI7UUFFNUIsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQzFDLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUM1RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO1FBQ3hFLENBQUM7SUFDSCxDQUFDO0lBRU8sUUFBUSxDQUFDLE1BQXFCLEVBQUUsV0FBMkI7UUFDakUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ2pDLElBQUksRUFBRSxTQUFTO1lBQ2YsUUFBUSxFQUFFLE1BQU07WUFDaEIsSUFBSSxFQUFFLFdBQVc7U0FDbEIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ2pDLElBQUksRUFBRSxXQUFXO1lBQ2pCLEtBQUssRUFBRSxrQkFBa0I7U0FDMUIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGO0FBaEZELHdDQWdGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRvb2x0aXBNZXNzYWdlIH0gZnJvbSAnLi90b29sdGlwLXZpZXcnXG5pbXBvcnQgeyBFdmVudFRhYmxlIH0gZnJvbSAnLi9ldmVudC10YWJsZSdcbmltcG9ydCAqIGFzIEF0b21UeXBlcyBmcm9tICdhdG9tJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5pbXBvcnQgUmFuZ2UgPSBBdG9tVHlwZXMuUmFuZ2VcbmltcG9ydCBUZXh0RWRpdG9yID0gQXRvbVR5cGVzLlRleHRFZGl0b3JcbmltcG9ydCBEaXNwbGF5TWFya2VyID0gQXRvbVR5cGVzLkRpc3BsYXlNYXJrZXJcbmltcG9ydCBURXZlbnRSYW5nZVR5cGUgPSBVUEkuVEV2ZW50UmFuZ2VUeXBlXG5pbXBvcnQgeyBNZXNzYWdlT2JqZWN0IH0gZnJvbSAnLi4vdXRpbHMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1hcmtlclByb3BlcnRpZXMgZXh0ZW5kcyBBdG9tVHlwZXMuRmluZERpc3BsYXlNYXJrZXJPcHRpb25zIHtcbiAgcGVyc2lzdGVudDogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgVG9vbHRpcE1hbmFnZXIge1xuICBwcml2YXRlIG1hcmtlcnM6IEV2ZW50VGFibGVcbiAgcHJpdmF0ZSBlZGl0b3JFbGVtZW50OiBIVE1MRWxlbWVudFxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgIHRoaXMubWFya2VycyA9IG5ldyBFdmVudFRhYmxlKGVkaXRvciwgW1xuICAgICAgW3sgdHlwZTogVEV2ZW50UmFuZ2VUeXBlLmtleWJvYXJkIH0sIHsgdHlwZTogVEV2ZW50UmFuZ2VUeXBlLmNvbnRleHQgfV0sXG4gICAgICBbeyB0eXBlOiBURXZlbnRSYW5nZVR5cGUubW91c2UgfSwgeyB0eXBlOiBURXZlbnRSYW5nZVR5cGUuc2VsZWN0aW9uIH1dLFxuICAgIF0pXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50ID0gYXRvbS52aWV3cy5nZXRWaWV3KHRoaXMuZWRpdG9yKVxuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5tYXJrZXJzLmRlc3Ryb3koKVxuICAgIHRoaXMuZWRpdG9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpZGUtaGFza2VsbC0taGFzLXRvb2x0aXBzJylcbiAgfVxuXG4gIHB1YmxpYyBzaG93KFxuICAgIHJhbmdlOiBSYW5nZSxcbiAgICB0ZXh0OiBNZXNzYWdlT2JqZWN0IHwgTWVzc2FnZU9iamVjdFtdLFxuICAgIHR5cGU6IFRFdmVudFJhbmdlVHlwZSxcbiAgICBzb3VyY2U6IHN0cmluZyxcbiAgICBkZXRhaWw6IElNYXJrZXJQcm9wZXJ0aWVzLFxuICApIHtcbiAgICB0aGlzLmhpZGUodHlwZSwgc291cmNlKVxuICAgIGNvbnN0IGhpZ2hsaWdodE1hcmtlciA9IHRoaXMubWFya2Vyc1xuICAgICAgLmdldCh0eXBlLCBzb3VyY2UpXG4gICAgICAubWFya0J1ZmZlclJhbmdlKHJhbmdlKVxuICAgIGhpZ2hsaWdodE1hcmtlci5zZXRQcm9wZXJ0aWVzKGRldGFpbClcbiAgICB0aGlzLmRlY29yYXRlKGhpZ2hsaWdodE1hcmtlciwgbmV3IFRvb2x0aXBNZXNzYWdlKHRleHQpKVxuICAgIHRoaXMuZWRpdG9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpZGUtaGFza2VsbC0taGFzLXRvb2x0aXBzJylcbiAgfVxuXG4gIHB1YmxpYyBoaWRlKFxuICAgIHR5cGU/OiBURXZlbnRSYW5nZVR5cGUsXG4gICAgc291cmNlPzogc3RyaW5nLFxuICAgIHRlbXBsYXRlPzogSU1hcmtlclByb3BlcnRpZXMsXG4gICkge1xuICAgIGlmICh0eXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMubWFya2Vycy5jbGVhcigpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmNsZWFyKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tYXJrZXJzXG4gICAgICAgIC5nZXQodHlwZSwgc291cmNlKVxuICAgICAgICAuZmluZE1hcmtlcnModGVtcGxhdGUpXG4gICAgICAgIC5mb3JFYWNoKChtOiBEaXNwbGF5TWFya2VyKSA9PiBtLmRlc3Ryb3koKSlcbiAgICB9XG4gICAgaWYgKCF0aGlzLmhhcygpKSB7XG4gICAgICB0aGlzLmVkaXRvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaWRlLWhhc2tlbGwtLWhhcy10b29sdGlwcycpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhhcyhcbiAgICB0eXBlPzogVEV2ZW50UmFuZ2VUeXBlLFxuICAgIHNvdXJjZT86IHN0cmluZyxcbiAgICB0ZW1wbGF0ZT86IElNYXJrZXJQcm9wZXJ0aWVzLFxuICApIHtcbiAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmdldE1hcmtlckNvdW50KCkgPiAwXG4gICAgfVxuICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuZ2V0TWFya2VyQ291bnQoKSA+IDBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5maW5kTWFya2Vycyh0ZW1wbGF0ZSkubGVuZ3RoID4gMFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGVjb3JhdGUobWFya2VyOiBEaXNwbGF5TWFya2VyLCB0b29sdGlwVmlldzogVG9vbHRpcE1lc3NhZ2UpIHtcbiAgICB0aGlzLmVkaXRvci5kZWNvcmF0ZU1hcmtlcihtYXJrZXIsIHtcbiAgICAgIHR5cGU6ICdvdmVybGF5JyxcbiAgICAgIHBvc2l0aW9uOiAndGFpbCcsXG4gICAgICBpdGVtOiB0b29sdGlwVmlldyxcbiAgICB9KVxuICAgIHRoaXMuZWRpdG9yLmRlY29yYXRlTWFya2VyKG1hcmtlciwge1xuICAgICAgdHlwZTogJ2hpZ2hsaWdodCcsXG4gICAgICBjbGFzczogJ2lkZS1oYXNrZWxsLXR5cGUnLFxuICAgIH0pXG4gIH1cbn1cbiJdfQ==