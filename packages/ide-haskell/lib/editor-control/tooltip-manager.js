"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tooltip_view_1 = require("./tooltip-view");
const event_table_1 = require("./event-table");
class TooltipManager {
    constructor(editor) {
        this.editor = editor;
        this.markers = new event_table_1.EventTable(editor, [
            [{ type: "keyboard" }, { type: "context" }],
            [{ type: "mouse" }, { type: "selection" }],
        ]);
        this.editorElement = atom.views.getView(this.editor);
    }
    dispose() {
        this.markers.destroy();
        this.editorElement.classList.remove('ide-haskell--has-tooltips');
    }
    show(range, text, type, source, detail) {
        this.hide(type, source);
        const highlightMarker = this.markers.get(type, source).markBufferRange(range);
        highlightMarker.setProperties(detail);
        this.decorate(highlightMarker, new tooltip_view_1.TooltipMessage(text));
        this.editorElement.classList.add('ide-haskell--has-tooltips');
    }
    hide(type, source, template) {
        if (!type) {
            this.markers.clear();
            return;
        }
        if (!template) {
            this.markers.get(type, source).clear();
        }
        else {
            this.markers.get(type, source).findMarkers(template).forEach((m) => m.destroy());
        }
        if (!this.has()) {
            this.editorElement.classList.remove('ide-haskell--has-tooltips');
        }
    }
    has(type, source, template) {
        if (!type) {
            return this.markers.getMarkerCount() > 0;
        }
        if (!template) {
            return this.markers.get(type, source).getMarkerCount();
        }
        else {
            return this.markers.get(type, source).findMarkers(template).length > 0;
        }
    }
    decorate(marker, tooltipView) {
        this.editor.decorateMarker(marker, {
            type: 'overlay',
            position: 'tail',
            item: tooltipView,
        });
        this.editor.decorateMarker(marker, {
            type: 'highlight',
            class: 'ide-haskell-type',
        });
    }
}
exports.TooltipManager = TooltipManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLGlEQUErQztBQUMvQywrQ0FBMEM7QUFNMUM7SUFHRSxZQUFvQixNQUFrQjtRQUFsQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSx3QkFBVSxDQUFDLE1BQU0sRUFBRTtZQUNwQyxDQUFDLEVBQUUsSUFBSSxZQUE4QixFQUFFLEVBQUUsRUFBRSxJQUFJLFdBQTZCLEVBQUUsQ0FBQztZQUMvRSxDQUFDLEVBQUUsSUFBSSxTQUEyQixFQUFFLEVBQUUsRUFBRSxJQUFJLGFBQStCLEVBQUUsQ0FBQztTQUMvRSxDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN0RCxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUE7SUFDbEUsQ0FBQztJQUVNLElBQUksQ0FDVCxLQUFZLEVBQUUsSUFBK0MsRUFDN0QsSUFBeUIsRUFBRSxNQUFjLEVBQUUsTUFBeUI7UUFFcEUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDdkIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM3RSxlQUFlLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLElBQUksNkJBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3hELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQy9ELENBQUM7SUFFTSxJQUFJLENBQUMsSUFBMEIsRUFBRSxNQUFlLEVBQUUsUUFBNEI7UUFDbkYsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUNwQixNQUFNLENBQUE7UUFDUixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3hDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDakcsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO1FBQUMsQ0FBQztJQUN2RixDQUFDO0lBRU0sR0FBRyxDQUFDLElBQTBCLEVBQUUsTUFBZSxFQUFFLFFBQTRCO1FBQ2xGLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUMxQyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUN4RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO1FBQ3hFLENBQUM7SUFDSCxDQUFDO0lBRU8sUUFBUSxDQUFDLE1BQXFCLEVBQUUsV0FBMkI7UUFDakUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ2pDLElBQUksRUFBRSxTQUFTO1lBQ2YsUUFBUSxFQUFFLE1BQU07WUFDaEIsSUFBSSxFQUFFLFdBQVc7U0FDbEIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ2pDLElBQUksRUFBRSxXQUFXO1lBQ2pCLEtBQUssRUFBRSxrQkFBa0I7U0FDMUIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGO0FBOURELHdDQThEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFJhbmdlLCBUZXh0RWRpdG9yLCBEaXNwbGF5TWFya2VyLFxufSBmcm9tICdhdG9tJ1xuXG5pbXBvcnQgeyBUb29sdGlwTWVzc2FnZSB9IGZyb20gJy4vdG9vbHRpcC12aWV3J1xuaW1wb3J0IHsgRXZlbnRUYWJsZSB9IGZyb20gJy4vZXZlbnQtdGFibGUnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1hcmtlclByb3BlcnRpZXMge1xuICBwZXJzaXN0ZW50OiBib29sZWFuXG59XG5cbmV4cG9ydCBjbGFzcyBUb29sdGlwTWFuYWdlciB7XG4gIHByaXZhdGUgbWFya2VyczogRXZlbnRUYWJsZVxuICBwcml2YXRlIGVkaXRvckVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWRpdG9yOiBUZXh0RWRpdG9yKSB7XG4gICAgdGhpcy5tYXJrZXJzID0gbmV3IEV2ZW50VGFibGUoZWRpdG9yLCBbXG4gICAgICBbeyB0eXBlOiBVUEkuVEV2ZW50UmFuZ2VUeXBlLmtleWJvYXJkIH0sIHsgdHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZS5jb250ZXh0IH1dLFxuICAgICAgW3sgdHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZS5tb3VzZSB9LCB7IHR5cGU6IFVQSS5URXZlbnRSYW5nZVR5cGUuc2VsZWN0aW9uIH1dLFxuICAgIF0pXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50ID0gYXRvbS52aWV3cy5nZXRWaWV3KHRoaXMuZWRpdG9yKVxuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5tYXJrZXJzLmRlc3Ryb3koKVxuICAgIHRoaXMuZWRpdG9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpZGUtaGFza2VsbC0taGFzLXRvb2x0aXBzJylcbiAgfVxuXG4gIHB1YmxpYyBzaG93KFxuICAgIHJhbmdlOiBSYW5nZSwgdGV4dDogVVBJLklNZXNzYWdlT2JqZWN0IHwgVVBJLklNZXNzYWdlT2JqZWN0W10sXG4gICAgdHlwZTogVVBJLlRFdmVudFJhbmdlVHlwZSwgc291cmNlOiBzdHJpbmcsIGRldGFpbDogSU1hcmtlclByb3BlcnRpZXMsXG4gICkge1xuICAgIHRoaXMuaGlkZSh0eXBlLCBzb3VyY2UpXG4gICAgY29uc3QgaGlnaGxpZ2h0TWFya2VyID0gdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLm1hcmtCdWZmZXJSYW5nZShyYW5nZSlcbiAgICBoaWdobGlnaHRNYXJrZXIuc2V0UHJvcGVydGllcyhkZXRhaWwpXG4gICAgdGhpcy5kZWNvcmF0ZShoaWdobGlnaHRNYXJrZXIsIG5ldyBUb29sdGlwTWVzc2FnZSh0ZXh0KSlcbiAgICB0aGlzLmVkaXRvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaWRlLWhhc2tlbGwtLWhhcy10b29sdGlwcycpXG4gIH1cblxuICBwdWJsaWMgaGlkZSh0eXBlPzogVVBJLlRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nLCB0ZW1wbGF0ZT86IElNYXJrZXJQcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICB0aGlzLm1hcmtlcnMuY2xlYXIoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgIHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5jbGVhcigpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5maW5kTWFya2Vycyh0ZW1wbGF0ZSkuZm9yRWFjaCgobTogRGlzcGxheU1hcmtlcikgPT4gbS5kZXN0cm95KCkpXG4gICAgfVxuICAgIGlmICghdGhpcy5oYXMoKSkgeyB0aGlzLmVkaXRvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaWRlLWhhc2tlbGwtLWhhcy10b29sdGlwcycpIH1cbiAgfVxuXG4gIHB1YmxpYyBoYXModHlwZT86IFVQSS5URXZlbnRSYW5nZVR5cGUsIHNvdXJjZT86IHN0cmluZywgdGVtcGxhdGU/OiBJTWFya2VyUHJvcGVydGllcykge1xuICAgIGlmICghdHlwZSkge1xuICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5nZXRNYXJrZXJDb3VudCgpID4gMFxuICAgIH1cbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmdldE1hcmtlckNvdW50KClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5maW5kTWFya2Vycyh0ZW1wbGF0ZSkubGVuZ3RoID4gMFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGVjb3JhdGUobWFya2VyOiBEaXNwbGF5TWFya2VyLCB0b29sdGlwVmlldzogVG9vbHRpcE1lc3NhZ2UpIHtcbiAgICB0aGlzLmVkaXRvci5kZWNvcmF0ZU1hcmtlcihtYXJrZXIsIHtcbiAgICAgIHR5cGU6ICdvdmVybGF5JyxcbiAgICAgIHBvc2l0aW9uOiAndGFpbCcsXG4gICAgICBpdGVtOiB0b29sdGlwVmlldyxcbiAgICB9KVxuICAgIHRoaXMuZWRpdG9yLmRlY29yYXRlTWFya2VyKG1hcmtlciwge1xuICAgICAgdHlwZTogJ2hpZ2hsaWdodCcsXG4gICAgICBjbGFzczogJ2lkZS1oYXNrZWxsLXR5cGUnLFxuICAgIH0pXG4gIH1cbn1cbiJdfQ==