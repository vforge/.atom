"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const results_db_1 = require("./results-db");
const config_params_1 = require("./config-params");
const editor_control_1 = require("./editor-control");
const linter_support_1 = require("./linter-support");
const tooltip_registry_1 = require("./tooltip-registry");
const check_results_provider_1 = require("./check-results-provider");
const status_bar_1 = require("./status-bar");
const prettify_1 = require("./prettify");
const editor_mark_control_1 = require("./editor-mark-control");
class PluginManager {
    constructor(state, outputPanel) {
        this.outputPanel = outputPanel;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.controllers = new Map();
        this.onWillSaveBuffer = (callback) => this.emitter.on('will-save-buffer', callback);
        this.onDidSaveBuffer = (callback) => this.emitter.on('did-save-buffer', callback);
        this.onDidStopChanging = (callback) => this.emitter.on('did-stop-changing', callback);
        this.disposables.add(this.emitter);
        this.resultsDB = new results_db_1.ResultsDB();
        this.outputPanel.connectResults(this.resultsDB);
        this.tooltipRegistry = new tooltip_registry_1.TooltipRegistry(this);
        this.configParamManager = new config_params_1.ConfigParamManager(this.outputPanel, state.configParams);
        this.disposables.add(this.addEditorController(editor_control_1.EditorControl), this.addEditorController(prettify_1.PrettifyEditorController), this.addEditorController(editor_mark_control_1.EditorMarkControl));
        if (atom.config.get('ide-haskell.messageDisplayFrontend') === 'builtin') {
            this.checkResultsProvider = new check_results_provider_1.CheckResultsProvider(this);
        }
        this.subscribeEditorController();
    }
    deactivate() {
        this.resultsDB.destroy();
        this.disposables.dispose();
        if (this.checkResultsProvider)
            this.checkResultsProvider.destroy();
        this.outputPanel.reallyDestroy();
        this.configParamManager.destroy();
        this.removeStatusBar();
        if (this.linterSupport) {
            this.linterSupport.destroy();
            this.linterSupport = undefined;
        }
    }
    serialize() {
        return {
            configParams: this.configParamManager.serialize(),
        };
    }
    willSaveBuffer(buffer) {
        return this.emitter.emit('will-save-buffer', buffer);
    }
    didSaveBuffer(buffer) {
        return this.emitter.emit('did-save-buffer', buffer);
    }
    didStopChanging(buffer) {
        return this.emitter.emit('did-stop-changing', buffer);
    }
    togglePanel() {
        atom.workspace.toggle(this.outputPanel);
    }
    controller(editor) {
        return this.controllerType(editor_control_1.EditorControl, editor);
    }
    controllerType(factory, editor) {
        const ecmap = this.controllers.get(factory);
        const rec = ecmap ? ecmap.get(editor) : undefined;
        return rec ? rec.controller : undefined;
    }
    setLinter(linter) {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'linter') {
            return;
        }
        this.linterSupport = new linter_support_1.LinterSupport(linter, this.resultsDB);
    }
    nextError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputPanel.showNextError();
    }
    prevError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputPanel.showPrevError();
    }
    backendStatus(pluginName, st) {
        this.outputPanel.backendStatus(pluginName, st);
        if (this.statusBarView) {
            this.statusBarView.backendStatus(pluginName, st);
        }
    }
    addEditorController(factory) {
        if (this.controllers.has(factory)) {
            throw new Error(`Duplicate controller factory ${factory.toString()}`);
        }
        const map = new WeakMap();
        this.controllers.set(factory, map);
        return new atom_1.Disposable(() => {
            this.controllers.delete(factory);
            for (const te of atom.workspace.getTextEditors()) {
                const rec = map.get(te);
                if (rec)
                    rec.disposable.dispose();
            }
        });
    }
    setStatusBar(sb) {
        this.statusBarView = new status_bar_1.StatusBarView(this.outputPanel);
        this.statusBarTile = sb.addRightTile({
            item: this.statusBarView.element,
            priority: 100,
        });
    }
    removeStatusBar() {
        if (this.statusBarTile) {
            this.statusBarTile.destroy();
            this.statusBarTile = undefined;
        }
        if (this.statusBarView) {
            this.statusBarView.destroy();
            this.statusBarView = undefined;
        }
    }
    controllerOnGrammar(editor, grammar) {
        for (const [factory, map] of this.controllers.entries()) {
            const rec = map.get(editor);
            if (!rec && factory.supportsGrammar(grammar.scopeName)) {
                const controller = new factory(editor, this);
                const disposable = new atom_1.CompositeDisposable();
                disposable.add(new atom_1.Disposable(() => {
                    map.delete(editor);
                    controller.destroy();
                }), editor.onDidDestroy(() => disposable.dispose()));
                map.set(editor, { controller, disposable });
            }
            else if (rec && !factory.supportsGrammar(grammar.scopeName)) {
                rec.disposable.dispose();
            }
        }
    }
    subscribeEditorController() {
        this.disposables.add(atom.workspace.observeTextEditors((editor) => {
            const editorDisp = new atom_1.CompositeDisposable();
            editorDisp.add(editor.onDidChangeGrammar((grammar) => {
                this.controllerOnGrammar(editor, grammar);
            }), editor.onDidDestroy(() => {
                editorDisp.dispose();
                this.disposables.remove(editorDisp);
            }));
            this.disposables.add(editorDisp);
            this.controllerOnGrammar(editor, editor.getGrammar());
        }));
    }
}
exports.PluginManager = PluginManager;
//# sourceMappingURL=data:application/json;base64,