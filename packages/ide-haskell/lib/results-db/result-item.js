"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const atom_1 = require("atom");
const utils_1 = require("../utils");
class ResultItem {
    constructor(providerId, { uri, message, severity, position, context }) {
        this.providerId = providerId;
        this.uri = uri;
        this.message = utils_1.MessageObject.fromObject(message);
        this.severity = severity;
        this.position = position ? atom_1.Point.fromObject(position) : undefined;
        this.context = context;
        this._isValid = true;
    }
    isValid() {
        return this._isValid;
    }
    setValid(isValid) {
        this._isValid = isValid;
    }
    hash() {
        if (this._hash !== undefined) {
            return this._hash;
        }
        const h = crypto_1.createHash('sha1');
        h.update(JSON.stringify({
            uri: this.uri,
            position: this.position ? this.position.serialize() : undefined,
            message: this.message.raw(),
            severity: this.severity,
            context: this.context,
        }));
        this._hash = h.digest('base64');
        return this._hash;
    }
}
exports.ResultItem = ResultItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0LWl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9yZXN1bHQtaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQywrQkFBNEI7QUFDNUIsb0NBQXdDO0FBR3hDO0lBUUUsWUFDa0IsVUFBa0IsRUFDbEMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFtQjtRQUQ5QyxlQUFVLEdBQVYsVUFBVSxDQUFRO1FBR2xDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxxQkFBYSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNoRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtRQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBSyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFBO1FBQ2pFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFBO0lBQ3RCLENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUE7SUFDdEIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxPQUFnQjtRQUM5QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQTtJQUN6QixDQUFDO0lBRU0sSUFBSTtRQUNULEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtRQUNuQixDQUFDO1FBQ0QsTUFBTSxDQUFDLEdBQUcsbUJBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUM1QixDQUFDLENBQUMsTUFBTSxDQUNOLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDYixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUztZQUMvRCxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7WUFDM0IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztTQUN0QixDQUFDLENBQ0gsQ0FBQTtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0NBQ0Y7QUE3Q0QsZ0NBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gJ2NyeXB0bydcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IE1lc3NhZ2VPYmplY3QgfSBmcm9tICcuLi91dGlscydcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuXG5leHBvcnQgY2xhc3MgUmVzdWx0SXRlbSB7XG4gIHB1YmxpYyByZWFkb25seSB1cmk/OiBzdHJpbmdcbiAgcHVibGljIHJlYWRvbmx5IHBvc2l0aW9uPzogUG9pbnRcbiAgcHVibGljIHJlYWRvbmx5IG1lc3NhZ2U6IE1lc3NhZ2VPYmplY3RcbiAgcHVibGljIHJlYWRvbmx5IHNldmVyaXR5OiBVUEkuVFNldmVyaXR5XG4gIHB1YmxpYyByZWFkb25seSBjb250ZXh0Pzogc3RyaW5nXG4gIHByaXZhdGUgX2lzVmFsaWQ6IGJvb2xlYW5cbiAgcHJpdmF0ZSBfaGFzaD86IHN0cmluZ1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvdmlkZXJJZDogbnVtYmVyLFxuICAgIHsgdXJpLCBtZXNzYWdlLCBzZXZlcml0eSwgcG9zaXRpb24sIGNvbnRleHQgfTogVVBJLklSZXN1bHRJdGVtLFxuICApIHtcbiAgICB0aGlzLnVyaSA9IHVyaVxuICAgIHRoaXMubWVzc2FnZSA9IE1lc3NhZ2VPYmplY3QuZnJvbU9iamVjdChtZXNzYWdlKVxuICAgIHRoaXMuc2V2ZXJpdHkgPSBzZXZlcml0eVxuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbiA/IFBvaW50LmZyb21PYmplY3QocG9zaXRpb24pIDogdW5kZWZpbmVkXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dFxuICAgIHRoaXMuX2lzVmFsaWQgPSB0cnVlXG4gIH1cblxuICBwdWJsaWMgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNWYWxpZFxuICB9XG5cbiAgcHVibGljIHNldFZhbGlkKGlzVmFsaWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pc1ZhbGlkID0gaXNWYWxpZFxuICB9XG5cbiAgcHVibGljIGhhc2goKSB7XG4gICAgaWYgKHRoaXMuX2hhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hhc2hcbiAgICB9XG4gICAgY29uc3QgaCA9IGNyZWF0ZUhhc2goJ3NoYTEnKVxuICAgIGgudXBkYXRlKFxuICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB1cmk6IHRoaXMudXJpLFxuICAgICAgICBwb3NpdGlvbjogdGhpcy5wb3NpdGlvbiA/IHRoaXMucG9zaXRpb24uc2VyaWFsaXplKCkgOiB1bmRlZmluZWQsXG4gICAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZS5yYXcoKSxcbiAgICAgICAgc2V2ZXJpdHk6IHRoaXMuc2V2ZXJpdHksXG4gICAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcbiAgICAgIH0pLFxuICAgIClcbiAgICB0aGlzLl9oYXNoID0gaC5kaWdlc3QoJ2Jhc2U2NCcpXG4gICAgcmV0dXJuIHRoaXMuX2hhc2hcbiAgfVxufVxuIl19