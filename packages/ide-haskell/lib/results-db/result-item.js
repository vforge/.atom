"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const atom_1 = require("atom");
const utils_1 = require("../utils");
class ResultItem {
    constructor(providerId, { uri, message, severity, position, context }) {
        this.providerId = providerId;
        this.uri = uri;
        this.message = utils_1.MessageObject.fromObject(message);
        this.severity = severity;
        this.position = position && atom_1.Point.fromObject(position);
        this.context = context;
        this._isValid = true;
    }
    isValid() {
        return this._isValid;
    }
    setValid(isValid) {
        this._isValid = isValid;
    }
    hash() {
        if (this._hash) {
            return this._hash;
        }
        const h = crypto_1.createHash('sha1');
        h.update(JSON.stringify({
            uri: this.uri, position: this.position && this.position.serialize(),
            message: this.message.raw(), severity: this.severity,
            context: this.context,
        }));
        this._hash = h.digest('base64');
        return this._hash;
    }
}
exports.ResultItem = ResultItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0LWl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9yZXN1bHQtaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQywrQkFBNEI7QUFDNUIsb0NBQXdDO0FBR3hDO0lBUUUsWUFBNEIsVUFBa0IsRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQW1CO1FBQWxGLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDNUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUE7UUFDZCxJQUFJLENBQUMsT0FBTyxHQUFHLHFCQUFhLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2hELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBQ3hCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxJQUFJLFlBQUssQ0FBQyxVQUFVLENBQUMsUUFBZSxDQUFDLENBQUE7UUFDN0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUE7SUFDdEIsQ0FBQztJQUVNLE9BQU87UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQTtJQUN0QixDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQWdCO1FBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFBO0lBQ3pCLENBQUM7SUFFTSxJQUFJO1FBQ1QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtRQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLEdBQUcsbUJBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUM1QixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDdEIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7WUFDbkUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3BELE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztTQUN0QixDQUFDLENBQUMsQ0FBQTtRQUNILElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0NBQ0Y7QUFwQ0QsZ0NBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gJ2NyeXB0bydcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IE1lc3NhZ2VPYmplY3QgfSBmcm9tICcuLi91dGlscydcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuXG5leHBvcnQgY2xhc3MgUmVzdWx0SXRlbSB7XG4gIHB1YmxpYyByZWFkb25seSB1cmk/OiBzdHJpbmdcbiAgcHVibGljIHJlYWRvbmx5IHBvc2l0aW9uPzogUG9pbnRcbiAgcHVibGljIHJlYWRvbmx5IG1lc3NhZ2U6IE1lc3NhZ2VPYmplY3RcbiAgcHVibGljIHJlYWRvbmx5IHNldmVyaXR5OiBVUEkuVFNldmVyaXR5XG4gIHB1YmxpYyByZWFkb25seSBjb250ZXh0Pzogc3RyaW5nXG4gIHByaXZhdGUgX2lzVmFsaWQ6IGJvb2xlYW5cbiAgcHJpdmF0ZSBfaGFzaD86IHN0cmluZ1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgcHJvdmlkZXJJZDogbnVtYmVyLCB7IHVyaSwgbWVzc2FnZSwgc2V2ZXJpdHksIHBvc2l0aW9uLCBjb250ZXh0IH06IFVQSS5JUmVzdWx0SXRlbSkge1xuICAgIHRoaXMudXJpID0gdXJpXG4gICAgdGhpcy5tZXNzYWdlID0gTWVzc2FnZU9iamVjdC5mcm9tT2JqZWN0KG1lc3NhZ2UpXG4gICAgdGhpcy5zZXZlcml0eSA9IHNldmVyaXR5XG4gICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uICYmIFBvaW50LmZyb21PYmplY3QocG9zaXRpb24gYXMgYW55KSAvLyBUT0RPOiBmaXggdGhpcyBhcyBzb29uIGFzIG5ldyB0eXBpbmdzIGF2YWlsYWJsZVxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHRcbiAgICB0aGlzLl9pc1ZhbGlkID0gdHJ1ZVxuICB9XG5cbiAgcHVibGljIGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVmFsaWRcbiAgfVxuXG4gIHB1YmxpYyBzZXRWYWxpZChpc1ZhbGlkOiBib29sZWFuKSB7XG4gICAgdGhpcy5faXNWYWxpZCA9IGlzVmFsaWRcbiAgfVxuXG4gIHB1YmxpYyBoYXNoKCkge1xuICAgIGlmICh0aGlzLl9oYXNoKSB7IHJldHVybiB0aGlzLl9oYXNoIH1cbiAgICBjb25zdCBoID0gY3JlYXRlSGFzaCgnc2hhMScpXG4gICAgaC51cGRhdGUoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdXJpOiB0aGlzLnVyaSwgcG9zaXRpb246IHRoaXMucG9zaXRpb24gJiYgdGhpcy5wb3NpdGlvbi5zZXJpYWxpemUoKSxcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZS5yYXcoKSwgc2V2ZXJpdHk6IHRoaXMuc2V2ZXJpdHksXG4gICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG4gICAgfSkpXG4gICAgdGhpcy5faGFzaCA9IGguZGlnZXN0KCdiYXNlNjQnKVxuICAgIHJldHVybiB0aGlzLl9oYXNoXG4gIH1cbn1cbiJdfQ==