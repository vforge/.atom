"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
const provider_1 = require("./provider");
const utils_1 = require("../utils");
class ResultsDB {
    constructor() {
        this.currentId = 0;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.messages = new Map();
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    didUpdate(providerId, msgs) {
        const uris = msgs.map((v) => v.uri).filter(utils_1.notUndefined);
        for (const [k, v] of Array.from(this.messages)) {
            if (v.providerId === providerId || v.uri && uris.includes(v.uri)) {
                this.messages.delete(k);
            }
        }
        for (const msg of msgs) {
            this.messages.set(msg.hash(), msg);
        }
        const severities = new Set(msgs.map((v) => v.severity));
        this.emitter.emit('did-update', Array.from(severities));
    }
    registerProvider() {
        const p = new provider_1.Provider(this, ++this.currentId);
        this.disposables.add(p);
        return p;
    }
    results() {
        return this.messages.values();
    }
    *filter(f) {
        for (const v of this.results()) {
            if (f(v)) {
                yield v;
            }
        }
    }
    isEmpty(severities) {
        return !Array.from(this.messages.values()).some(({ severity }) => severities.includes(severity));
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUEwQztBQUtQLHFCQUwxQix3QkFBVSxDQUswQjtBQUo3QywrQkFBNkQ7QUFDN0QseUNBQStEO0FBQy9ELG9DQUF1QztBQU12QztJQU9FO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUE7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7UUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGNBQU8sRUFBRSxDQUFBO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUMsUUFBeUI7UUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBRU0sU0FBUyxDQUFDLFVBQWtCLEVBQUUsSUFBa0I7UUFDckQsTUFBTSxJQUFJLEdBQWEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxvQkFBWSxDQUFDLENBQUE7UUFDbEUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsS0FBSyxVQUFVLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pFLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3pCLENBQUM7UUFDSCxDQUFDO1FBQ0QsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDcEMsQ0FBQztRQUNELE1BQU0sVUFBVSxHQUF1QixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUMzRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBQ3pELENBQUM7SUFFTSxnQkFBZ0I7UUFDckIsTUFBTSxDQUFDLEdBQUcsSUFBSSxtQkFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUVNLE9BQU87UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUMvQixDQUFDO0lBRU0sQ0FBRSxNQUFNLENBQUMsQ0FBZ0M7UUFDOUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQUMsQ0FBQztRQUN2QixDQUFDO0lBQ0gsQ0FBQztJQUVNLE9BQU8sQ0FBQyxVQUEyQjtRQUN4QyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDbEcsQ0FBQztDQUNGO0FBeERELDhCQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc3VsdEl0ZW0gfSBmcm9tICcuL3Jlc3VsdC1pdGVtJ1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgVEVtaXR0ZXIsIEVtaXR0ZXIgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgUHJvdmlkZXIsIFRNZXNzYWdlUHJvdmlkZXJGdW5jdGlvbiB9IGZyb20gJy4vcHJvdmlkZXInXG5pbXBvcnQgeyBub3RVbmRlZmluZWQgfSBmcm9tICcuLi91dGlscydcblxuZXhwb3J0IHsgVE1lc3NhZ2VQcm92aWRlckZ1bmN0aW9uLCBSZXN1bHRJdGVtIH1cblxuZXhwb3J0IHR5cGUgVFVwZGF0ZUNhbGxiYWNrID0gKHNldmVyaXRpZXM6IFVQSS5UU2V2ZXJpdHlbXSkgPT4gdm9pZFxuXG5leHBvcnQgY2xhc3MgUmVzdWx0c0RCIHtcbiAgcHJpdmF0ZSBjdXJyZW50SWQ6IG51bWJlclxuICBwcml2YXRlIG1lc3NhZ2VzOiBNYXA8c3RyaW5nLCBSZXN1bHRJdGVtPlxuICBwcml2YXRlIGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIHByaXZhdGUgZW1pdHRlcjogVEVtaXR0ZXI8e1xuICAgICdkaWQtdXBkYXRlJzogVVBJLlRTZXZlcml0eVtdXG4gIH0+XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY3VycmVudElkID0gMFxuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMuZW1pdHRlcilcbiAgICB0aGlzLm1lc3NhZ2VzID0gbmV3IE1hcCgpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICB9XG5cbiAgcHVibGljIG9uRGlkVXBkYXRlKGNhbGxiYWNrOiBUVXBkYXRlQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtdXBkYXRlJywgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgZGlkVXBkYXRlKHByb3ZpZGVySWQ6IG51bWJlciwgbXNnczogUmVzdWx0SXRlbVtdKSB7XG4gICAgY29uc3QgdXJpczogc3RyaW5nW10gPSBtc2dzLm1hcCgodikgPT4gdi51cmkpLmZpbHRlcihub3RVbmRlZmluZWQpXG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgQXJyYXkuZnJvbSh0aGlzLm1lc3NhZ2VzKSkge1xuICAgICAgaWYgKHYucHJvdmlkZXJJZCA9PT0gcHJvdmlkZXJJZCB8fCB2LnVyaSAmJiB1cmlzLmluY2x1ZGVzKHYudXJpKSkge1xuICAgICAgICB0aGlzLm1lc3NhZ2VzLmRlbGV0ZShrKVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IG1zZyBvZiBtc2dzKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VzLnNldChtc2cuaGFzaCgpLCBtc2cpXG4gICAgfVxuICAgIGNvbnN0IHNldmVyaXRpZXM6IFNldDxVUEkuVFNldmVyaXR5PiA9IG5ldyBTZXQobXNncy5tYXAoKHYpID0+IHYuc2V2ZXJpdHkpKVxuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtdXBkYXRlJywgQXJyYXkuZnJvbShzZXZlcml0aWVzKSlcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlclByb3ZpZGVyKCkge1xuICAgIGNvbnN0IHAgPSBuZXcgUHJvdmlkZXIodGhpcywgKyt0aGlzLmN1cnJlbnRJZClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChwKVxuICAgIHJldHVybiBwXG4gIH1cblxuICBwdWJsaWMgcmVzdWx0cygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy52YWx1ZXMoKVxuICB9XG5cbiAgcHVibGljICogZmlsdGVyKGY6IChpdGVtOiBSZXN1bHRJdGVtKSA9PiBib29sZWFuKSB7XG4gICAgZm9yIChjb25zdCB2IG9mIHRoaXMucmVzdWx0cygpKSB7XG4gICAgICBpZiAoZih2KSkgeyB5aWVsZCB2IH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaXNFbXB0eShzZXZlcml0aWVzOiBVUEkuVFNldmVyaXR5W10pIHtcbiAgICByZXR1cm4gIUFycmF5LmZyb20odGhpcy5tZXNzYWdlcy52YWx1ZXMoKSkuc29tZSgoeyBzZXZlcml0eSB9KSA9PiBzZXZlcml0aWVzLmluY2x1ZGVzKHNldmVyaXR5KSlcbiAgfVxufVxuIl19