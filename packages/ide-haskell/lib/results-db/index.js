"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
const provider_1 = require("./provider");
const utils_1 = require("../utils");
class ResultsDB {
    constructor() {
        this.currentId = 0;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.messages = new Map();
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    didUpdate(providerId, msgs) {
        const uris = msgs.map((v) => v.uri).filter(utils_1.notUndefined);
        for (const [k, v] of Array.from(this.messages)) {
            if (v.providerId === providerId || v.uri && uris.includes(v.uri)) {
                this.messages.delete(k);
            }
        }
        for (const msg of msgs) {
            this.messages.set(msg.hash(), msg);
        }
        const severities = new Set(msgs.map((v) => v.severity));
        this.emitter.emit('did-update', Array.from(severities));
    }
    registerProvider() {
        const p = new provider_1.Provider(this, ++this.currentId);
        this.disposables.add(p);
        return p;
    }
    results() {
        return this.messages.values();
    }
    *filter(f) {
        for (const v of this.results()) {
            if (f(v)) {
                yield v;
            }
        }
    }
    isEmpty(severities) {
        return !Array.from(this.messages.values()).some(({ severity }) => severities.includes(severity));
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUEwQztBQU1QLHFCQU4xQix3QkFBVSxDQU0wQjtBQUw3QywrQkFBbUQ7QUFDbkQseUNBQStEO0FBQy9ELG9DQUF1QztBQU92QztJQU9FO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUE7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7UUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGNBQU8sRUFBRSxDQUFBO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUMsUUFBeUI7UUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBRU0sU0FBUyxDQUFDLFVBQWtCLEVBQUUsSUFBa0I7UUFDckQsTUFBTSxJQUFJLEdBQWEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxvQkFBWSxDQUFDLENBQUE7UUFDbEUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsS0FBSyxVQUFVLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pFLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3pCLENBQUM7UUFDSCxDQUFDO1FBQ0QsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDcEMsQ0FBQztRQUNELE1BQU0sVUFBVSxHQUF1QixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUMzRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBQ3pELENBQUM7SUFFTSxnQkFBZ0I7UUFDckIsTUFBTSxDQUFDLEdBQUcsSUFBSSxtQkFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUVNLE9BQU87UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUMvQixDQUFDO0lBRU0sQ0FBRSxNQUFNLENBQUMsQ0FBZ0M7UUFDOUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQUMsQ0FBQztRQUN2QixDQUFDO0lBQ0gsQ0FBQztJQUVNLE9BQU8sQ0FBQyxVQUEyQjtRQUN4QyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDbEcsQ0FBQztDQUNGO0FBeERELDhCQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc3VsdEl0ZW0gfSBmcm9tICcuL3Jlc3VsdC1pdGVtJ1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgRW1pdHRlciB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBQcm92aWRlciwgVE1lc3NhZ2VQcm92aWRlckZ1bmN0aW9uIH0gZnJvbSAnLi9wcm92aWRlcidcbmltcG9ydCB7IG5vdFVuZGVmaW5lZCB9IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5cbmV4cG9ydCB7IFRNZXNzYWdlUHJvdmlkZXJGdW5jdGlvbiwgUmVzdWx0SXRlbSB9XG5cbmV4cG9ydCB0eXBlIFRVcGRhdGVDYWxsYmFjayA9IChzZXZlcml0aWVzOiBVUEkuVFNldmVyaXR5W10pID0+IHZvaWRcblxuZXhwb3J0IGNsYXNzIFJlc3VsdHNEQiB7XG4gIHByaXZhdGUgY3VycmVudElkOiBudW1iZXJcbiAgcHJpdmF0ZSBtZXNzYWdlczogTWFwPHN0cmluZywgUmVzdWx0SXRlbT5cbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZVxuICBwcml2YXRlIGVtaXR0ZXI6IEVtaXR0ZXI8e30sIHtcbiAgICAnZGlkLXVwZGF0ZSc6IFVQSS5UU2V2ZXJpdHlbXVxuICB9PlxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmN1cnJlbnRJZCA9IDBcbiAgICB0aGlzLmRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyKClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZCh0aGlzLmVtaXR0ZXIpXG4gICAgdGhpcy5tZXNzYWdlcyA9IG5ldyBNYXAoKVxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgfVxuXG4gIHB1YmxpYyBvbkRpZFVwZGF0ZShjYWxsYmFjazogVFVwZGF0ZUNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbignZGlkLXVwZGF0ZScsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIGRpZFVwZGF0ZShwcm92aWRlcklkOiBudW1iZXIsIG1zZ3M6IFJlc3VsdEl0ZW1bXSkge1xuICAgIGNvbnN0IHVyaXM6IHN0cmluZ1tdID0gbXNncy5tYXAoKHYpID0+IHYudXJpKS5maWx0ZXIobm90VW5kZWZpbmVkKVxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIEFycmF5LmZyb20odGhpcy5tZXNzYWdlcykpIHtcbiAgICAgIGlmICh2LnByb3ZpZGVySWQgPT09IHByb3ZpZGVySWQgfHwgdi51cmkgJiYgdXJpcy5pbmNsdWRlcyh2LnVyaSkpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5kZWxldGUoaylcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBtc2cgb2YgbXNncykge1xuICAgICAgdGhpcy5tZXNzYWdlcy5zZXQobXNnLmhhc2goKSwgbXNnKVxuICAgIH1cbiAgICBjb25zdCBzZXZlcml0aWVzOiBTZXQ8VVBJLlRTZXZlcml0eT4gPSBuZXcgU2V0KG1zZ3MubWFwKCh2KSA9PiB2LnNldmVyaXR5KSlcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXVwZGF0ZScsIEFycmF5LmZyb20oc2V2ZXJpdGllcykpXG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJQcm92aWRlcigpIHtcbiAgICBjb25zdCBwID0gbmV3IFByb3ZpZGVyKHRoaXMsICsrdGhpcy5jdXJyZW50SWQpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQocClcbiAgICByZXR1cm4gcFxuICB9XG5cbiAgcHVibGljIHJlc3VsdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXMudmFsdWVzKClcbiAgfVxuXG4gIHB1YmxpYyAqIGZpbHRlcihmOiAoaXRlbTogUmVzdWx0SXRlbSkgPT4gYm9vbGVhbikge1xuICAgIGZvciAoY29uc3QgdiBvZiB0aGlzLnJlc3VsdHMoKSkge1xuICAgICAgaWYgKGYodikpIHsgeWllbGQgdiB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGlzRW1wdHkoc2V2ZXJpdGllczogVVBJLlRTZXZlcml0eVtdKSB7XG4gICAgcmV0dXJuICFBcnJheS5mcm9tKHRoaXMubWVzc2FnZXMudmFsdWVzKCkpLnNvbWUoKHsgc2V2ZXJpdHkgfSkgPT4gc2V2ZXJpdGllcy5pbmNsdWRlcyhzZXZlcml0eSkpXG4gIH1cbn1cbiJdfQ==