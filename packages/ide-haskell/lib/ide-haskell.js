"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const plugin_manager_1 = require("./plugin-manager");
const prettify_1 = require("./prettify");
const utils_1 = require("./utils");
const UPI2 = require("./upi-2");
const UPI3 = require("./upi-3");
const OutputPanel = require("./output-panel");
let upiProvided = false;
let disposables;
let pluginManager;
let outputPanel;
let menu;
var config_1 = require("./config");
exports.config = config_1.config;
function cleanConfig() { }
function activate(state) {
    cleanConfig();
    atom.views.getView(atom.workspace).classList.add('ide-haskell');
    require('etch').setScheduler(atom.views);
    upiProvided = false;
    if (atom.config.get('ide-haskell.startupMessageIdeBackend')) {
        setTimeout(() => {
            if (!upiProvided) {
                atom.notifications.addWarning(`Ide-Haskell needs backends that provide most of functionality.
            Please refer to README for details`, { dismissable: true });
            }
        }, 5000);
    }
    disposables = new atom_1.CompositeDisposable();
    pluginManager = new plugin_manager_1.PluginManager(state, outputPanel || new OutputPanel.OutputPanel());
    disposables.add(atom.commands.add('atom-workspace', {
        'ide-haskell:toggle-output': () => { pluginManager && pluginManager.togglePanel(); },
        'ide-haskell:next-error': () => { pluginManager && pluginManager.nextError(); },
        'ide-haskell:prev-error': () => { pluginManager && pluginManager.prevError(); },
    }), atom.commands.add('atom-text-editor.ide-haskell', {
        'ide-haskell:prettify-file': ({ currentTarget }) => {
            prettify_1.prettifyFile(currentTarget.getModel());
        },
    }), atom.commands.add('atom-text-editor.ide-haskell--has-tooltips', {
        'ide-haskell:close-tooltip': ({ currentTarget, abortKeyBinding }) => {
            const controller = pluginManager && pluginManager.controller(currentTarget.getModel());
            if (controller && controller.tooltips.has()) {
                controller.tooltips.hide();
            }
            else if (abortKeyBinding) {
                abortKeyBinding();
            }
        },
    }));
    menu = new atom_1.CompositeDisposable();
    menu.add(atom.menu.add([{
            label: utils_1.MAIN_MENU_LABEL,
            submenu: [
                { label: 'Prettify', command: 'ide-haskell:prettify-file' },
                { label: 'Toggle Panel', command: 'ide-haskell:toggle-output' },
            ],
        }]));
}
exports.activate = activate;
function deactivate() {
    pluginManager && pluginManager.deactivate();
    disposables && disposables.dispose();
    menu && menu.dispose();
    atom.menu.update();
}
exports.deactivate = deactivate;
function serialize() {
    if (pluginManager) {
        return pluginManager.serialize();
    }
}
exports.serialize = serialize;
function deserializeOutputPanel(state) {
    outputPanel = new OutputPanel.OutputPanel(state);
    return outputPanel;
}
exports.deserializeOutputPanel = deserializeOutputPanel;
function provideUpi() {
    upiProvided = true;
    return {
        registerPlugin(disp, pluginName) {
            if (!pluginManager) {
                return undefined;
            }
            return UPI2.instance(pluginManager, disp, pluginName);
        },
    };
}
exports.provideUpi = provideUpi;
function provideUpi3() {
    upiProvided = true;
    return (options) => {
        if (!pluginManager) {
            throw new Error('IDE-Haskell failed to provide UPI instance: pluginManager is undefined');
        }
        return UPI3.instance(pluginManager, options);
    };
}
exports.provideUpi3 = provideUpi3;
function consumeUpi3(registration) {
    upiProvided = true;
    if (pluginManager) {
        return UPI3.consume(pluginManager, registration);
    }
}
exports.consumeUpi3 = consumeUpi3;
function consumeLinter(indieRegistry) {
    if (!(disposables && pluginManager)) {
        return undefined;
    }
    const linter = indieRegistry.register({ name: 'IDE-Haskell' });
    disposables.add(linter);
    pluginManager.setLinter(linter);
    return linter;
}
exports.consumeLinter = consumeLinter;
function consumeStatusBar(statusBar) {
    if (!pluginManager) {
        return undefined;
    }
    pluginManager.setStatusBar(statusBar);
    return new atom_1.Disposable(() => {
        if (pluginManager) {
            pluginManager.removeStatusBar();
        }
    });
}
exports.consumeStatusBar = consumeStatusBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlLWhhc2tlbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaWRlLWhhc2tlbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBa0U7QUFDbEUscURBQXdEO0FBQ3hELHlDQUF5QztBQUN6QyxtQ0FBeUM7QUFDekMsZ0NBQStCO0FBQy9CLGdDQUErQjtBQUMvQiw4Q0FBNkM7QUFFN0MsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFBO0FBQ3ZCLElBQUksV0FBNEMsQ0FBQTtBQUNoRCxJQUFJLGFBQXdDLENBQUE7QUFDNUMsSUFBSSxXQUFnRCxDQUFBO0FBQ3BELElBQUksSUFBcUMsQ0FBQTtBQUV6QyxtQ0FBaUM7QUFBeEIsMEJBQUEsTUFBTSxDQUFBO0FBRWYseUJBQWtDLENBQUM7QUFFbkMsa0JBQXlCLEtBQWE7SUFDcEMsV0FBVyxFQUFFLENBQUE7SUFFYixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUUvRCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUV4QyxXQUFXLEdBQUcsS0FBSyxDQUFBO0lBRW5CLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVELFVBQVUsQ0FDUixHQUFHLEVBQUU7WUFDSCxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUMzQjsrQ0FDbUMsRUFDbkMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtZQUMxQixDQUFDO1FBQ0gsQ0FBQyxFQUNELElBQUksQ0FDTCxDQUFBO0lBQ0gsQ0FBQztJQUVELFdBQVcsR0FB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LENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQy9CLE1BQU0sQ0FBQyxNQUFNLENBQUE7QUFDZixDQUFDO0FBTkQsc0NBTUM7QUFFRCwwQkFBaUMsU0FBOEI7SUFDN0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQTtJQUFDLENBQUM7SUFDeEMsYUFBYSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNyQyxNQUFNLENBQUMsSUFBSSxpQkFBVSxDQUFDLEdBQUcsRUFBRTtRQUN6QixFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLGFBQWEsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtRQUNqQyxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBUkQsNENBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRXZlbnREZXNjLCBDb21wb3NpdGVEaXNwb3NhYmxlLCBEaXNwb3NhYmxlIH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IFBsdWdpbk1hbmFnZXIsIElTdGF0ZSB9IGZyb20gJy4vcGx1Z2luLW1hbmFnZXInXG5pbXBvcnQgeyBwcmV0dGlmeUZpbGUgfSBmcm9tICcuL3ByZXR0aWZ5J1xuaW1wb3J0IHsgTUFJTl9NRU5VX0xBQkVMIH0gZnJvbSAnLi91dGlscydcbmltcG9ydCAqIGFzIFVQSTIgZnJvbSAnLi91cGktMidcbmltcG9ydCAqIGFzIFVQSTMgZnJvbSAnLi91cGktMydcbmltcG9ydCAqIGFzIE91dHB1dFBhbmVsIGZyb20gJy4vb3V0cHV0LXBhbmVsJ1xuXG5sZXQgdXBpUHJvdmlkZWQgPSBmYWxzZVxubGV0IGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlIHwgdW5kZWZpbmVkXG5sZXQgcGx1Z2luTWFuYWdlcjogUGx1Z2luTWFuYWdlciB8IHVuZGVmaW5lZFxubGV0IG91dHB1dFBhbmVsOiBPdXRwdXRQYW5lbC5PdXRwdXRQYW5lbCB8IHVuZGVmaW5lZFxubGV0IG1lbnU6IENvbXBvc2l0ZURpc3Bvc2FibGUgfCB1bmRlZmluZWRcblxuZXhwb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnXG5cbmZ1bmN0aW9uIGNsZWFuQ29uZmlnKCkgeyAvKm5vb3AqLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0ZShzdGF0ZTogSVN0YXRlKSB7XG4gIGNsZWFuQ29uZmlnKClcblxuICBhdG9tLnZpZXdzLmdldFZpZXcoYXRvbS53b3Jrc3BhY2UpLmNsYXNzTGlzdC5hZGQoJ2lkZS1oYXNrZWxsJylcblxuICByZXF1aXJlKCdldGNoJykuc2V0U2NoZWR1bGVyKGF0b20udmlld3MpXG5cbiAgdXBpUHJvdmlkZWQgPSBmYWxzZVxuXG4gIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLnN0YXJ0dXBNZXNzYWdlSWRlQmFja2VuZCcpKSB7XG4gICAgc2V0VGltZW91dChcbiAgICAgICgpID0+IHtcbiAgICAgICAgaWYgKCF1cGlQcm92aWRlZCkge1xuICAgICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKFxuICAgICAgICAgICAgYElkZS1IYXNrZWxsIG5lZWRzIGJhY2tlbmRzIHRoYXQgcHJvdmlkZSBtb3N0IG9mIGZ1bmN0aW9uYWxpdHkuXG4gICAgICAgICAgICBQbGVhc2UgcmVmZXIgdG8gUkVBRE1FIGZvciBkZXRhaWxzYCxcbiAgICAgICAgICAgIHsgZGlzbWlzc2FibGU6IHRydWUgfSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIDUwMDAsXG4gICAgKVxuICB9XG5cbiAgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG5cbiAgcGx1Z2luTWFuYWdlciA9IG5ldyBQbHVnaW5NYW5hZ2VyKHN0YXRlLCBvdXRwdXRQYW5lbCB8fCBuZXcgT3V0cHV0UGFuZWwuT3V0cHV0UGFuZWwoKSlcblxuICAvLyBnbG9iYWwgY29tbWFuZHNcbiAgZGlzcG9zYWJsZXMuYWRkKFxuICAgIGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsIHtcbiAgICAgICdpZGUtaGFza2VsbDp0b2dnbGUtb3V0cHV0JzogKCkgPT4geyBwbHVnaW5NYW5hZ2VyICYmIHBsdWdpbk1hbmFnZXIudG9nZ2xlUGFuZWwoKSB9LFxuICAgICAgJ2lkZS1oYXNrZWxsOm5leHQtZXJyb3InOiAoKSA9PiB7IHBsdWdpbk1hbmFnZXIgJiYgcGx1Z2luTWFuYWdlci5uZXh0RXJyb3IoKSB9LFxuICAgICAgJ2lkZS1oYXNrZWxsOnByZXYtZXJyb3InOiAoKSA9PiB7IHBsdWdpbk1hbmFnZXIgJiYgcGx1Z2luTWFuYWdlci5wcmV2RXJyb3IoKSB9LFxuICAgIH0pLFxuICAgIGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXRleHQtZWRpdG9yLmlkZS1oYXNrZWxsJywge1xuICAgICAgJ2lkZS1oYXNrZWxsOnByZXR0aWZ5LWZpbGUnOiAoeyBjdXJyZW50VGFyZ2V0IH06IElFdmVudERlc2MpID0+IHtcbiAgICAgICAgcHJldHRpZnlGaWxlKGN1cnJlbnRUYXJnZXQuZ2V0TW9kZWwoKSlcbiAgICAgIH0sXG4gICAgfSksXG4gICAgYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20tdGV4dC1lZGl0b3IuaWRlLWhhc2tlbGwtLWhhcy10b29sdGlwcycsIHtcbiAgICAgICdpZGUtaGFza2VsbDpjbG9zZS10b29sdGlwJzogKHsgY3VycmVudFRhcmdldCwgYWJvcnRLZXlCaW5kaW5nIH06IElFdmVudERlc2MpID0+IHtcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHBsdWdpbk1hbmFnZXIgJiYgcGx1Z2luTWFuYWdlci5jb250cm9sbGVyKGN1cnJlbnRUYXJnZXQuZ2V0TW9kZWwoKSlcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIgJiYgY29udHJvbGxlci50b29sdGlwcy5oYXMoKSkge1xuICAgICAgICAgIGNvbnRyb2xsZXIudG9vbHRpcHMuaGlkZSgpXG4gICAgICAgIH0gZWxzZSBpZiAoYWJvcnRLZXlCaW5kaW5nKSB7XG4gICAgICAgICAgYWJvcnRLZXlCaW5kaW5nKClcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KSxcbiAgKVxuXG4gIG1lbnUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIG1lbnUuYWRkKGF0b20ubWVudS5hZGQoW3tcbiAgICBsYWJlbDogTUFJTl9NRU5VX0xBQkVMLFxuICAgIHN1Ym1lbnU6IFtcbiAgICAgIHsgbGFiZWw6ICdQcmV0dGlmeScsIGNvbW1hbmQ6ICdpZGUtaGFza2VsbDpwcmV0dGlmeS1maWxlJyB9LFxuICAgICAgeyBsYWJlbDogJ1RvZ2dsZSBQYW5lbCcsIGNvbW1hbmQ6ICdpZGUtaGFza2VsbDp0b2dnbGUtb3V0cHV0JyB9LFxuICAgIF0sXG4gIH1dKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG4gIHBsdWdpbk1hbmFnZXIgJiYgcGx1Z2luTWFuYWdlci5kZWFjdGl2YXRlKClcblxuICAvLyBjbGVhciBjb21tYW5kc1xuICBkaXNwb3NhYmxlcyAmJiBkaXNwb3NhYmxlcy5kaXNwb3NlKClcblxuICBtZW51ICYmIG1lbnUuZGlzcG9zZSgpXG4gIGF0b20ubWVudS51cGRhdGUoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplKCkge1xuICBpZiAocGx1Z2luTWFuYWdlcikge1xuICAgIHJldHVybiBwbHVnaW5NYW5hZ2VyLnNlcmlhbGl6ZSgpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlc2VyaWFsaXplT3V0cHV0UGFuZWwoc3RhdGU6IE91dHB1dFBhbmVsLklTdGF0ZSkge1xuICBvdXRwdXRQYW5lbCA9IG5ldyBPdXRwdXRQYW5lbC5PdXRwdXRQYW5lbChzdGF0ZSlcbiAgcmV0dXJuIG91dHB1dFBhbmVsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlVXBpKCk6IFVQSTIuSVVQSVByb3ZpZGVkIHtcbiAgdXBpUHJvdmlkZWQgPSB0cnVlXG4gIHJldHVybiB7XG4gICAgcmVnaXN0ZXJQbHVnaW4oZGlzcCwgcGx1Z2luTmFtZSkge1xuICAgICAgaWYgKCFwbHVnaW5NYW5hZ2VyKSB7IHJldHVybiB1bmRlZmluZWQgfVxuICAgICAgcmV0dXJuIFVQSTIuaW5zdGFuY2UocGx1Z2luTWFuYWdlciwgZGlzcCwgcGx1Z2luTmFtZSlcbiAgICB9LFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlVXBpMygpOiBVUEkuSVVQSVJlZ2lzdHJhdGlvbiB7XG4gIHVwaVByb3ZpZGVkID0gdHJ1ZVxuICByZXR1cm4gKG9wdGlvbnM6IFVQSS5JUmVnaXN0cmF0aW9uT3B0aW9ucykgPT4ge1xuICAgIGlmICghcGx1Z2luTWFuYWdlcikgeyB0aHJvdyBuZXcgRXJyb3IoJ0lERS1IYXNrZWxsIGZhaWxlZCB0byBwcm92aWRlIFVQSSBpbnN0YW5jZTogcGx1Z2luTWFuYWdlciBpcyB1bmRlZmluZWQnKSB9XG4gICAgcmV0dXJuIFVQSTMuaW5zdGFuY2UocGx1Z2luTWFuYWdlciwgb3B0aW9ucylcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3VtZVVwaTMocmVnaXN0cmF0aW9uOiBVUEkuSVJlZ2lzdHJhdGlvbk9wdGlvbnMpOiBEaXNwb3NhYmxlIHwgdW5kZWZpbmVkIHtcbiAgdXBpUHJvdmlkZWQgPSB0cnVlXG4gIGlmIChwbHVnaW5NYW5hZ2VyKSB7XG4gICAgcmV0dXJuIFVQSTMuY29uc3VtZShwbHVnaW5NYW5hZ2VyLCByZWdpc3RyYXRpb24pXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWVMaW50ZXIoaW5kaWVSZWdpc3RyeTogTGludGVyLkluZGllUmVnaXN0cnkpOiBEaXNwb3NhYmxlIHwgdW5kZWZpbmVkIHtcbiAgaWYgKCEoZGlzcG9zYWJsZXMgJiYgcGx1Z2luTWFuYWdlcikpIHsgcmV0dXJuIHVuZGVmaW5lZCB9XG4gIGNvbnN0IGxpbnRlciA9IGluZGllUmVnaXN0cnkucmVnaXN0ZXIoeyBuYW1lOiAnSURFLUhhc2tlbGwnIH0pXG4gIGRpc3Bvc2FibGVzLmFkZChsaW50ZXIpXG4gIHBsdWdpbk1hbmFnZXIuc2V0TGludGVyKGxpbnRlcilcbiAgcmV0dXJuIGxpbnRlclxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3VtZVN0YXR1c0JhcihzdGF0dXNCYXI6IFN0YXR1c0Jhci5TdGF0dXNCYXIpOiBEaXNwb3NhYmxlIHwgdW5kZWZpbmVkIHtcbiAgaWYgKCFwbHVnaW5NYW5hZ2VyKSB7IHJldHVybiB1bmRlZmluZWQgfVxuICBwbHVnaW5NYW5hZ2VyLnNldFN0YXR1c0JhcihzdGF0dXNCYXIpXG4gIHJldHVybiBuZXcgRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgaWYgKHBsdWdpbk1hbmFnZXIpIHtcbiAgICAgIHBsdWdpbk1hbmFnZXIucmVtb3ZlU3RhdHVzQmFyKClcbiAgICB9XG4gIH0pXG59XG4iXX0=