"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_haskell_utils_1 = require("atom-haskell-utils");
const util_cabal_format_1 = require("./util-cabal-format");
const util_stylish_haskell_1 = require("./util-stylish-haskell");
async function prettifyFile(editor) {
    const [firstCursor, ...cursors] = editor.getCursors().map((cursor) => cursor.getBufferPosition());
    const format = editor.getGrammar().scopeName;
    const prettify = format === 'source.cabal' ? util_cabal_format_1.format : util_stylish_haskell_1.format;
    const workDir = (await atom_haskell_utils_1.getRootDir(editor.getBuffer())).getPath();
    try {
        const { stdout, stderr } = await prettify(editor.getText(), workDir, editor.getRootScopeDescriptor());
        editor.setText(stdout);
        if (editor.getLastCursor()) {
            editor.getLastCursor().setBufferPosition(firstCursor, { autoscroll: false });
        }
        cursors.forEach((cursor) => {
            editor.addCursorAtBufferPosition(cursor, { autoscroll: false });
        });
        if (stderr.length > 0) {
            atom.notifications.addWarning('Prettifier reported the following problems:', {
                detail: stderr,
                dismissable: true,
            });
        }
    }
    catch (e) {
        const err = e.error || e;
        let stderr = e.stderr ? e.stderr.trim() : '';
        if (err.message.includes(stderr)) {
            stderr = '';
        }
        atom.notifications.addError('Failed to prettify', {
            detail: `${stderr ? `${stderr}\n\n` : ''}${err.message}`,
            stack: err.stack,
            dismissable: true,
        });
    }
}
exports.prettifyFile = prettifyFile;
var editor_controller_1 = require("./editor-controller");
exports.PrettifyEditorController = editor_controller_1.PrettifyEditorController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJldHRpZnkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwyREFBK0M7QUFDL0MsMkRBQTJEO0FBQzNELGlFQUErRDtBQUV4RCxLQUFLLHVCQUF1QixNQUFrQjtJQUNuRCxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQTtJQUNqRyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFBO0lBQzVDLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxjQUFjLENBQUMsQ0FBQyxDQUFDLDBCQUFXLENBQUMsQ0FBQyxDQUFDLDZCQUFZLENBQUE7SUFDdkUsTUFBTSxPQUFPLEdBQUcsQ0FBQyxNQUFNLCtCQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNoRSxJQUFJLENBQUM7UUFDSCxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQTtRQUNyRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3RCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBQzlFLENBQUM7UUFDRCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDekIsTUFBTSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sRUFBRSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBQ2pFLENBQUMsQ0FBQyxDQUFBO1FBQ0YsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLDZDQUE2QyxFQUFFO2dCQUMzRSxNQUFNLEVBQUUsTUFBTTtnQkFDZCxXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDLENBQUE7UUFDSixDQUFDO0lBQ0gsQ0FBQztJQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFWCxNQUFNLEdBQUcsR0FBVSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQTtRQUUvQixJQUFJLE1BQU0sR0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7UUFDcEQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sR0FBRyxFQUFFLENBQUE7UUFDYixDQUFDO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLEVBQUU7WUFDaEQsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLE9BQU8sRUFBRTtZQUN4RCxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUs7WUFDaEIsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztBQUNILENBQUM7QUFsQ0Qsb0NBa0NDO0FBRUQseURBQThEO0FBQXJELHVEQUFBLHdCQUF3QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dEVkaXRvciB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBnZXRSb290RGlyIH0gZnJvbSAnYXRvbS1oYXNrZWxsLXV0aWxzJ1xuaW1wb3J0IHsgZm9ybWF0IGFzIGNhYmFsRm9ybWF0IH0gZnJvbSAnLi91dGlsLWNhYmFsLWZvcm1hdCdcbmltcG9ydCB7IGZvcm1hdCBhcyBmaWx0ZXJGb3JtYXQgfSBmcm9tICcuL3V0aWwtc3R5bGlzaC1oYXNrZWxsJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJldHRpZnlGaWxlKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICBjb25zdCBbZmlyc3RDdXJzb3IsIC4uLmN1cnNvcnNdID0gZWRpdG9yLmdldEN1cnNvcnMoKS5tYXAoKGN1cnNvcikgPT4gY3Vyc29yLmdldEJ1ZmZlclBvc2l0aW9uKCkpXG4gIGNvbnN0IGZvcm1hdCA9IGVkaXRvci5nZXRHcmFtbWFyKCkuc2NvcGVOYW1lXG4gIGNvbnN0IHByZXR0aWZ5ID0gZm9ybWF0ID09PSAnc291cmNlLmNhYmFsJyA/IGNhYmFsRm9ybWF0IDogZmlsdGVyRm9ybWF0XG4gIGNvbnN0IHdvcmtEaXIgPSAoYXdhaXQgZ2V0Um9vdERpcihlZGl0b3IuZ2V0QnVmZmVyKCkpKS5nZXRQYXRoKClcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHN0ZG91dCwgc3RkZXJyIH0gPSBhd2FpdCBwcmV0dGlmeShlZGl0b3IuZ2V0VGV4dCgpLCB3b3JrRGlyLCBlZGl0b3IuZ2V0Um9vdFNjb3BlRGVzY3JpcHRvcigpKVxuICAgIGVkaXRvci5zZXRUZXh0KHN0ZG91dClcbiAgICBpZiAoZWRpdG9yLmdldExhc3RDdXJzb3IoKSkge1xuICAgICAgZWRpdG9yLmdldExhc3RDdXJzb3IoKS5zZXRCdWZmZXJQb3NpdGlvbihmaXJzdEN1cnNvciwgeyBhdXRvc2Nyb2xsOiBmYWxzZSB9KVxuICAgIH1cbiAgICBjdXJzb3JzLmZvckVhY2goKGN1cnNvcikgPT4ge1xuICAgICAgZWRpdG9yLmFkZEN1cnNvckF0QnVmZmVyUG9zaXRpb24oY3Vyc29yLCB7IGF1dG9zY3JvbGw6IGZhbHNlIH0pXG4gICAgfSlcbiAgICBpZiAoc3RkZXJyLmxlbmd0aCA+IDApIHtcbiAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKCdQcmV0dGlmaWVyIHJlcG9ydGVkIHRoZSBmb2xsb3dpbmcgcHJvYmxlbXM6Jywge1xuICAgICAgICBkZXRhaWw6IHN0ZGVycixcbiAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICB9KVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnNhZmUtYW55XG4gICAgY29uc3QgZXJyOiBFcnJvciA9IGUuZXJyb3IgfHwgZVxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnNhZmUtYW55XG4gICAgbGV0IHN0ZGVycjogc3RyaW5nID0gZS5zdGRlcnIgPyBlLnN0ZGVyci50cmltKCkgOiAnJ1xuICAgIGlmIChlcnIubWVzc2FnZS5pbmNsdWRlcyhzdGRlcnIpKSB7XG4gICAgICBzdGRlcnIgPSAnJ1xuICAgIH1cbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoJ0ZhaWxlZCB0byBwcmV0dGlmeScsIHtcbiAgICAgIGRldGFpbDogYCR7c3RkZXJyID8gYCR7c3RkZXJyfVxcblxcbmAgOiAnJ30ke2Vyci5tZXNzYWdlfWAsXG4gICAgICBzdGFjazogZXJyLnN0YWNrLFxuICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgeyBQcmV0dGlmeUVkaXRvckNvbnRyb2xsZXIgfSBmcm9tICcuL2VkaXRvci1jb250cm9sbGVyJ1xuIl19