"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
class TooltipRegistry {
    constructor(pluginManager) {
        this.pluginManager = pluginManager;
        this.providers = [];
    }
    dispose() {
        this.providers = [];
    }
    register(pluginName, provider) {
        const idx = this.providers.findIndex(({ priority }) => priority < provider.priority);
        const defaultEvT = ["selection", "mouse"];
        const record = {
            pluginName,
            eventTypes: provider.eventTypes || defaultEvT,
            priority: provider.priority,
            handler: provider.handler,
        };
        if (idx === -1) {
            this.providers.push(record);
        }
        else {
            this.providers.splice(idx, 0, record);
        }
        return new atom_1.Disposable(() => {
            const ix = this.providers.indexOf(record);
            this.providers.splice(ix, 1);
        });
    }
    async showTooltip(editor, type, spec) {
        const controller = this.pluginManager.controller(editor);
        if (!controller) {
            return;
        }
        let pluginName;
        let tooltipData;
        if (spec && typeof spec.tooltip !== 'function') {
            tooltipData = spec.tooltip;
            pluginName = spec.pluginName;
        }
        else {
            const eventRange = controller.getEventRange(type);
            if (!eventRange) {
                return;
            }
            if (spec && typeof spec.tooltip === 'function') {
                pluginName = spec.pluginName;
                try {
                    tooltipData = await Promise.resolve(spec.tooltip(eventRange.crange));
                }
                catch (e) {
                    this.pluginManager.backendStatus(spec.pluginName, {
                        status: 'warning',
                        detail: e.toString(),
                    });
                    return;
                }
            }
            else {
                const tooltip = await this.defaultTooltipFunction(editor, type, eventRange.crange);
                if (!tooltip) {
                    controller.tooltips.hide(type, undefined, { persistent: false });
                    return;
                }
                ({ pluginName, tooltipData } = tooltip);
            }
            const newEventRange = controller.getEventRange(type);
            if (!newEventRange || !eventRange.crange.isEqual(newEventRange.crange)) {
                return;
            }
        }
        const { persistent = false } = tooltipData;
        let msg;
        if (Array.isArray(tooltipData.text)) {
            msg = tooltipData.text.map(utils_1.MessageObject.fromObject);
        }
        else {
            msg = utils_1.MessageObject.fromObject(tooltipData.text);
        }
        controller.tooltips.show(atom_1.Range.fromObject(tooltipData.range), msg, type, pluginName, { persistent });
    }
    hideTooltip(editor, type, source) {
        const controller = this.pluginManager.controller(editor);
        if (!controller) {
            return;
        }
        controller.tooltips.hide(type, source);
    }
    async defaultTooltipFunction(editor, type, crange) {
        for (const { pluginName, handler, eventTypes } of this.providers) {
            if (!eventTypes.includes(type)) {
                continue;
            }
            try {
                const tooltipData = await Promise.resolve(handler(editor, crange, type));
                if (!tooltipData) {
                    continue;
                }
                return { pluginName, tooltipData };
            }
            catch (e) {
                this.pluginManager.backendStatus(pluginName, { status: 'warning', detail: `${e}` });
                continue;
            }
        }
        return undefined;
    }
}
exports.TooltipRegistry = TooltipRegistry;
//# sourceMappingURL=data:application/json;base64,