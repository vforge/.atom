"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SelectListView = require("atom-select-list");
async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem, }) {
    const elementForItem = (item) => {
        const li = document.createElement('li');
        const div = document.createElement('div');
        div.style.display = 'inline-block';
        let isActive;
        if (itemTemplate) {
            div.innerHTML = itemTemplate(item);
            isActive = activeItem && itemTemplate(item) === itemTemplate(activeItem);
        }
        else {
            div.innerText = `${item}`;
            isActive = activeItem && item === activeItem;
        }
        if (isActive)
            li.classList.add('active');
        if (div.firstElementChild && div.firstElementChild.tagName === 'LI') {
            div.innerHTML = div.firstElementChild.innerHTML;
        }
        li.appendChild(div);
        return li;
    };
    const filterKeyForItem = (item) => {
        if (typeof itemFilterKey === 'string') {
            return `${item[itemFilterKey]}`;
        }
        else if (itemFilterKey) {
            return itemFilterKey(item);
        }
        else {
            return `${item}`;
        }
    };
    const myitems = await Promise.resolve(items);
    let panel;
    try {
        return await new Promise((resolve) => {
            const select = new SelectListView({
                items: myitems,
                infoMessage: heading,
                itemsClassList: ['ide-haskell', 'mark-active'],
                elementForItem,
                filterKeyForItem,
                didCancelSelection: () => {
                    resolve();
                },
                didConfirmSelection: (item) => {
                    resolve(item);
                },
            });
            select.element.classList.add('ide-haskell');
            panel = atom.workspace.addModalPanel({
                item: select,
                visible: true,
            });
            select.focus();
        });
    }
    finally {
        if (panel)
            panel.destroy();
    }
}
exports.selectListView = selectListView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW0tc2VsZWN0LXZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnLXBhcmFtcy9wYXJhbS1zZWxlY3Qtdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFtRDtBQVc1QyxLQUFLLHlCQUE0QixFQUN0QyxLQUFLLEVBQ0wsT0FBTyxFQUNQLFlBQVksRUFDWixhQUFhLEVBQ2IsVUFBVSxHQUNXO0lBQ3JCLE1BQU0sY0FBYyxHQUFHLENBQUMsSUFBTyxFQUFFLEVBQUU7UUFDakMsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2QyxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3pDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQTtRQUNsQyxJQUFJLFFBQVEsQ0FBQTtRQUNaLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDakIsR0FBRyxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDbEMsUUFBUSxHQUFHLFVBQVUsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzFFLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLEdBQUcsQ0FBQyxTQUFTLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQTtZQUN6QixRQUFRLEdBQUcsVUFBVSxJQUFJLElBQUksS0FBSyxVQUFVLENBQUE7UUFDOUMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBRXhDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxHQUFHLENBQUMsaUJBQWlCLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDcEUsR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFBO1FBQ2pELENBQUM7UUFDRCxFQUFFLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ25CLE1BQU0sQ0FBQyxFQUFFLENBQUE7SUFDWCxDQUFDLENBQUE7SUFDRCxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBTyxFQUFFLEVBQUU7UUFDbkMsRUFBRSxDQUFDLENBQUMsT0FBTyxhQUFhLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQTtRQUNqQyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDekIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM1QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQTtRQUNsQixDQUFDO0lBQ0gsQ0FBQyxDQUFBO0lBQ0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzVDLElBQUksS0FBMkMsQ0FBQTtJQUMvQyxJQUFJLENBQUM7UUFDSCxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBZ0IsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNsRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGNBQWMsQ0FBQztnQkFDaEMsS0FBSyxFQUFFLE9BQU87Z0JBQ2QsV0FBVyxFQUFFLE9BQU87Z0JBQ3BCLGNBQWMsRUFBRSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUM7Z0JBQzlDLGNBQWM7Z0JBQ2QsZ0JBQWdCO2dCQUNoQixrQkFBa0IsRUFBRSxHQUFHLEVBQUU7b0JBQ3ZCLE9BQU8sRUFBRSxDQUFBO2dCQUNYLENBQUM7Z0JBQ0QsbUJBQW1CLEVBQUUsQ0FBQyxJQUFPLEVBQUUsRUFBRTtvQkFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUNmLENBQUM7YUFDRixDQUFDLENBQUE7WUFDRixNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUE7WUFDM0MsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO2dCQUNuQyxJQUFJLEVBQUUsTUFBTTtnQkFDWixPQUFPLEVBQUUsSUFBSTthQUNkLENBQUMsQ0FBQTtZQUNGLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNoQixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7WUFBUyxDQUFDO1FBQ1QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVCLENBQUM7QUFDSCxDQUFDO0FBL0RELHdDQStEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTZWxlY3RMaXN0VmlldyA9IHJlcXVpcmUoJ2F0b20tc2VsZWN0LWxpc3QnKVxuaW1wb3J0IHsgUGFuZWwgfSBmcm9tICdhdG9tJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElTZWxlY3RMaXN0UGFyYW1zPFQ+IHtcbiAgaXRlbXM6IFRbXSB8IFByb21pc2U8VFtdPlxuICBoZWFkaW5nPzogc3RyaW5nXG4gIGl0ZW1UZW1wbGF0ZT86IChpdGVtOiBUKSA9PiBzdHJpbmdcbiAgaXRlbUZpbHRlcktleT86IHN0cmluZyB8ICgoaXRlbTogVCkgPT4gc3RyaW5nKVxuICBhY3RpdmVJdGVtPzogVFxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VsZWN0TGlzdFZpZXc8VD4oe1xuICBpdGVtcyxcbiAgaGVhZGluZyxcbiAgaXRlbVRlbXBsYXRlLFxuICBpdGVtRmlsdGVyS2V5LFxuICBhY3RpdmVJdGVtLFxufTogSVNlbGVjdExpc3RQYXJhbXM8VD4pOiBQcm9taXNlPFQgfCB1bmRlZmluZWQ+IHtcbiAgY29uc3QgZWxlbWVudEZvckl0ZW0gPSAoaXRlbTogVCkgPT4ge1xuICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKVxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgZGl2LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJ1xuICAgIGxldCBpc0FjdGl2ZVxuICAgIGlmIChpdGVtVGVtcGxhdGUpIHtcbiAgICAgIGRpdi5pbm5lckhUTUwgPSBpdGVtVGVtcGxhdGUoaXRlbSlcbiAgICAgIGlzQWN0aXZlID0gYWN0aXZlSXRlbSAmJiBpdGVtVGVtcGxhdGUoaXRlbSkgPT09IGl0ZW1UZW1wbGF0ZShhY3RpdmVJdGVtKVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXYuaW5uZXJUZXh0ID0gYCR7aXRlbX1gXG4gICAgICBpc0FjdGl2ZSA9IGFjdGl2ZUl0ZW0gJiYgaXRlbSA9PT0gYWN0aXZlSXRlbVxuICAgIH1cbiAgICBpZiAoaXNBY3RpdmUpIGxpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgLy8gaGFjayBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICBpZiAoZGl2LmZpcnN0RWxlbWVudENoaWxkICYmIGRpdi5maXJzdEVsZW1lbnRDaGlsZC50YWdOYW1lID09PSAnTEknKSB7XG4gICAgICBkaXYuaW5uZXJIVE1MID0gZGl2LmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTFxuICAgIH1cbiAgICBsaS5hcHBlbmRDaGlsZChkaXYpXG4gICAgcmV0dXJuIGxpXG4gIH1cbiAgY29uc3QgZmlsdGVyS2V5Rm9ySXRlbSA9IChpdGVtOiBUKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpdGVtRmlsdGVyS2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGAke2l0ZW1baXRlbUZpbHRlcktleV19YFxuICAgIH0gZWxzZSBpZiAoaXRlbUZpbHRlcktleSkge1xuICAgICAgcmV0dXJuIGl0ZW1GaWx0ZXJLZXkoaXRlbSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGAke2l0ZW19YFxuICAgIH1cbiAgfVxuICBjb25zdCBteWl0ZW1zID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKGl0ZW1zKVxuICBsZXQgcGFuZWw6IFBhbmVsPFNlbGVjdExpc3RWaWV3PFQ+PiB8IHVuZGVmaW5lZFxuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTxUIHwgdW5kZWZpbmVkPigocmVzb2x2ZSkgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0ID0gbmV3IFNlbGVjdExpc3RWaWV3KHtcbiAgICAgICAgaXRlbXM6IG15aXRlbXMsXG4gICAgICAgIGluZm9NZXNzYWdlOiBoZWFkaW5nLFxuICAgICAgICBpdGVtc0NsYXNzTGlzdDogWydpZGUtaGFza2VsbCcsICdtYXJrLWFjdGl2ZSddLFxuICAgICAgICBlbGVtZW50Rm9ySXRlbSxcbiAgICAgICAgZmlsdGVyS2V5Rm9ySXRlbSxcbiAgICAgICAgZGlkQ2FuY2VsU2VsZWN0aW9uOiAoKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgIH0sXG4gICAgICAgIGRpZENvbmZpcm1TZWxlY3Rpb246IChpdGVtOiBUKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShpdGVtKVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIHNlbGVjdC5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lkZS1oYXNrZWxsJylcbiAgICAgIHBhbmVsID0gYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbCh7XG4gICAgICAgIGl0ZW06IHNlbGVjdCxcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgIH0pXG4gICAgICBzZWxlY3QuZm9jdXMoKVxuICAgIH0pXG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHBhbmVsKSBwYW5lbC5kZXN0cm95KClcbiAgfVxufVxuIl19