"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SelectListView = require("atom-select-list");
async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem }) {
    const elementForItem = (item) => {
        const li = document.createElement('li');
        const div = document.createElement('div');
        div.style.display = 'inline-block';
        let isActive;
        if (itemTemplate) {
            div.innerHTML = itemTemplate(item);
            isActive = activeItem && itemTemplate(item) === itemTemplate(activeItem);
        }
        else {
            div.innerText = `${item}`;
            isActive = activeItem && item === activeItem;
        }
        if (isActive)
            li.classList.add('active');
        if (div.firstElementChild && div.firstElementChild.tagName === 'LI') {
            div.innerHTML = div.firstElementChild.innerHTML;
        }
        li.appendChild(div);
        return li;
    };
    const filterKeyForItem = (item) => {
        if (typeof itemFilterKey === 'string') {
            return `${item[itemFilterKey]}`;
        }
        else if (itemFilterKey) {
            return itemFilterKey(item);
        }
        else {
            return `${item}`;
        }
    };
    const myitems = await Promise.resolve(items);
    let panel;
    let res;
    try {
        res = await new Promise((resolve) => {
            const select = new SelectListView({
                items: myitems,
                infoMessage: heading,
                itemsClassList: ['ide-haskell', 'mark-active'],
                elementForItem,
                filterKeyForItem,
                didCancelSelection: () => {
                    resolve();
                },
                didConfirmSelection: (item) => {
                    resolve(item);
                },
            });
            select.element.classList.add('ide-haskell');
            panel = atom.workspace.addModalPanel({
                item: select,
                visible: true,
            });
            select.focus();
        });
    }
    finally {
        panel && panel.destroy();
    }
    return res;
}
exports.selectListView = selectListView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW0tc2VsZWN0LXZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnLXBhcmFtcy9wYXJhbS1zZWxlY3Qtdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFtRDtBQVc1QyxLQUFLLHlCQUNWLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBd0I7SUFFakYsTUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFPLEVBQUUsRUFBRTtRQUNqQyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3ZDLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDekMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFBO1FBQ2xDLElBQUksUUFBUSxDQUFBO1FBQ1osRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNqQixHQUFHLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNsQyxRQUFRLEdBQUcsVUFBVSxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDMUUsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFBO1lBQ3pCLFFBQVEsR0FBRyxVQUFVLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQTtRQUM5QyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDO1lBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFeEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGlCQUFpQixJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwRSxHQUFHLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUE7UUFDakQsQ0FBQztRQUNELEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDbkIsTUFBTSxDQUFDLEVBQUUsQ0FBQTtJQUNYLENBQUMsQ0FBQTtJQUNELE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxJQUFPLEVBQUUsRUFBRTtRQUNuQyxFQUFFLENBQUMsQ0FBQyxPQUFPLGFBQWEsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFBO1FBQ2pDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzVCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFBO1FBQ2xCLENBQUM7SUFDSCxDQUFDLENBQUE7SUFDRCxNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUMsSUFBSSxLQUEyQyxDQUFBO0lBQy9DLElBQUksR0FBa0IsQ0FBQTtJQUN0QixJQUFJLENBQUM7UUFDSCxHQUFHLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBZ0IsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNqRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGNBQWMsQ0FBQztnQkFDaEMsS0FBSyxFQUFFLE9BQU87Z0JBQ2QsV0FBVyxFQUFFLE9BQU87Z0JBQ3BCLGNBQWMsRUFBRSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUM7Z0JBQzlDLGNBQWM7Z0JBQ2QsZ0JBQWdCO2dCQUNoQixrQkFBa0IsRUFBRSxHQUFHLEVBQUU7b0JBQ3ZCLE9BQU8sRUFBRSxDQUFBO2dCQUNYLENBQUM7Z0JBQ0QsbUJBQW1CLEVBQUUsQ0FBQyxJQUFPLEVBQUUsRUFBRTtvQkFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUNmLENBQUM7YUFDRixDQUFDLENBQUE7WUFDRixNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUE7WUFDM0MsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO2dCQUNuQyxJQUFJLEVBQUUsTUFBTTtnQkFDWixPQUFPLEVBQUUsSUFBSTthQUNkLENBQUMsQ0FBQTtZQUNGLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNoQixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7WUFBUyxDQUFDO1FBQ1QsS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUMxQixDQUFDO0lBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQTtBQUNaLENBQUM7QUE3REQsd0NBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlbGVjdExpc3RWaWV3ID0gcmVxdWlyZSgnYXRvbS1zZWxlY3QtbGlzdCcpXG5pbXBvcnQgeyBQYW5lbCB9IGZyb20gJ2F0b20nXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNlbGVjdExpc3RQYXJhbXM8VD4ge1xuICBpdGVtczogVFtdIHwgUHJvbWlzZTxUW10+XG4gIGhlYWRpbmc/OiBzdHJpbmdcbiAgaXRlbVRlbXBsYXRlPzogKGl0ZW06IFQpID0+IHN0cmluZ1xuICBpdGVtRmlsdGVyS2V5Pzogc3RyaW5nIHwgKChpdGVtOiBUKSA9PiBzdHJpbmcpXG4gIGFjdGl2ZUl0ZW0/OiBUXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWxlY3RMaXN0VmlldzxUPihcbiAgeyBpdGVtcywgaGVhZGluZywgaXRlbVRlbXBsYXRlLCBpdGVtRmlsdGVyS2V5LCBhY3RpdmVJdGVtIH06IElTZWxlY3RMaXN0UGFyYW1zPFQ+LFxuKTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XG4gIGNvbnN0IGVsZW1lbnRGb3JJdGVtID0gKGl0ZW06IFQpID0+IHtcbiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJylcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGRpdi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jaydcbiAgICBsZXQgaXNBY3RpdmVcbiAgICBpZiAoaXRlbVRlbXBsYXRlKSB7XG4gICAgICBkaXYuaW5uZXJIVE1MID0gaXRlbVRlbXBsYXRlKGl0ZW0pXG4gICAgICBpc0FjdGl2ZSA9IGFjdGl2ZUl0ZW0gJiYgaXRlbVRlbXBsYXRlKGl0ZW0pID09PSBpdGVtVGVtcGxhdGUoYWN0aXZlSXRlbSlcbiAgICB9IGVsc2Uge1xuICAgICAgZGl2LmlubmVyVGV4dCA9IGAke2l0ZW19YFxuICAgICAgaXNBY3RpdmUgPSBhY3RpdmVJdGVtICYmIGl0ZW0gPT09IGFjdGl2ZUl0ZW1cbiAgICB9XG4gICAgaWYgKGlzQWN0aXZlKSBsaS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxuICAgIC8vIGhhY2sgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgaWYgKGRpdi5maXJzdEVsZW1lbnRDaGlsZCAmJiBkaXYuZmlyc3RFbGVtZW50Q2hpbGQudGFnTmFtZSA9PT0gJ0xJJykge1xuICAgICAgZGl2LmlubmVySFRNTCA9IGRpdi5maXJzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUxcbiAgICB9XG4gICAgbGkuYXBwZW5kQ2hpbGQoZGl2KVxuICAgIHJldHVybiBsaVxuICB9XG4gIGNvbnN0IGZpbHRlcktleUZvckl0ZW0gPSAoaXRlbTogVCkgPT4ge1xuICAgIGlmICh0eXBlb2YgaXRlbUZpbHRlcktleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBgJHtpdGVtW2l0ZW1GaWx0ZXJLZXldfWBcbiAgICB9IGVsc2UgaWYgKGl0ZW1GaWx0ZXJLZXkpIHtcbiAgICAgIHJldHVybiBpdGVtRmlsdGVyS2V5KGl0ZW0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgJHtpdGVtfWBcbiAgICB9XG4gIH1cbiAgY29uc3QgbXlpdGVtcyA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShpdGVtcylcbiAgbGV0IHBhbmVsOiBQYW5lbDxTZWxlY3RMaXN0VmlldzxUPj4gfCB1bmRlZmluZWRcbiAgbGV0IHJlczogVCB8IHVuZGVmaW5lZFxuICB0cnkge1xuICAgIHJlcyA9IGF3YWl0IG5ldyBQcm9taXNlPFQgfCB1bmRlZmluZWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3QgPSBuZXcgU2VsZWN0TGlzdFZpZXcoe1xuICAgICAgICBpdGVtczogbXlpdGVtcyxcbiAgICAgICAgaW5mb01lc3NhZ2U6IGhlYWRpbmcsXG4gICAgICAgIGl0ZW1zQ2xhc3NMaXN0OiBbJ2lkZS1oYXNrZWxsJywgJ21hcmstYWN0aXZlJ10sXG4gICAgICAgIGVsZW1lbnRGb3JJdGVtLFxuICAgICAgICBmaWx0ZXJLZXlGb3JJdGVtLFxuICAgICAgICBkaWRDYW5jZWxTZWxlY3Rpb246ICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgfSxcbiAgICAgICAgZGlkQ29uZmlybVNlbGVjdGlvbjogKGl0ZW06IFQpID0+IHtcbiAgICAgICAgICByZXNvbHZlKGl0ZW0pXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgc2VsZWN0LmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaWRlLWhhc2tlbGwnKVxuICAgICAgcGFuZWwgPSBhdG9tLndvcmtzcGFjZS5hZGRNb2RhbFBhbmVsKHtcbiAgICAgICAgaXRlbTogc2VsZWN0LFxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIHNlbGVjdC5mb2N1cygpXG4gICAgfSlcbiAgfSBmaW5hbGx5IHtcbiAgICBwYW5lbCAmJiBwYW5lbC5kZXN0cm95KClcbiAgfVxuICByZXR1cm4gcmVzXG59XG4iXX0=