"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const param_select_view_1 = require("./param-select-view");
const atom_1 = require("atom");
class ConfigParamStore {
    constructor(state = {}) {
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.saved = state;
        this.plugins = new Map();
    }
    serialize() {
        return this.saved;
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(pluginName, paramName, callback) {
        return this.emitter.on('did-update', (val) => {
            if (val.pluginName === pluginName && val.paramName === paramName) {
                callback(val);
            }
        });
    }
    addParamSpec(pluginName, paramName, spec) {
        let pluginConfig = this.plugins.get(pluginName);
        if (!pluginConfig) {
            pluginConfig = new Map();
            this.plugins.set(pluginName, pluginConfig);
        }
        if (pluginConfig.has(paramName)) {
            throw new Error(`Parameter ${pluginName}.${paramName} already defined!`);
        }
        let value = this.saved[`${pluginName}.${paramName}`];
        if (value === undefined) {
            value = spec.default;
        }
        pluginConfig.set(paramName, { spec, value });
        this.emitter.emit('did-update', { pluginName, paramName, value });
        return new atom_1.Disposable(() => {
            if (pluginConfig) {
                pluginConfig.delete(paramName);
                if (pluginConfig.size === 0) {
                    this.plugins.delete(pluginName);
                }
            }
        });
    }
    async setValue(pluginName, paramName, value) {
        const paramConfig = await this.getParamConfig(pluginName, paramName, 'set');
        if (paramConfig === undefined)
            return undefined;
        if (value === undefined) {
            value = await this.showSelect(paramConfig);
        }
        if (value !== undefined) {
            paramConfig.value = value;
            this.saved[`${pluginName}.${paramName}`] = value;
            this.emitter.emit('did-update', { pluginName, paramName, value });
        }
        return value;
    }
    async getValue(pluginName, paramName) {
        const paramConfig = await this.getParamConfig(pluginName, paramName, 'get');
        if (paramConfig === undefined)
            return undefined;
        if (paramConfig.value === undefined) {
            await this.setValue(pluginName, paramName);
        }
        return paramConfig.value;
    }
    async getValueRaw(pluginName, paramName) {
        const paramConfig = await this.getParamConfig(pluginName, paramName, 'get raw');
        if (paramConfig === undefined)
            return undefined;
        return paramConfig.value;
    }
    async getParamConfig(pluginName, paramName, reason) {
        if (!atom.packages.isPackageLoaded(pluginName)) {
            console.error(new Error(`No ${pluginName} package while trying to ${reason} ${pluginName}.${paramName}`));
            return undefined;
        }
        if (!atom.packages.isPackageActive(pluginName)) {
            await atom.packages.activatePackage(pluginName);
        }
        const pluginConfig = this.plugins.get(pluginName);
        if (!pluginConfig) {
            throw new Error(`${pluginName} is not defined while trying to ${reason} ${pluginName}.${paramName}`);
        }
        const paramConfig = pluginConfig.get(paramName);
        if (!paramConfig) {
            throw new Error(`${paramName} is not defined while trying to ${reason} ${pluginName}.${paramName}`);
        }
        return paramConfig;
    }
    async showSelect(param) {
        const spec = param.spec;
        return param_select_view_1.selectListView({
            items: (typeof spec.items === 'function') ? spec.items() : spec.items,
            heading: spec.description,
            itemTemplate: spec.itemTemplate.bind(spec),
            itemFilterKey: spec.itemFilterKey,
            activeItem: param.value,
        });
    }
}
exports.ConfigParamStore = ConfigParamStore;
//# sourceMappingURL=data:application/json;base64,