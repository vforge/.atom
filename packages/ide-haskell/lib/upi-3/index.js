"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const atom_1 = require("atom");
const utils_1 = require("../utils");
tslib_1.__exportStar(require("./instance"), exports);
function consume(pluginManager, options) {
    const { name, menu, messageTypes, events, controls, params, tooltip, } = options;
    const disp = new atom_1.CompositeDisposable();
    if (menu) {
        const menuDisp = atom.menu.add([
            {
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: menu.label, submenu: menu.menu }],
            },
        ]);
        disp.add(menuDisp);
    }
    if (messageTypes) {
        for (const type of Object.keys(messageTypes)) {
            const opts = messageTypes[type];
            pluginManager.outputPanel.createTab(type, opts);
        }
    }
    if (events) {
        if (events.onWillSaveBuffer) {
            disp.add(registerEvent(name, pluginManager, events.onWillSaveBuffer, pluginManager.onWillSaveBuffer));
        }
        if (events.onDidSaveBuffer) {
            disp.add(registerEvent(name, pluginManager, events.onDidSaveBuffer, pluginManager.onDidSaveBuffer));
        }
        if (events.onDidStopChanging) {
            disp.add(registerEvent(name, pluginManager, events.onDidStopChanging, pluginManager.onDidStopChanging));
        }
    }
    if (tooltip) {
        let handler;
        let priority;
        let eventTypes;
        if (typeof tooltip === 'function') {
            handler = tooltip;
        }
        else {
            ;
            ({ handler, priority, eventTypes } = tooltip);
        }
        if (priority === undefined) {
            priority = 100;
        }
        disp.add(pluginManager.tooltipRegistry.register(name, {
            priority,
            handler,
            eventTypes,
        }));
    }
    if (controls) {
        for (const i of controls) {
            disp.add(pluginManager.outputPanel.addPanelControl(i));
        }
    }
    if (params) {
        for (const paramName of Object.keys(params)) {
            const spec = params[paramName];
            disp.add(pluginManager.configParamManager.add(name, paramName, spec));
        }
    }
    return disp;
}
exports.consume = consume;
function registerEvent(name, manager, cb, reg) {
    function wrapStatus(cb) {
        return async function (buffer) {
            try {
                manager.backendStatus(name, { status: 'progress', detail: '' });
                await cb(buffer);
                manager.backendStatus(name, { status: 'ready', detail: '' });
            }
            catch (e) {
                manager.backendStatus(name, { status: 'warning', detail: `${e}` });
                console.warn(e);
            }
        };
    }
    if (Array.isArray(cb)) {
        const disp = new atom_1.CompositeDisposable();
        for (const i of cb) {
            disp.add(reg(wrapStatus(i)));
        }
        return disp;
    }
    else {
        return reg(wrapStatus(cb));
    }
}
//# sourceMappingURL=data:application/json;base64,