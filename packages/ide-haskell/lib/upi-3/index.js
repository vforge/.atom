"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const atom_1 = require("atom");
const utils_1 = require("../utils");
tslib_1.__exportStar(require("./instance"), exports);
function consume(pluginManager, options) {
    const { name, menu, messageTypes, events, controls, params, tooltip } = options;
    const disp = new atom_1.CompositeDisposable();
    if (menu) {
        const menuDisp = atom.menu.add([{
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: menu.label, submenu: menu.menu }],
            }]);
        disp.add(menuDisp);
    }
    if (messageTypes) {
        for (const type of Object.keys(messageTypes)) {
            const opts = messageTypes[type];
            pluginManager.outputPanel.createTab(type, opts);
        }
    }
    if (events) {
        if (events.onWillSaveBuffer) {
            disp.add(registerEvent(events.onWillSaveBuffer, pluginManager.onWillSaveBuffer));
        }
        if (events.onDidSaveBuffer) {
            disp.add(registerEvent(events.onDidSaveBuffer, pluginManager.onDidSaveBuffer));
        }
        if (events.onDidStopChanging) {
            disp.add(registerEvent(events.onDidStopChanging, pluginManager.onDidStopChanging));
        }
    }
    if (tooltip) {
        let handler;
        let priority;
        let eventTypes;
        if (typeof tooltip === 'function') {
            handler = tooltip;
        }
        else {
            ({ handler, priority, eventTypes } = tooltip);
        }
        if (!priority) {
            priority = 100;
        }
        disp.add(pluginManager.tooltipRegistry.register(name, { priority, handler, eventTypes }));
    }
    if (controls) {
        for (const i of controls) {
            disp.add(pluginManager.outputPanel.addPanelControl(i));
        }
    }
    if (params) {
        for (const paramName of Object.keys(params)) {
            const spec = params[paramName];
            disp.add(pluginManager.configParamManager.add(name, paramName, spec));
        }
    }
    return disp;
}
exports.consume = consume;
function registerEvent(cb, reg) {
    if (Array.isArray(cb)) {
        const disp = new atom_1.CompositeDisposable();
        for (const i of cb) {
            disp.add(reg(i));
        }
        return disp;
    }
    else {
        return reg(cb);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQXNEO0FBR3RELG9DQUEwQztBQUkxQyxxREFBMEI7QUFFMUIsaUJBQXdCLGFBQTRCLEVBQUUsT0FBaUM7SUFDckYsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQTtJQUMvRSxNQUFNLElBQUksR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFFdEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNULE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzlCLEtBQUssRUFBRSx1QkFBZTtnQkFDdEIsT0FBTyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3JELENBQUMsQ0FBQyxDQUFBO1FBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNwQixDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUVqQixHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7WUFFL0IsYUFBYSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ2pELENBQUM7SUFDSCxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNY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O1FBQ04sTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNoQixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xuXG5pbXBvcnQgeyBQbHVnaW5NYW5hZ2VyIH0gZnJvbSAnLi4vcGx1Z2luLW1hbmFnZXInXG5pbXBvcnQgeyBNQUlOX01FTlVfTEFCRUwgfSBmcm9tICcuLi91dGlscydcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuaW1wb3J0IFRFdmVudFJhbmdlVHlwZSA9IFVQSS5URXZlbnRSYW5nZVR5cGVcblxuZXhwb3J0ICogZnJvbSAnLi9pbnN0YW5jZSdcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWUocGx1Z2luTWFuYWdlcjogUGx1Z2luTWFuYWdlciwgb3B0aW9uczogVVBJLklSZWdpc3RyYXRpb25PcHRpb25zKTogRGlzcG9zYWJsZSB7XG4gIGNvbnN0IHsgbmFtZSwgbWVudSwgbWVzc2FnZVR5cGVzLCBldmVudHMsIGNvbnRyb2xzLCBwYXJhbXMsIHRvb2x0aXAgfSA9IG9wdGlvbnNcbiAgY29uc3QgZGlzcCA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcblxuICBpZiAobWVudSkge1xuICAgIGNvbnN0IG1lbnVEaXNwID0gYXRvbS5tZW51LmFkZChbe1xuICAgICAgbGFiZWw6IE1BSU5fTUVOVV9MQUJFTCxcbiAgICAgIHN1Ym1lbnU6IFt7IGxhYmVsOiBtZW51LmxhYmVsLCBzdWJtZW51OiBtZW51Lm1lbnUgfV0sXG4gICAgfV0pXG4gICAgZGlzcC5hZGQobWVudURpc3ApXG4gIH1cbiAgaWYgKG1lc3NhZ2VUeXBlcykge1xuICAgIC8vIFRPRE86IG1ha2UgZGlzcG9zYWJsZVxuICAgIGZvciAoY29uc3QgdHlwZSBvZiBPYmplY3Qua2V5cyhtZXNzYWdlVHlwZXMpKSB7XG4gICAgICBjb25zdCBvcHRzID0gbWVzc2FnZVR5cGVzW3R5cGVdXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgIHBsdWdpbk1hbmFnZXIub3V0cHV0UGFuZWwuY3JlYXRlVGFiKHR5cGUsIG9wdHMpXG4gICAgfVxuICB9XG4gIGlmIChldmVudHMpIHtcbiAgICBpZiAoZXZlbnRzLm9uV2lsbFNhdmVCdWZmZXIpIHtcbiAgICAgIGRpc3AuYWRkKHJlZ2lzdGVyRXZlbnQoZXZlbnRzLm9uV2lsbFNhdmVCdWZmZXIsIHBsdWdpbk1hbmFnZXIub25XaWxsU2F2ZUJ1ZmZlcikpXG4gICAgfVxuICAgIGlmIChldmVudHMub25EaWRTYXZlQnVmZmVyKSB7XG4gICAgICBkaXNwLmFkZChyZWdpc3RlckV2ZW50KGV2ZW50cy5vbkRpZFNhdmVCdWZmZXIsIHBsdWdpbk1hbmFnZXIub25EaWRTYXZlQnVmZmVyKSlcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5vbkRpZFN0b3BDaGFuZ2luZykge1xuICAgICAgZGlzcC5hZGQocmVnaXN0ZXJFdmVudChldmVudHMub25EaWRTdG9wQ2hhbmdpbmcsIHBsdWdpbk1hbmFnZXIub25EaWRTdG9wQ2hhbmdpbmcpKVxuICAgIH1cbiAgfVxuICBpZiAodG9vbHRpcCkge1xuICAgIGxldCBoYW5kbGVyOiBVUEkuVFRvb2x0aXBIYW5kbGVyXG4gICAgbGV0IHByaW9yaXR5OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgICBsZXQgZXZlbnRUeXBlczogVEV2ZW50UmFuZ2VUeXBlW10gfCB1bmRlZmluZWRcbiAgICBpZiAodHlwZW9mIHRvb2x0aXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGhhbmRsZXIgPSB0b29sdGlwXG4gICAgfSBlbHNlIHtcbiAgICAgICh7IGhhbmRsZXIsIHByaW9yaXR5LCBldmVudFR5cGVzIH0gPSB0b29sdGlwKVxuICAgIH1cbiAgICBpZiAoIXByaW9yaXR5KSB7IHByaW9yaXR5ID0gMTAwIH1cbiAgICBkaXNwLmFkZChwbHVnaW5NYW5hZ2VyLnRvb2x0aXBSZWdpc3RyeS5yZWdpc3RlcihuYW1lLCB7IHByaW9yaXR5LCBoYW5kbGVyLCBldmVudFR5cGVzIH0pKVxuICB9XG4gIGlmIChjb250cm9scykge1xuICAgIGZvciAoY29uc3QgaSBvZiBjb250cm9scykge1xuICAgICAgZGlzcC5hZGQocGx1Z2luTWFuYWdlci5vdXRwdXRQYW5lbC5hZGRQYW5lbENvbnRyb2woaSkpXG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMpIHtcbiAgICBmb3IgKGNvbnN0IHBhcmFtTmFtZSBvZiBPYmplY3Qua2V5cyhwYXJhbXMpKSB7XG4gICAgICBjb25zdCBzcGVjID0gcGFyYW1zW3BhcmFtTmFtZV1cbiAgICAgIGRpc3AuYWRkKFxuICAgICAgICBwbHVnaW5NYW5hZ2VyLmNvbmZpZ1BhcmFtTWFuYWdlci5hZGQobmFtZSwgcGFyYW1OYW1lLCBzcGVjKSxcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGlzcFxufVxuXG5mdW5jdGlvbiByZWdpc3RlckV2ZW50KFxuICBjYjogVVBJLlRTaW5nbGVPckFycmF5PFVQSS5UVGV4dEJ1ZmZlckNhbGxiYWNrPixcbiAgcmVnOiAoY2I6IFVQSS5UVGV4dEJ1ZmZlckNhbGxiYWNrKSA9PiBEaXNwb3NhYmxlLFxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNiKSkge1xuICAgIGNvbnN0IGRpc3AgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgZm9yIChjb25zdCBpIG9mIGNiKSB7XG4gICAgICBkaXNwLmFkZChyZWcoaSkpXG4gICAgfVxuICAgIHJldHVybiBkaXNwXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlZyhjYilcbiAgfVxufVxuIl19