"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const atom_1 = require("atom");
const utils_1 = require("../utils");
tslib_1.__exportStar(require("./instance"), exports);
function consume(pluginManager, options) {
    const { name, menu, messageTypes, events, controls, params, tooltip, } = options;
    const disp = new atom_1.CompositeDisposable();
    if (menu) {
        const menuDisp = atom.menu.add([
            {
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: menu.label, submenu: menu.menu }],
            },
        ]);
        disp.add(menuDisp);
    }
    if (messageTypes) {
        for (const type of Object.keys(messageTypes)) {
            const opts = messageTypes[type];
            pluginManager.outputPanel.createTab(type, opts);
        }
    }
    if (events) {
        if (events.onWillSaveBuffer) {
            disp.add(registerEvent(events.onWillSaveBuffer, pluginManager.onWillSaveBuffer));
        }
        if (events.onDidSaveBuffer) {
            disp.add(registerEvent(events.onDidSaveBuffer, pluginManager.onDidSaveBuffer));
        }
        if (events.onDidStopChanging) {
            disp.add(registerEvent(events.onDidStopChanging, pluginManager.onDidStopChanging));
        }
    }
    if (tooltip) {
        let handler;
        let priority;
        let eventTypes;
        if (typeof tooltip === 'function') {
            handler = tooltip;
        }
        else {
            ;
            ({ handler, priority, eventTypes } = tooltip);
        }
        if (priority === undefined) {
            priority = 100;
        }
        disp.add(pluginManager.tooltipRegistry.register(name, {
            priority,
            handler,
            eventTypes,
        }));
    }
    if (controls) {
        for (const i of controls) {
            disp.add(pluginManager.outputPanel.addPanelControl(i));
        }
    }
    if (params) {
        for (const paramName of Object.keys(params)) {
            const spec = params[paramName];
            disp.add(pluginManager.configParamManager.add(name, paramName, spec));
        }
    }
    return disp;
}
exports.consume = consume;
function registerEvent(cb, reg) {
    if (Array.isArray(cb)) {
        const disp = new atom_1.CompositeDisposable();
        for (const i of cb) {
            disp.add(reg(i));
        }
        return disp;
    }
    else {
        return reg(cb);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQXNEO0FBR3RELG9DQUEwQztBQUkxQyxxREFBMEI7QUFFMUIsaUJBQ0UsYUFBNEIsRUFDNUIsT0FBaUM7SUFFakMsTUFBTSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osWUFBWSxFQUNaLE1BQU0sRUFDTixRQUFRLEVBQ1IsTUFBTSxFQUNOLE9BQU8sR0FDUixHQUFHLE9BQU8sQ0FBQTtJQUNYLE1BQU0sSUFBSSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUV0QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDN0I7Z0JBQ0UsS0FBSyxFQUFFLHVCQUFlO2dCQUN0QixPQUFPLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDckQ7U0FDRixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3BCLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRWpCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUUvQixhQUFhLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDakQsQ0FBQztJQUNILENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ1gs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QyxJQUFJLENBQUMsQ0FBQztRQUNOLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDaEIsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBEaXNwb3NhYmxlIH0gZnJvbSAnYXRvbSdcblxuaW1wb3J0IHsgUGx1Z2luTWFuYWdlciB9IGZyb20gJy4uL3BsdWdpbi1tYW5hZ2VyJ1xuaW1wb3J0IHsgTUFJTl9NRU5VX0xBQkVMIH0gZnJvbSAnLi4vdXRpbHMnXG5pbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcbmltcG9ydCBURXZlbnRSYW5nZVR5cGUgPSBVUEkuVEV2ZW50UmFuZ2VUeXBlXG5cbmV4cG9ydCAqIGZyb20gJy4vaW5zdGFuY2UnXG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdW1lKFxuICBwbHVnaW5NYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyLFxuICBvcHRpb25zOiBVUEkuSVJlZ2lzdHJhdGlvbk9wdGlvbnMsXG4pOiBEaXNwb3NhYmxlIHtcbiAgY29uc3Qge1xuICAgIG5hbWUsXG4gICAgbWVudSxcbiAgICBtZXNzYWdlVHlwZXMsXG4gICAgZXZlbnRzLFxuICAgIGNvbnRyb2xzLFxuICAgIHBhcmFtcyxcbiAgICB0b29sdGlwLFxuICB9ID0gb3B0aW9uc1xuICBjb25zdCBkaXNwID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuXG4gIGlmIChtZW51KSB7XG4gICAgY29uc3QgbWVudURpc3AgPSBhdG9tLm1lbnUuYWRkKFtcbiAgICAgIHtcbiAgICAgICAgbGFiZWw6IE1BSU5fTUVOVV9MQUJFTCxcbiAgICAgICAgc3VibWVudTogW3sgbGFiZWw6IG1lbnUubGFiZWwsIHN1Ym1lbnU6IG1lbnUubWVudSB9XSxcbiAgICAgIH0sXG4gICAgXSlcbiAgICBkaXNwLmFkZChtZW51RGlzcClcbiAgfVxuICBpZiAobWVzc2FnZVR5cGVzKSB7XG4gICAgLy8gVE9ETzogbWFrZSBkaXNwb3NhYmxlXG4gICAgZm9yIChjb25zdCB0eXBlIG9mIE9iamVjdC5rZXlzKG1lc3NhZ2VUeXBlcykpIHtcbiAgICAgIGNvbnN0IG9wdHMgPSBtZXNzYWdlVHlwZXNbdHlwZV1cbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgcGx1Z2luTWFuYWdlci5vdXRwdXRQYW5lbC5jcmVhdGVUYWIodHlwZSwgb3B0cylcbiAgICB9XG4gIH1cbiAgaWYgKGV2ZW50cykge1xuICAgIGlmIChldmVudHMub25XaWxsU2F2ZUJ1ZmZlcikge1xuICAgICAgZGlzcC5hZGQoXG4gICAgICAgIHJlZ2lzdGVyRXZlbnQoZXZlbnRzLm9uV2lsbFNhdmVCdWZmZXIsIHBsdWdpbk1hbmFnZXIub25XaWxsU2F2ZUJ1ZmZlciksXG4gICAgICApXG4gICAgfVxuICAgIGlmIChldmVudHMub25EaWRTYXZlQnVmZmVyKSB7XG4gICAgICBkaXNwLmFkZChcbiAgICAgICAgcmVnaXN0ZXJFdmVudChldmVudHMub25EaWRTYXZlQnVmZmVyLCBwbHVnaW5NYW5hZ2VyLm9uRGlkU2F2ZUJ1ZmZlciksXG4gICAgICApXG4gICAgfVxuICAgIGlmIChldmVudHMub25EaWRTdG9wQ2hhbmdpbmcpIHtcbiAgICAgIGRpc3AuYWRkKFxuICAgICAgICByZWdpc3RlckV2ZW50KFxuICAgICAgICAgIGV2ZW50cy5vbkRpZFN0b3BDaGFuZ2luZyxcbiAgICAgICAgICBwbHVnaW5NYW5hZ2VyLm9uRGlkU3RvcENoYW5naW5nLFxuICAgICAgICApLFxuICAgICAgKVxuICAgIH1cbiAgfVxuICBpZiAodG9vbHRpcCkge1xuICAgIGxldCBoYW5kbGVyOiBVUEkuVFRvb2x0aXBIYW5kbGVyXG4gICAgbGV0IHByaW9yaXR5OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgICBsZXQgZXZlbnRUeXBlczogVEV2ZW50UmFuZ2VUeXBlW10gfCB1bmRlZmluZWRcbiAgICBpZiAodHlwZW9mIHRvb2x0aXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGhhbmRsZXIgPSB0b29sdGlwXG4gICAgfSBlbHNlIHtcbiAgICAgIDsoeyBoYW5kbGVyLCBwcmlvcml0eSwgZXZlbnRUeXBlcyB9ID0gdG9vbHRpcClcbiAgICB9XG4gICAgaWYgKHByaW9yaXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHByaW9yaXR5ID0gMTAwXG4gICAgfVxuICAgIGRpc3AuYWRkKFxuICAgICAgcGx1Z2luTWFuYWdlci50b29sdGlwUmVnaXN0cnkucmVnaXN0ZXIobmFtZSwge1xuICAgICAgICBwcmlvcml0eSxcbiAgICAgICAgaGFuZGxlcixcbiAgICAgICAgZXZlbnRUeXBlcyxcbiAgICAgIH0pLFxuICAgIClcbiAgfVxuICBpZiAoY29udHJvbHMpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgY29udHJvbHMpIHtcbiAgICAgIGRpc3AuYWRkKHBsdWdpbk1hbmFnZXIub3V0cHV0UGFuZWwuYWRkUGFuZWxDb250cm9sKGkpKVxuICAgIH1cbiAgfVxuICBpZiAocGFyYW1zKSB7XG4gICAgZm9yIChjb25zdCBwYXJhbU5hbWUgb2YgT2JqZWN0LmtleXMocGFyYW1zKSkge1xuICAgICAgY29uc3Qgc3BlYyA9IHBhcmFtc1twYXJhbU5hbWVdXG4gICAgICBkaXNwLmFkZChwbHVnaW5NYW5hZ2VyLmNvbmZpZ1BhcmFtTWFuYWdlci5hZGQobmFtZSwgcGFyYW1OYW1lLCBzcGVjKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGlzcFxufVxuXG5mdW5jdGlvbiByZWdpc3RlckV2ZW50KFxuICBjYjogVVBJLlRTaW5nbGVPckFycmF5PFVQSS5UVGV4dEJ1ZmZlckNhbGxiYWNrPixcbiAgcmVnOiAoY2I6IFVQSS5UVGV4dEJ1ZmZlckNhbGxiYWNrKSA9PiBEaXNwb3NhYmxlLFxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNiKSkge1xuICAgIGNvbnN0IGRpc3AgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgZm9yIChjb25zdCBpIG9mIGNiKSB7XG4gICAgICBkaXNwLmFkZChyZWcoaSkpXG4gICAgfVxuICAgIHJldHVybiBkaXNwXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlZyhjYilcbiAgfVxufVxuIl19