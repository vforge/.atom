"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const fs = require("fs");
const path = require("path");
function hasGetPath(dir) {
    return dir && dir.getPath && typeof dir.getPath === 'function';
}
function isTextBuffer(x) {
    return x && x.file;
}
function isDirectory(dir) {
    if (dir === null) {
        return false;
    }
    if (hasGetPath(dir)) {
        return isDirectory(dir.getPath());
    }
    else if (typeof dir === 'string') {
        try {
            return fs.statSync(dir).isDirectory();
        }
        catch (e) {
            return false;
        }
    }
    else {
        return false;
    }
}
exports.isDirectory = isDirectory;
function getRootDirFallback(file) {
    let dir = null;
    if (file) {
        ;
        [dir] = atom.project
            .getDirectories()
            .filter((d) => d.contains(file.getPath()));
    }
    if (!dir) {
        dir = atom.project.getDirectories()[0];
    }
    if (dir && dir.getPath() === 'atom://config') {
        dir = null;
    }
    if (!(dir && isDirectory(dir))) {
        if (file) {
            dir = file.getParent();
        }
        else {
            dir = new atom_1.Directory('.');
        }
    }
    return dir;
}
exports.getRootDirFallback = getRootDirFallback;
async function getDirEntries(dir) {
    return new Promise((resolve, reject) => dir.getEntries((error, contents) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(contents);
        }
    }));
}
exports.getDirEntries = getDirEntries;
async function dirHasCabalFile(d) {
    if (!d) {
        return false;
    }
    return (await getDirEntries(d)).some((file) => file.isFile() && file.getBaseName().endsWith('.cabal'));
}
async function dirHasSandboxFile(d) {
    if (!d) {
        return false;
    }
    return (await getDirEntries(d)).some((file) => file.isFile() && file.getBaseName() === 'cabal.sandbox.config');
}
async function findProjectRoot(d, check) {
    while (!(d.isRoot() || (await check(d)))) {
        d = d && d.getParent();
    }
    if (await check(d)) {
        return d;
    }
    else {
        return null;
    }
}
async function getRootDir(input) {
    let file;
    if (isTextBuffer(input)) {
        const p = input.getPath();
        if (p)
            file = new atom_1.File(p);
        else
            file = null;
    }
    else if (hasGetPath(input)) {
        file = input;
    }
    else if (typeof input === 'string') {
        file = new atom_1.File(input);
    }
    else {
        file = null;
    }
    let dir;
    if (file && isDirectory(file)) {
        dir = new atom_1.Directory(file.getPath());
    }
    else {
        dir = (file && file.getParent()) || getRootDirFallback(file);
    }
    const cabalRoot = await findProjectRoot(dir, dirHasCabalFile);
    const sandboxRoot = await findProjectRoot(dir, dirHasSandboxFile);
    dir = cabalRoot || sandboxRoot;
    if (!(dir && isDirectory(dir))) {
        dir = getRootDirFallback(file);
    }
    return dir;
}
exports.getRootDir = getRootDir;
const HS = require("../hs/hs.min.js");
async function parseDotCabal(cabalSource) {
    return new Promise((resolve) => {
        HS.parseDotCabal(cabalSource, resolve);
    });
}
exports.parseDotCabal = parseDotCabal;
async function getComponentFromFile(cabalSource, filePath) {
    const fp = process.platform === 'win32'
        ? filePath.replace(path.sep, path.posix.sep)
        : filePath;
    return new Promise((resolve) => {
        HS.getComponentFromFile(cabalSource, fp, resolve);
    });
}
exports.getComponentFromFile = getComponentFromFile;
async function unlit(filename, source) {
    return new Promise((resolve, reject) => {
        HS.unlit(filename, source, (error, result) => {
            if (error) {
                reject(new Error(error));
            }
            else if (result) {
                resolve(result);
            }
            else {
                reject(new Error('Unknown error when trying to run unlit'));
            }
        });
    });
}
exports.unlit = unlit;
function isErrorResult(x) {
    return x && x.error && typeof x.error === 'string';
}
async function parseHsModuleImports(source) {
    return new Promise((resolve, reject) => {
        HS.parseHsModuleImports(source, (result) => {
            if (isErrorResult(result)) {
                reject(new Error(result.error));
            }
            else {
                resolve(result);
            }
        });
    });
}
exports.parseHsModuleImports = parseHsModuleImports;
exports.hsEscapeString = HS.hsEscapeString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsK0JBQWtEO0FBQ2xELHlCQUF3QjtBQUN4Qiw2QkFBNEI7QUFFNUIsb0JBQW9CLEdBQVE7SUFDMUIsTUFBTSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLE9BQU8sR0FBRyxDQUFDLE9BQU8sS0FBSyxVQUFVLENBQUE7QUFDaEUsQ0FBQztBQUVELHNCQUFzQixDQUFNO0lBQzFCLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUNwQixDQUFDO0FBRUQscUJBQ0UsR0FBMkM7SUFFM0MsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDakIsTUFBTSxDQUFDLEtBQUssQ0FBQTtJQUNkLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQztZQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ3ZDLENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1gsTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUNkLENBQUM7SUFDSCxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsS0FBSyxDQUFBO0lBQ2QsQ0FBQztBQUNILENBQUM7QUFqQkQsa0NBaUJDO0FBRUQsNEJBQW1DLElBQTZCO0lBQzlELElBQUksR0FB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QUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUNqQyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ2pCLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQVZELG9EQVVDO0FBQ1ksMENBQWMsQ0FBTyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOiBuby1udWxsLWtleXdvcmRcbmltcG9ydCB7IERpcmVjdG9yeSwgRmlsZSwgVGV4dEJ1ZmZlciB9IGZyb20gJ2F0b20nXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcydcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCdcblxuZnVuY3Rpb24gaGFzR2V0UGF0aChkaXI6IGFueSk6IGRpciBpcyBEaXJlY3RvcnkgfCBGaWxlIHtcbiAgcmV0dXJuIGRpciAmJiBkaXIuZ2V0UGF0aCAmJiB0eXBlb2YgZGlyLmdldFBhdGggPT09ICdmdW5jdGlvbidcbn1cblxuZnVuY3Rpb24gaXNUZXh0QnVmZmVyKHg6IGFueSk6IHggaXMgVGV4dEJ1ZmZlciB7XG4gIHJldHVybiB4ICYmIHguZmlsZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEaXJlY3RvcnkoXG4gIGRpcjogRmlsZSB8IERpcmVjdG9yeSB8IHN0cmluZyB8IG51bGwgfCBhbnksXG4pOiBib29sZWFuIHtcbiAgaWYgKGRpciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmIChoYXNHZXRQYXRoKGRpcikpIHtcbiAgICByZXR1cm4gaXNEaXJlY3RvcnkoZGlyLmdldFBhdGgoKSlcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGlyID09PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnMuc3RhdFN5bmMoZGlyKS5pc0RpcmVjdG9yeSgpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSb290RGlyRmFsbGJhY2soZmlsZTogRmlsZSB8IERpcmVjdG9yeSB8IG51bGwpOiBEaXJlY3Rvcnkge1xuICBsZXQgZGlyOiBEaXJlY3RvcnkgfCBudWxsID0gbnVsbFxuICBpZiAoZmlsZSkge1xuICAgIDtbZGlyXSA9IGF0b20ucHJvamVjdFxuICAgICAgLmdldERpcmVjdG9yaWVzKClcbiAgICAgIC5maWx0ZXIoKGQpID0+IGQuY29udGFpbnMoZmlsZS5nZXRQYXRoKCkpKVxuICB9XG4gIGlmICghZGlyKSB7XG4gICAgZGlyID0gYXRvbS5wcm9qZWN0LmdldERpcmVjdG9yaWVzKClbMF1cbiAgfVxuICBpZiAoZGlyICYmIGRpci5nZXRQYXRoKCkgPT09ICdhdG9tOi8vY29uZmlnJykge1xuICAgIGRpciA9IG51bGxcbiAgfVxuICBpZiAoIShkaXIgJiYgaXNEaXJlY3RvcnkoZGlyKSkpIHtcbiAgICBpZiAoZmlsZSkge1xuICAgICAgZGlyID0gZmlsZS5nZXRQYXJlbnQoKVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXIgPSBuZXcgRGlyZWN0b3J5KCcuJylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRpclxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RGlyRW50cmllcyhcbiAgZGlyOiBEaXJlY3RvcnksXG4pOiBQcm9taXNlPEFycmF5PERpcmVjdG9yeSB8IEZpbGU+PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTxBcnJheTxEaXJlY3RvcnkgfCBGaWxlPj4oKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICBkaXIuZ2V0RW50cmllcygoZXJyb3IsIGNvbnRlbnRzKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShjb250ZW50cylcbiAgICAgIH1cbiAgICB9KSxcbiAgKVxufVxuXG5hc3luYyBmdW5jdGlvbiBkaXJIYXNDYWJhbEZpbGUoZDogRGlyZWN0b3J5KSB7XG4gIGlmICghZCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiAoYXdhaXQgZ2V0RGlyRW50cmllcyhkKSkuc29tZShcbiAgICAoZmlsZSkgPT4gZmlsZS5pc0ZpbGUoKSAmJiBmaWxlLmdldEJhc2VOYW1lKCkuZW5kc1dpdGgoJy5jYWJhbCcpLFxuICApXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRpckhhc1NhbmRib3hGaWxlKGQ6IERpcmVjdG9yeSkge1xuICBpZiAoIWQpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gKGF3YWl0IGdldERpckVudHJpZXMoZCkpLnNvbWUoXG4gICAgKGZpbGUpID0+IGZpbGUuaXNGaWxlKCkgJiYgZmlsZS5nZXRCYXNlTmFtZSgpID09PSAnY2FiYWwuc2FuZGJveC5jb25maWcnLFxuICApXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZpbmRQcm9qZWN0Um9vdChcbiAgZDogRGlyZWN0b3J5LFxuICBjaGVjazogKGQ6IERpcmVjdG9yeSkgPT4gUHJvbWlzZTxib29sZWFuPixcbikge1xuICB3aGlsZSAoIShkLmlzUm9vdCgpIHx8IChhd2FpdCBjaGVjayhkKSkpKSB7XG4gICAgZCA9IGQgJiYgZC5nZXRQYXJlbnQoKVxuICB9XG4gIGlmIChhd2FpdCBjaGVjayhkKSkge1xuICAgIHJldHVybiBkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Um9vdERpcihcbiAgaW5wdXQ6IFRleHRCdWZmZXIgfCBGaWxlIHwgc3RyaW5nIHwgbnVsbCxcbik6IFByb21pc2U8RGlyZWN0b3J5PiB7XG4gIGxldCBmaWxlOiBGaWxlIHwgRGlyZWN0b3J5IHwgbnVsbFxuICBpZiAoaXNUZXh0QnVmZmVyKGlucHV0KSkge1xuICAgIGNvbnN0IHAgPSBpbnB1dC5nZXRQYXRoKClcbiAgICBpZiAocCkgZmlsZSA9IG5ldyBGaWxlKHApXG4gICAgZWxzZSBmaWxlID0gbnVsbFxuICB9IGVsc2UgaWYgKGhhc0dldFBhdGgoaW5wdXQpKSB7XG4gICAgZmlsZSA9IGlucHV0XG4gIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgIGZpbGUgPSBuZXcgRmlsZShpbnB1dClcbiAgfSBlbHNlIHtcbiAgICBmaWxlID0gbnVsbFxuICB9XG4gIGxldCBkaXI6IERpcmVjdG9yeSB8IG51bGxcbiAgaWYgKGZpbGUgJiYgaXNEaXJlY3RvcnkoZmlsZSkpIHtcbiAgICBkaXIgPSBuZXcgRGlyZWN0b3J5KGZpbGUuZ2V0UGF0aCgpKVxuICB9IGVsc2Uge1xuICAgIGRpciA9IChmaWxlICYmIGZpbGUuZ2V0UGFyZW50KCkpIHx8IGdldFJvb3REaXJGYWxsYmFjayhmaWxlKVxuICB9XG4gIGNvbnN0IGNhYmFsUm9vdCA9IGF3YWl0IGZpbmRQcm9qZWN0Um9vdChkaXIsIGRpckhhc0NhYmFsRmlsZSlcbiAgY29uc3Qgc2FuZGJveFJvb3QgPSBhd2FpdCBmaW5kUHJvamVjdFJvb3QoZGlyLCBkaXJIYXNTYW5kYm94RmlsZSlcbiAgZGlyID0gY2FiYWxSb290IHx8IHNhbmRib3hSb290XG4gIGlmICghKGRpciAmJiBpc0RpcmVjdG9yeShkaXIpKSkge1xuICAgIGRpciA9IGdldFJvb3REaXJGYWxsYmFjayhmaWxlKVxuICB9XG4gIHJldHVybiBkaXJcbn1cblxuaW1wb3J0IEhTID0gcmVxdWlyZSgnLi4vaHMvaHMubWluLmpzJylcbmV4cG9ydCB7IElUYXJnZXQsIElEb3RDYWJhbCwgSUltcG9ydCwgSU1vZHVsZUltcG9ydHMgfSBmcm9tICcuLi9ocy9ocy5taW4uanMnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZURvdENhYmFsKGNhYmFsU291cmNlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPEhTLklEb3RDYWJhbCB8IG51bGw+KChyZXNvbHZlKSA9PiB7XG4gICAgSFMucGFyc2VEb3RDYWJhbChjYWJhbFNvdXJjZSwgcmVzb2x2ZSlcbiAgfSlcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb21wb25lbnRGcm9tRmlsZShcbiAgY2FiYWxTb3VyY2U6IHN0cmluZyxcbiAgZmlsZVBhdGg6IHN0cmluZyxcbikge1xuICBjb25zdCBmcCA9XG4gICAgcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJ1xuICAgICAgPyBmaWxlUGF0aC5yZXBsYWNlKHBhdGguc2VwLCBwYXRoLnBvc2l4LnNlcClcbiAgICAgIDogZmlsZVBhdGhcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZ1tdPigocmVzb2x2ZSkgPT4ge1xuICAgIEhTLmdldENvbXBvbmVudEZyb21GaWxlKGNhYmFsU291cmNlLCBmcCwgcmVzb2x2ZSlcbiAgfSlcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1bmxpdChmaWxlbmFtZTogc3RyaW5nLCBzb3VyY2U6IHN0cmluZykge1xuICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgSFMudW5saXQoZmlsZW5hbWUsIHNvdXJjZSwgKGVycm9yLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKGVycm9yKSlcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0KSB7XG4gICAgICAgIHJlc29sdmUocmVzdWx0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignVW5rbm93biBlcnJvciB3aGVuIHRyeWluZyB0byBydW4gdW5saXQnKSlcbiAgICAgIH1cbiAgICB9KVxuICB9KVxufVxuZnVuY3Rpb24gaXNFcnJvclJlc3VsdCh4OiBhbnkpOiB4IGlzIHsgZXJyb3I6IHN0cmluZyB9IHtcbiAgcmV0dXJuIHggJiYgeC5lcnJvciAmJiB0eXBlb2YgeC5lcnJvciA9PT0gJ3N0cmluZydcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZUhzTW9kdWxlSW1wb3J0cyhzb3VyY2U6IHN0cmluZykge1xuICByZXR1cm4gbmV3IFByb21pc2U8SFMuSU1vZHVsZUltcG9ydHM+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBIUy5wYXJzZUhzTW9kdWxlSW1wb3J0cyhzb3VyY2UsIChyZXN1bHQpID0+IHtcbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihyZXN1bHQuZXJyb3IpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpXG4gICAgICB9XG4gICAgfSlcbiAgfSlcbn1cbmV4cG9ydCBsZXQgeyBoc0VzY2FwZVN0cmluZyB9ID0gSFNcbiJdfQ==