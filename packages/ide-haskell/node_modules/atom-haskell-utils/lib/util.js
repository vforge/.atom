"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const fs = require("fs");
const path = require("path");
function hasGetPath(dir) {
    return dir && dir.getPath && typeof dir.getPath === 'function';
}
function isTextBuffer(x) {
    return x && x.file;
}
function isDirectory(dir) {
    if (dir === null) {
        return false;
    }
    if (hasGetPath(dir)) {
        return isDirectory(dir.getPath());
    }
    else if (typeof dir === 'string') {
        try {
            return fs.statSync(dir).isDirectory();
        }
        catch (e) {
            return false;
        }
    }
    else {
        return false;
    }
}
exports.isDirectory = isDirectory;
function getRootDirFallback(file) {
    let dir = null;
    if (file) {
        [dir] = atom.project.getDirectories().filter((d) => d.contains(file.getPath()));
    }
    if (!dir) {
        dir = atom.project.getDirectories()[0];
    }
    if (dir && dir.getPath() === 'atom://config') {
        dir = null;
    }
    if (!(dir && isDirectory(dir))) {
        if (file) {
            dir = file.getParent();
        }
        else {
            dir = new atom_1.Directory('.');
        }
    }
    return dir;
}
exports.getRootDirFallback = getRootDirFallback;
function getDirEntries(dir) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => dir.getEntries((error, contents) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(contents);
            }
        }));
    });
}
exports.getDirEntries = getDirEntries;
function getRootDir(input) {
    return __awaiter(this, void 0, void 0, function* () {
        function dirHasCabalFile(d) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!d) {
                    return false;
                }
                return (yield getDirEntries(d)).some((file) => file.isFile() && file.getBaseName().endsWith('.cabal'));
            });
        }
        function dirHasSandboxFile(d) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!d) {
                    return false;
                }
                return (yield getDirEntries(d)).some((file) => file.isFile() && file.getBaseName() === 'cabal.sandbox.config');
            });
        }
        function findProjectRoot(d, check) {
            return __awaiter(this, void 0, void 0, function* () {
                while (!(d && d.isRoot && d.isRoot() || !d || (yield check(d)))) {
                    d = d && d.getParent();
                }
                if (yield check(d)) {
                    return d;
                }
                else {
                    return null;
                }
            });
        }
        let file;
        if (isTextBuffer(input)) {
            file = new atom_1.File(input.getPath());
        }
        else if (hasGetPath(input)) {
            file = input;
        }
        else if (typeof input === 'string') {
            file = new atom_1.File(input);
        }
        else {
            file = null;
        }
        let dir;
        if (file && isDirectory(file)) {
            dir = new atom_1.Directory(file.getPath());
        }
        else {
            dir = file && file.getParent() || getRootDirFallback(file);
        }
        const cabalRoot = yield findProjectRoot(dir, dirHasCabalFile);
        const sandboxRoot = yield findProjectRoot(dir, dirHasSandboxFile);
        dir = cabalRoot || sandboxRoot;
        if (!(dir && isDirectory(dir))) {
            dir = getRootDirFallback(file);
        }
        return dir;
    });
}
exports.getRootDir = getRootDir;
const HS = require('../hs/hs.min.js');
function parseDotCabal(cabalSource) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => {
            HS.parseDotCabal(cabalSource, resolve);
        });
    });
}
exports.parseDotCabal = parseDotCabal;
function getComponentFromFile(cabalSource, filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const fp = process.platform === 'win32'
            ? filePath.replace(path.sep, path.posix.sep)
            : filePath;
        return new Promise((resolve) => {
            HS.getComponentFromFile(cabalSource, fp, resolve);
        });
    });
}
exports.getComponentFromFile = getComponentFromFile;
function unlit(filename, source) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            HS.unlit(filename, source, (error, result) => {
                if (error) {
                    reject(new Error(error));
                }
                else if (result) {
                    resolve(result);
                }
                else {
                    reject(new Error('Unknown error when trying to run unlit'));
                }
            });
        });
    });
}
exports.unlit = unlit;
function isErrorResult(x) {
    return x && x.error && typeof x.error === 'string';
}
function parseHsModuleImports(source) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            HS.parseHsModuleImports(source, (result) => {
                if (isErrorResult(result)) {
                    reject(new Error(result.error));
                }
                else {
                    resolve(result);
                }
            });
        });
    });
}
exports.parseHsModuleImports = parseHsModuleImports;
exports.hsEscapeString = HS.hsEscapeString;
//# sourceMappingURL=data:application/json;base64,