var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _autocompleteAdapter = require('../../lib/adapters/autocomplete-adapter');

var _autocompleteAdapter2 = _interopRequireDefault(_autocompleteAdapter);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _atom = require('atom');

var _chai = require('chai');

var _helpers = require('../helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('AutoCompleteAdapter', () => {
  beforeEach(() => {
    global.sinon = _sinon2.default.sandbox.create();
  });
  afterEach(() => {
    global.sinon.restore();
  });

  const request = {
    editor: (0, _helpers.createFakeEditor)(),
    bufferPosition: new _atom.Point(123, 456),
    prefix: 'def',
    scopeDescriptor: 'some.scope'
  };

  const completionItems = [{
    label: 'label1',
    kind: ls.CompletionItemKind.Keyword,
    detail: 'description1',
    documentation: 'a very exciting keyword',
    sortText: 'z'
  }, {
    label: 'label2',
    kind: ls.CompletionItemKind.Field,
    detail: 'description2',
    documentation: 'a very exciting field',
    sortText: 'a'
  }, {
    label: 'label3',
    kind: ls.CompletionItemKind.Variable,
    detail: 'description3',
    documentation: 'a very exciting variable'
  }];

  describe('getSuggestions', () => {
    const fakeLanguageClient = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)());
    _sinon2.default.stub(fakeLanguageClient, 'completion').resolves(completionItems);

    it('gets AutoComplete suggestions via LSP given an AutoCompleteRequest', async () => {
      const autoCompleteAdapter = new _autocompleteAdapter2.default();
      const results = await autoCompleteAdapter.getSuggestions(fakeLanguageClient, request);
      (0, _chai.expect)(results.length).equals(3);
      (0, _chai.expect)(results[0].text).equals('label2');
      (0, _chai.expect)(results[1].description).equals('a very exciting variable');
      (0, _chai.expect)(results[2].type).equals('keyword');
    });
  });

  describe('requestToTextDocumentPositionParams', () => {
    it('creates a TextDocumentPositionParams from an AutocompleteRequest', () => {
      const result = _autocompleteAdapter2.default.requestToTextDocumentPositionParams(request);
      (0, _chai.expect)(result.textDocument.uri).equals('file:///a/b/c/d.js');
      (0, _chai.expect)(result.position).deep.equals({ line: 123, character: 456 });
    });
  });

  describe('completionItemsToSuggestions', () => {
    it('converts LSP CompletionItem array to AutoComplete Suggestions array', () => {
      const results = _autocompleteAdapter2.default.completionItemsToSuggestions(completionItems, request);
      (0, _chai.expect)(results.length).equals(3);
      (0, _chai.expect)(results[0].text).equals('label2');
      (0, _chai.expect)(results[1].description).equals('a very exciting variable');
      (0, _chai.expect)(results[2].type).equals('keyword');
    });

    it('converts LSP CompletionList to AutoComplete Suggestions array', () => {
      const completionList = { items: completionItems, isIncomplete: false };
      const results = _autocompleteAdapter2.default.completionItemsToSuggestions(completionList, request);
      (0, _chai.expect)(results.length).equals(3);
      (0, _chai.expect)(results[0].description).equals('a very exciting field');
      (0, _chai.expect)(results[1].text).equals('label3');
    });

    it('converts empty array into an empty AutoComplete Suggestions array', () => {
      const results = _autocompleteAdapter2.default.completionItemsToSuggestions([], request);
      (0, _chai.expect)(results.length).equals(0);
    });
  });

  describe('completionItemToSuggestion', () => {
    it('converts LSP CompletionItem to AutoComplete Suggestion without textEdit', () => {
      const completionItem = {
        insertText: 'insert',
        label: 'label',
        filterText: 'filter',
        kind: ls.CompletionItemKind.Keyword,
        detail: 'keyword',
        documentation: 'a truly useful keyword'
      };
      const result = _autocompleteAdapter2.default.completionItemToSuggestion(completionItem, request);
      (0, _chai.expect)(result.text).equals('insert');
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('keyword');
      (0, _chai.expect)(result.rightLabel).equals('keyword');
      (0, _chai.expect)(result.description).equals('a truly useful keyword');
      (0, _chai.expect)(result.descriptionMarkdown).equals('a truly useful keyword');
    });

    it('converts LSP CompletionItem to AutoComplete Suggestion with textEdit', () => {
      const completionItem = {
        insertText: 'insert',
        label: 'label',
        filterText: 'filter',
        kind: ls.CompletionItemKind.Variable,
        detail: 'number',
        documentation: 'a truly useful variable',
        textEdit: {
          range: {
            start: { line: 10, character: 20 },
            end: { line: 30, character: 40 }
          },
          newText: 'newText'
        }
      };
      const autocompleteRequest = {
        editor: (0, _helpers.createFakeEditor)(),
        bufferPosition: new _atom.Point(123, 456),
        prefix: 'def',
        scopeDescriptor: 'some.scope'
      };
      _sinon2.default.stub(autocompleteRequest.editor, 'getTextInBufferRange').returns('replacementPrefix');
      const result = _autocompleteAdapter2.default.completionItemToSuggestion(completionItem, autocompleteRequest);
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('variable');
      (0, _chai.expect)(result.rightLabel).equals('number');
      (0, _chai.expect)(result.description).equals('a truly useful variable');
      (0, _chai.expect)(result.descriptionMarkdown).equals('a truly useful variable');
      (0, _chai.expect)(result.replacementPrefix).equals('replacementPrefix');
      (0, _chai.expect)(result.text).equals('newText');
      (0, _chai.expect)(autocompleteRequest.editor.getTextInBufferRange.calledOnce).equals(true);
      (0, _chai.expect)(autocompleteRequest.editor.getTextInBufferRange.getCall(0).args).deep.equals([new _atom.Range(new _atom.Point(10, 20), new _atom.Point(30, 40))]);
    });
  });

  describe('basicCompletionItemToSuggestion', () => {
    it('converts LSP CompletionItem with insertText and filterText to AutoComplete Suggestion', () => {
      const completionItem = {
        insertText: 'insert',
        label: 'label',
        filterText: 'filter',
        kind: ls.CompletionItemKind.Keyword,
        detail: 'detail',
        documentation: 'a very exciting keyword'
      };
      const result = _autocompleteAdapter2.default.basicCompletionItemToSuggestion(completionItem);
      (0, _chai.expect)(result.text).equals('insert');
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('keyword');
      (0, _chai.expect)(result.rightLabel).equals('detail');
      (0, _chai.expect)(result.description).equals('a very exciting keyword');
      (0, _chai.expect)(result.descriptionMarkdown).equals('a very exciting keyword');
    });

    it('converts LSP CompletionItem without insertText or filterText to AutoComplete Suggestion', () => {
      const completionItem = {
        label: 'label',
        kind: ls.CompletionItemKind.Keyword,
        detail: 'detail',
        documentation: 'A very useful keyword'
      };
      const result = _autocompleteAdapter2.default.basicCompletionItemToSuggestion(completionItem);
      (0, _chai.expect)(result.text).equals('label');
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('keyword');
      (0, _chai.expect)(result.rightLabel).equals('detail');
      (0, _chai.expect)(result.description).equals('A very useful keyword');
      (0, _chai.expect)(result.descriptionMarkdown).equals('A very useful keyword');
    });
  });

  describe('applyTextEditToSuggestion', () => {
    const basicCompletionItem = {
      label: 'label',
      kind: ls.CompletionItemKind.Keyword,
      detail: 'detail',
      documentation: 'An incredible keyword'
    };

    it('does not do anything if there is no textEdit', () => {
      const completionItem = _extends({}, basicCompletionItem);
      _autocompleteAdapter2.default.applyTextEditToSuggestion(null, new _atom.TextEditor(), completionItem);
      (0, _chai.expect)(completionItem).deep.equals(basicCompletionItem);
    });

    it('applies changes from TextEdit to replacementPrefix and text', () => {
      const textEdit = {
        range: {
          start: { line: 1, character: 2 },
          end: { line: 3, character: 4 }
        },
        newText: 'newText'
      };
      const editor = new _atom.TextEditor();
      _sinon2.default.stub(editor, 'getTextInBufferRange').returns('replacementPrefix');

      const completionItem = _extends({}, basicCompletionItem);
      _autocompleteAdapter2.default.applyTextEditToSuggestion(textEdit, editor, completionItem);
      (0, _chai.expect)(completionItem.replacementPrefix).equals('replacementPrefix');
      (0, _chai.expect)(completionItem.text).equals('newText');
      (0, _chai.expect)(editor.getTextInBufferRange.calledOnce).equals(true);
      (0, _chai.expect)(editor.getTextInBufferRange.getCall(0).args).deep.equals([new _atom.Range(new _atom.Point(1, 2), new _atom.Point(3, 4))]);
    });
  });

  describe('completionKindToSuggestionType', () => {
    it('converts LSP CompletionKinds to AutoComplete SuggestionTypes', () => {
      const variable = _autocompleteAdapter2.default.completionKindToSuggestionType(ls.CompletionItemKind.Variable);
      const constructor = _autocompleteAdapter2.default.completionKindToSuggestionType(ls.CompletionItemKind.Constructor);
      const module = _autocompleteAdapter2.default.completionKindToSuggestionType(ls.CompletionItemKind.Module);
      (0, _chai.expect)(variable).equals('variable');
      (0, _chai.expect)(constructor).equals('function');
      (0, _chai.expect)(module).equals('module');
    });

    it('defaults to "value"', () => {
      const result = _autocompleteAdapter2.default.completionKindToSuggestionType(null);
      (0, _chai.expect)(result).equals('value');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,