"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const outline_view_adapter_1 = require("../../lib/adapters/outline-view-adapter");
const ls = require("../../lib/languageclient");
const sinon = require("sinon");
const chai_1 = require("chai");
describe('OutlineViewAdapter', () => {
    const createLocation = (a, b, c, d) => ({
        uri: '',
        range: { start: { line: a, character: b }, end: { line: c, character: d } },
    });
    beforeEach(() => {
        global.sinon = sinon.sandbox.create();
    });
    afterEach(() => {
        global.sinon.restore();
    });
    describe('canAdapt', () => {
        it('returns true if documentSymbolProvider is supported', () => {
            const result = outline_view_adapter_1.default.canAdapt({ documentSymbolProvider: true });
            chai_1.expect(result).to.be.true;
        });
        it('returns false if documentSymbolProvider not supported', () => {
            const result = outline_view_adapter_1.default.canAdapt({});
            chai_1.expect(result).to.be.false;
        });
    });
    describe('createOutlineTrees', () => {
        it('creates an empty array given an empty array', () => {
            const result = outline_view_adapter_1.default.createOutlineTrees([]);
            chai_1.expect(result).to.deep.equal([]);
        });
        it('creates a single converted root item from a single source item', () => {
            const sourceItem = { kind: ls.SymbolKind.Namespace, name: 'R', location: createLocation(5, 6, 7, 8) };
            const expected = outline_view_adapter_1.default.symbolToOutline(sourceItem);
            const result = outline_view_adapter_1.default.createOutlineTrees([sourceItem]);
            chai_1.expect(result).to.deep.equal([expected]);
        });
        it('creates an empty root container with a single source item when containerName missing', () => {
            const sourceItem = {
                kind: ls.SymbolKind.Class,
                name: 'Program',
                location: createLocation(1, 2, 3, 4),
            };
            const expected = outline_view_adapter_1.default.symbolToOutline(sourceItem);
            sourceItem.containerName = 'missing';
            const result = outline_view_adapter_1.default.createOutlineTrees([sourceItem]);
            chai_1.expect(result.length).to.equal(1);
            chai_1.expect(result[0].representativeName).to.equal('missing');
            chai_1.expect(result[0].startPosition.row).to.equal(0);
            chai_1.expect(result[0].startPosition.column).to.equal(0);
            chai_1.expect(result[0].children).to.deep.equal([expected]);
        });
        // tslint:disable-next-line:max-line-length
        it('creates an empty root container with a single source item when containerName is missing and matches own name', () => {
            const sourceItem = {
                kind: ls.SymbolKind.Class,
                name: 'simple',
                location: createLocation(1, 2, 3, 4),
            };
            const expected = outline_view_adapter_1.default.symbolToOutline(sourceItem);
            sourceItem.containerName = 'simple';
            const result = outline_view_adapter_1.default.createOutlineTrees([sourceItem]);
            chai_1.expect(result.length).to.equal(1);
            chai_1.expect(result[0].representativeName).to.equal('simple');
            chai_1.expect(result[0].startPosition.row).to.equal(0);
            chai_1.expect(result[0].startPosition.column).to.equal(0);
            chai_1.expect(result[0].children).to.deep.equal([expected]);
        });
        it('creates a simple named hierarchy', () => {
            const sourceItems = [
                { kind: ls.SymbolKind.Namespace, name: 'java.com', location: createLocation(1, 0, 10, 0) },
                { kind: ls.SymbolKind.Class, name: 'Program', location: createLocation(2, 0, 7, 0), containerName: 'java.com' },
                { kind: ls.SymbolKind.Function, name: 'main', location: createLocation(4, 0, 5, 0), containerName: 'Program' },
            ];
            const result = outline_view_adapter_1.default.createOutlineTrees(sourceItems);
            chai_1.expect(result.length).to.equal(1);
            chai_1.expect(result[0].children.length).to.equal(1);
            chai_1.expect(result[0].children[0].representativeName).to.equal('Program');
            chai_1.expect(result[0].children[0].children.length).to.equal(1);
            chai_1.expect(result[0].children[0].children[0].representativeName).to.equal('main');
        });
        it('retains duplicate named items', () => {
            const sourceItems = [
                { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(1, 0, 5, 0) },
                { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(6, 0, 10, 0) },
                { kind: ls.SymbolKind.Function, name: 'main', location: createLocation(7, 0, 8, 0), containerName: 'duplicate' },
            ];
            const result = outline_view_adapter_1.default.createOutlineTrees(sourceItems);
            chai_1.expect(result.length).to.equal(2);
            chai_1.expect(result[0].representativeName).to.equal('duplicate');
            chai_1.expect(result[1].representativeName).to.equal('duplicate');
        });
        it('disambiguates containerName based on range', () => {
            const sourceItems = [
                { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(1, 0, 5, 0) },
                { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(6, 0, 10, 0) },
                { kind: ls.SymbolKind.Function, name: 'main', location: createLocation(7, 0, 8, 0), containerName: 'duplicate' },
            ];
            const result = outline_view_adapter_1.default.createOutlineTrees(sourceItems);
            chai_1.expect(result[1].children.length).to.equal(1);
            chai_1.expect(result[1].children[0].representativeName).to.equal('main');
        });
        it("does not become it's own parent", () => {
            const sourceItems = [
                { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(1, 0, 10, 0) },
                {
                    kind: ls.SymbolKind.Namespace,
                    name: 'duplicate',
                    location: createLocation(6, 0, 7, 0),
                    containerName: 'duplicate',
                },
            ];
            const result = outline_view_adapter_1.default.createOutlineTrees(sourceItems);
            chai_1.expect(result.length).to.equal(1);
            const outline = result[0];
            chai_1.expect(outline.endPosition).to.not.be.undefined;
            if (outline.endPosition) {
                chai_1.expect(outline.endPosition.row).to.equal(10);
                chai_1.expect(outline.children.length).to.equal(1);
                const outlineChild = outline.children[0];
                chai_1.expect(outlineChild.endPosition).to.not.be.undefined;
                if (outlineChild.endPosition) {
                    chai_1.expect(outlineChild.endPosition.row).to.equal(7);
                }
            }
        });
        it('parents to the innnermost named container', () => {
            const sourceItems = [
                { kind: ls.SymbolKind.Namespace, name: 'turtles', location: createLocation(1, 0, 10, 0) },
                {
                    kind: ls.SymbolKind.Namespace,
                    name: 'turtles',
                    location: createLocation(4, 0, 8, 0),
                    containerName: 'turtles',
                },
                { kind: ls.SymbolKind.Class, name: 'disc', location: createLocation(4, 0, 5, 0), containerName: 'turtles' },
            ];
            const result = outline_view_adapter_1.default.createOutlineTrees(sourceItems);
            chai_1.expect(result.length).to.equal(1);
            const outline = result[0];
            chai_1.expect(outline).to.not.be.undefined;
            if (outline) {
                chai_1.expect(outline.endPosition).to.not.be.undefined;
                if (outline.endPosition) {
                    chai_1.expect(outline.endPosition.row).to.equal(10);
                    chai_1.expect(outline.children.length).to.equal(1);
                    const outlineChild = outline.children[0];
                    chai_1.expect(outlineChild.endPosition).to.not.be.undefined;
                    if (outlineChild.endPosition) {
                        chai_1.expect(outlineChild.endPosition.row).to.equal(8);
                        chai_1.expect(outlineChild.children.length).to.equal(1);
                        const outlineGrandChild = outlineChild.children[0];
                        chai_1.expect(outlineGrandChild.endPosition).to.not.be.undefined;
                        if (outlineGrandChild.endPosition) {
                            chai_1.expect(outlineGrandChild.endPosition.row).to.equal(5);
                        }
                    }
                }
            }
        });
    });
    describe('symbolToOutline', () => {
        it('converts an individual item', () => {
            const sourceItem = { kind: ls.SymbolKind.Class, name: 'Program', location: createLocation(1, 2, 3, 4) };
            const result = outline_view_adapter_1.default.symbolToOutline(sourceItem);
            chai_1.expect(result.icon).to.equal('type-class');
            chai_1.expect(result.representativeName).to.equal('Program');
            chai_1.expect(result.children).to.deep.equal([]);
            chai_1.expect(result.tokenizedText).to.not.be.undefined;
            if (result.tokenizedText) {
                chai_1.expect(result.tokenizedText[0].kind).to.equal('type');
                chai_1.expect(result.tokenizedText[0].value).to.equal('Program');
                chai_1.expect(result.startPosition.row).to.equal(1);
                chai_1.expect(result.startPosition.column).to.equal(2);
                chai_1.expect(result.endPosition).to.not.be.undefined;
                if (result.endPosition) {
                    chai_1.expect(result.endPosition.row).to.equal(3);
                    chai_1.expect(result.endPosition.column).to.equal(4);
                }
            }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGluZS12aWV3LWFkYXB0ZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvb3V0bGluZS12aWV3LWFkYXB0ZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtGQUF5RTtBQUN6RSwrQ0FBK0M7QUFDL0MsK0JBQStCO0FBQy9CLCtCQUE4QjtBQUU5QixRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBTSxFQUFFLENBQU0sRUFBRSxDQUFNLEVBQUUsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFELEdBQUcsRUFBRSxFQUFFO1FBQ1AsS0FBSyxFQUFFLEVBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFDLEVBQUM7S0FDdEUsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQWMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNILFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDWixNQUFjLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFDeEIsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLEdBQUcsRUFBRTtZQUM3RCxNQUFNLE1BQU0sR0FBRyw4QkFBa0IsQ0FBQyxRQUFRLENBQUMsRUFBQyxzQkFBc0IsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1lBQzNFLGFBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFD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QUFDLElBQUksRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUM7Z0JBQ3hGLEVBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFDO2dCQUM3RyxFQUFDLElBQUksRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBQzthQUM3RyxDQUFDO1lBQ0YsTUFBTSxNQUFNLEdBQUcsOEJBQWtCLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbEUsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLGFBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUMsYUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3JFLGFBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxF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QUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPdXRsaW5lVmlld0FkYXB0ZXIgZnJvbSAnLi4vLi4vbGliL2FkYXB0ZXJzL291dGxpbmUtdmlldy1hZGFwdGVyJztcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4uLy4uL2xpYi9sYW5ndWFnZWNsaWVudCc7XG5pbXBvcnQgKiBhcyBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcblxuZGVzY3JpYmUoJ091dGxpbmVWaWV3QWRhcHRlcicsICgpID0+IHtcbiAgY29uc3QgY3JlYXRlTG9jYXRpb24gPSAoYTogYW55LCBiOiBhbnksIGM6IGFueSwgZDogYW55KSA9PiAoe1xuICAgIHVyaTogJycsXG4gICAgcmFuZ2U6IHtzdGFydDoge2xpbmU6IGEsIGNoYXJhY3RlcjogYn0sIGVuZDoge2xpbmU6IGMsIGNoYXJhY3RlcjogZH19LFxuICB9KTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAoZ2xvYmFsIGFzIGFueSkuc2lub24gPSBzaW5vbi5zYW5kYm94LmNyZWF0ZSgpO1xuICB9KTtcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAoZ2xvYmFsIGFzIGFueSkuc2lub24ucmVzdG9yZSgpO1xuICB9KTtcblxuICBkZXNjcmliZSgnY2FuQWRhcHQnLCAoKSA9PiB7XG4gICAgaXQoJ3JldHVybnMgdHJ1ZSBpZiBkb2N1bWVudFN5bWJvbFByb3ZpZGVyIGlzIHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IE91dGxpbmVWaWV3QWRhcHRlci5jYW5BZGFwdCh7ZG9jdW1lbnRTeW1ib2xQcm92aWRlcjogdHJ1ZX0pO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUudHJ1ZTtcbiAgICB9KTtcblxuICAgIGl0KCdyZXR1cm5zIGZhbHNlIGlmIGRvY3VtZW50U3ltYm9sUHJvdmlkZXIgbm90IHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IE91dGxpbmVWaWV3QWRhcHRlci5jYW5BZGFwdCh7fSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS5mYWxzZTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NyZWF0ZU91dGxpbmVUcmVlcycsICgpID0+IHtcbiAgICBpdCgnY3JlYXRlcyBhbiBlbXB0eSBhcnJheSBnaXZlbiBhbiBlbXB0eSBhcnJheScsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IE91dGxpbmVWaWV3QWRhcHRlci5jcmVhdGVPdXRsaW5lVHJlZXMoW10pO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uZGVlcC5lcXVhbChbXSk7XG4gICAgfSk7XG5cbiAgICBpdCgnY3JlYXRlcyBhIHNpbmdsZSBjb252ZXJ0ZWQgcm9vdCBpdGVtIGZyb20gYSBzaW5nbGUgc291cmNlIGl0ZW0nLCAoKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2VJdGVtID0ge2tpbmQ6IGxzLlN5bWJvbEtpbmQuTmFtZXNwYWNlLCBuYW1lOiAnUicsIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbig1LCA2LCA3LCA4KX07XG4gICAgICBjb25zdCBleHBlY3RlZCA9IE91dGxpbmVWaWV3QWRhcHRlci5zeW1ib2xUb091dGxpbmUoc291cmNlSXRlbSk7XG4gICAgICBjb25zdCByZXN1bHQgPSBPdXRsaW5lVmlld0FkYXB0ZXIuY3JlYXRlT3V0bGluZVRyZWVzKFtzb3VyY2VJdGVtXSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50by5kZWVwLmVxdWFsKFtleHBlY3RlZF0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2NyZWF0ZXMgYW4gZW1wdHkgcm9vdCBjb250YWluZXIgd2l0aCBhIHNpbmdsZSBzb3VyY2UgaXRlbSB3aGVuIGNvbnRhaW5lck5hbWUgbWlzc2luZycsICgpID0+IHtcbiAgICAgIGNvbnN0IHNvdXJjZUl0ZW06IGxzLlN5bWJvbEluZm9ybWF0aW9uID0ge1xuICAgICAgICBraW5kOiBscy5TeW1ib2xLaW5kLkNsYXNzLFxuICAgICAgICBuYW1lOiAnUHJvZ3JhbScsXG4gICAgICAgIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbigxLCAyLCAzLCA0KSxcbiAgICAgIH07XG4gICAgICBjb25zdCBleHBlY3RlZCA9IE91dGxpbmVWaWV3QWRhcHRlci5zeW1ib2xUb091dGxpbmUoc291cmNlSXRlbSk7XG4gICAgICBzb3VyY2VJdGVtLmNvbnRhaW5lck5hbWUgPSAnbWlzc2luZyc7XG4gICAgICBjb25zdCByZXN1bHQgPSBPdXRsaW5lVmlld0FkYXB0ZXIuY3JlYXRlT3V0bGluZVRyZWVzKFtzb3VyY2VJdGVtXSk7XG4gICAgICBleHBlY3QocmVzdWx0Lmxlbmd0aCkudG8uZXF1YWwoMSk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLnJlcHJlc2VudGF0aXZlTmFtZSkudG8uZXF1YWwoJ21pc3NpbmcnKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0uc3RhcnRQb3NpdGlvbi5yb3cpLnRvLmVxdWFsKDApO1xuICAgICAgZXhwZWN0KHJlc3VsdFswXS5zdGFydFBvc2l0aW9uLmNvbHVtbikudG8uZXF1YWwoMCk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLmNoaWxkcmVuKS50by5kZWVwLmVxdWFsKFtleHBlY3RlZF0pO1xuICAgIH0pO1xuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgIGl0KCdjcmVhdGVzIGFuIGVtcHR5IHJvb3QgY29udGFpbmVyIHdpdGggYSBzaW5nbGUgc291cmNlIGl0ZW0gd2hlbiBjb250YWluZXJOYW1lIGlzIG1pc3NpbmcgYW5kIG1hdGNoZXMgb3duIG5hbWUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2VJdGVtOiBscy5TeW1ib2xJbmZvcm1hdGlvbiA9IHtcbiAgICAgICAga2luZDogbHMuU3ltYm9sS2luZC5DbGFzcyxcbiAgICAgICAgbmFtZTogJ3NpbXBsZScsXG4gICAgICAgIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbigxLCAyLCAzLCA0KSxcbiAgICAgIH07XG4gICAgICBjb25zdCBleHBlY3RlZCA9IE91dGxpbmVWaWV3QWRhcHRlci5zeW1ib2xUb091dGxpbmUoc291cmNlSXRlbSk7XG4gICAgICBzb3VyY2VJdGVtLmNvbnRhaW5lck5hbWUgPSAnc2ltcGxlJztcbiAgICAgIGNvbnN0IHJlc3VsdCA9IE91dGxpbmVWaWV3QWRhcHRlci5jcmVhdGVPdXRsaW5lVHJlZXMoW3NvdXJjZUl0ZW1dKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubGVuZ3RoKS50by5lcXVhbCgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0ucmVwcmVzZW50YXRpdmVOYW1lKS50by5lcXVhbCgnc2ltcGxlJyk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLnN0YXJ0UG9zaXRpb24ucm93KS50by5lcXVhbCgwKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0uc3RhcnRQb3NpdGlvbi5jb2x1bW4pLnRvLmVxdWFsKDApO1xuICAgICAgZXhwZWN0KHJlc3VsdFswXS5jaGlsZHJlbikudG8uZGVlcC5lcXVhbChbZXhwZWN0ZWRdKTtcbiAgICB9KTtcblxuICAgIGl0KCdjcmVhdGVzIGEgc2ltcGxlIG5hbWVkIGhpZXJhcmNoeScsICgpID0+IHtcbiAgICAgIGNvbnN0IHNvdXJjZUl0ZW1zID0gW1xuICAgICAgICB7a2luZDogbHMuU3ltYm9sS2luZC5OYW1lc3BhY2UsIG5hbWU6ICdqYXZhLmNvbScsIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbigxLCAwLCAxMCwgMCl9LFxuICAgICAgICB7a2luZDogbHMuU3ltYm9sS2luZC5DbGFzcywgbmFtZTogJ1Byb2dyYW0nLCBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oMiwgMCwgNywgMCksIGNvbnRhaW5lck5hbWU6ICdqYXZhLmNvbSd9LFxuICAgICAgICB7a2luZDogbHMuU3ltYm9sS2luZC5GdW5jdGlvbiwgbmFtZTogJ21haW4nLCBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oNCwgMCwgNSwgMCksIGNvbnRhaW5lck5hbWU6ICdQcm9ncmFtJ30sXG4gICAgICBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gT3V0bGluZVZpZXdBZGFwdGVyLmNyZWF0ZU91dGxpbmVUcmVlcyhzb3VyY2VJdGVtcyk7XG4gICAgICBleHBlY3QocmVzdWx0Lmxlbmd0aCkudG8uZXF1YWwoMSk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLmNoaWxkcmVuWzBdLnJlcHJlc2VudGF0aXZlTmFtZSkudG8uZXF1YWwoJ1Byb2dyYW0nKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0uY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0ucmVwcmVzZW50YXRpdmVOYW1lKS50by5lcXVhbCgnbWFpbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JldGFpbnMgZHVwbGljYXRlIG5hbWVkIGl0ZW1zJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlSXRlbXMgPSBbXG4gICAgICAgIHtraW5kOiBscy5TeW1ib2xLaW5kLk5hbWVzcGFjZSwgbmFtZTogJ2R1cGxpY2F0ZScsIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbigxLCAwLCA1LCAwKX0sXG4gICAgICAgIHtraW5kOiBscy5TeW1ib2xLaW5kLk5hbWVzcGFjZSwgbmFtZTogJ2R1cGxpY2F0ZScsIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbig2LCAwLCAxMCwgMCl9LFxuICAgICAgICB7a2luZDogbHMuU3ltYm9sS2luZC5GdW5jdGlvbiwgbmFtZTogJ21haW4nLCBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oNywgMCwgOCwgMCksIGNvbnRhaW5lck5hbWU6ICdkdXBsaWNhdGUnfSxcbiAgICAgIF07XG4gICAgICBjb25zdCByZXN1bHQgPSBPdXRsaW5lVmlld0FkYXB0ZXIuY3JlYXRlT3V0bGluZVRyZWVzKHNvdXJjZUl0ZW1zKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubGVuZ3RoKS50by5lcXVhbCgyKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0ucmVwcmVzZW50YXRpdmVOYW1lKS50by5lcXVhbCgnZHVwbGljYXRlJyk7XG4gICAgICBleHBlY3QocmVzdWx0WzFdLnJlcHJlc2VudGF0aXZlTmFtZSkudG8uZXF1YWwoJ2R1cGxpY2F0ZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2Rpc2FtYmlndWF0ZXMgY29udGFpbmVyTmFtZSBiYXNlZCBvbiByYW5nZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHNvdXJjZUl0ZW1zID0gW1xuICAgICAgICB7a2luZDogbHMuU3ltYm9sS2luZC5OYW1lc3BhY2UsIG5hbWU6ICdkdXBsaWNhdGUnLCBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oMSwgMCwgNSwgMCl9LFxuICAgICAgICB7a2luZDogbHMuU3ltYm9sS2luZC5OYW1lc3BhY2UsIG5hbWU6ICdkdXBsaWNhdGUnLCBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oNiwgMCwgMTAsIDApfSxcbiAgICAgICAge2tpbmQ6IGxzLlN5bWJvbEtpbmQuRnVuY3Rpb24sIG5hbWU6ICdtYWluJywgbG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uKDcsIDAsIDgsIDApLCBjb250YWluZXJOYW1lOiAnZHVwbGljYXRlJ30sXG4gICAgICBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gT3V0bGluZVZpZXdBZGFwdGVyLmNyZWF0ZU91dGxpbmVUcmVlcyhzb3VyY2VJdGVtcyk7XG4gICAgICBleHBlY3QocmVzdWx0WzFdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSk7XG4gICAgICBleHBlY3QocmVzdWx0WzFdLmNoaWxkcmVuWzBdLnJlcHJlc2VudGF0aXZlTmFtZSkudG8uZXF1YWwoJ21haW4nKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZG9lcyBub3QgYmVjb21lIGl0J3Mgb3duIHBhcmVudFwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2VJdGVtcyA9IFtcbiAgICAgICAge2tpbmQ6IGxzLlN5bWJvbEtpbmQuTmFtZXNwYWNlLCBuYW1lOiAnZHVwbGljYXRlJywgbG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uKDEsIDAsIDEwLCAwKX0sXG4gICAgICAgIHtcbiAgICAgICAgICBraW5kOiBscy5TeW1ib2xLaW5kLk5hbWVzcGFjZSxcbiAgICAgICAgICBuYW1lOiAnZHVwbGljYXRlJyxcbiAgICAgICAgICBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oNiwgMCwgNywgMCksXG4gICAgICAgICAgY29udGFpbmVyTmFtZTogJ2R1cGxpY2F0ZScsXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBPdXRsaW5lVmlld0FkYXB0ZXIuY3JlYXRlT3V0bGluZVRyZWVzKHNvdXJjZUl0ZW1zKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubGVuZ3RoKS50by5lcXVhbCgxKTtcblxuICAgICAgY29uc3Qgb3V0bGluZSA9IHJlc3VsdFswXTtcbiAgICAgIGV4cGVjdChvdXRsaW5lLmVuZFBvc2l0aW9uKS50by5ub3QuYmUudW5kZWZpbmVkO1xuICAgICAgaWYgKG91dGxpbmUuZW5kUG9zaXRpb24pIHtcbiAgICAgICAgZXhwZWN0KG91dGxpbmUuZW5kUG9zaXRpb24ucm93KS50by5lcXVhbCgxMCk7XG4gICAgICAgIGV4cGVjdChvdXRsaW5lLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSk7XG5cbiAgICAgICAgY29uc3Qgb3V0bGluZUNoaWxkID0gb3V0bGluZS5jaGlsZHJlblswXTtcbiAgICAgICAgZXhwZWN0KG91dGxpbmVDaGlsZC5lbmRQb3NpdGlvbikudG8ubm90LmJlLnVuZGVmaW5lZDtcbiAgICAgICAgaWYgKG91dGxpbmVDaGlsZC5lbmRQb3NpdGlvbikge1xuICAgICAgICAgIGV4cGVjdChvdXRsaW5lQ2hpbGQuZW5kUG9zaXRpb24ucm93KS50by5lcXVhbCg3KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3BhcmVudHMgdG8gdGhlIGlubm5lcm1vc3QgbmFtZWQgY29udGFpbmVyJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlSXRlbXMgPSBbXG4gICAgICAgIHtraW5kOiBscy5TeW1ib2xLaW5kLk5hbWVzcGFjZSwgbmFtZTogJ3R1cnRsZXMnLCBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oMSwgMCwgMTAsIDApfSxcbiAgICAgICAge1xuICAgICAgICAgIGtpbmQ6IGxzLlN5bWJvbEtpbmQuTmFtZXNwYWNlLFxuICAgICAgICAgIG5hbWU6ICd0dXJ0bGVzJyxcbiAgICAgICAgICBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oNCwgMCwgOCwgMCksXG4gICAgICAgICAgY29udGFpbmVyTmFtZTogJ3R1cnRsZXMnLFxuICAgICAgICB9LFxuICAgICAgICB7a2luZDogbHMuU3ltYm9sS2luZC5DbGFzcywgbmFtZTogJ2Rpc2MnLCBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oNCwgMCwgNSwgMCksIGNvbnRhaW5lck5hbWU6ICd0dXJ0bGVzJ30sXG4gICAgICBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gT3V0bGluZVZpZXdBZGFwdGVyLmNyZWF0ZU91dGxpbmVUcmVlcyhzb3VyY2VJdGVtcyk7XG4gICAgICBleHBlY3QocmVzdWx0Lmxlbmd0aCkudG8uZXF1YWwoMSk7XG5cbiAgICAgIGNvbnN0IG91dGxpbmUgPSByZXN1bHRbMF07XG4gICAgICBleHBlY3Qob3V0bGluZSkudG8ubm90LmJlLnVuZGVmaW5lZDtcbiAgICAgIGlmIChvdXRsaW5lKSB7XG4gICAgICAgIGV4cGVjdChvdXRsaW5lLmVuZFBvc2l0aW9uKS50by5ub3QuYmUudW5kZWZpbmVkO1xuICAgICAgICBpZiAob3V0bGluZS5lbmRQb3NpdGlvbikge1xuICAgICAgICAgIGV4cGVjdChvdXRsaW5lLmVuZFBvc2l0aW9uLnJvdykudG8uZXF1YWwoMTApO1xuICAgICAgICAgIGV4cGVjdChvdXRsaW5lLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSk7XG5cbiAgICAgICAgICBjb25zdCBvdXRsaW5lQ2hpbGQgPSBvdXRsaW5lLmNoaWxkcmVuWzBdO1xuICAgICAgICAgIGV4cGVjdChvdXRsaW5lQ2hpbGQuZW5kUG9zaXRpb24pLnRvLm5vdC5iZS51bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG91dGxpbmVDaGlsZC5lbmRQb3NpdGlvbikge1xuICAgICAgICAgICAgZXhwZWN0KG91dGxpbmVDaGlsZC5lbmRQb3NpdGlvbi5yb3cpLnRvLmVxdWFsKDgpO1xuICAgICAgICAgICAgZXhwZWN0KG91dGxpbmVDaGlsZC5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpO1xuXG4gICAgICAgICAgICBjb25zdCBvdXRsaW5lR3JhbmRDaGlsZCA9IG91dGxpbmVDaGlsZC5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIGV4cGVjdChvdXRsaW5lR3JhbmRDaGlsZC5lbmRQb3NpdGlvbikudG8ubm90LmJlLnVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChvdXRsaW5lR3JhbmRDaGlsZC5lbmRQb3NpdGlvbikge1xuICAgICAgICAgICAgICBleHBlY3Qob3V0bGluZUdyYW5kQ2hpbGQuZW5kUG9zaXRpb24ucm93KS50by5lcXVhbCg1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3N5bWJvbFRvT3V0bGluZScsICgpID0+IHtcbiAgICBpdCgnY29udmVydHMgYW4gaW5kaXZpZHVhbCBpdGVtJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlSXRlbSA9IHtraW5kOiBscy5TeW1ib2xLaW5kLkNsYXNzLCBuYW1lOiAnUHJvZ3JhbScsIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbigxLCAyLCAzLCA0KX07XG4gICAgICBjb25zdCByZXN1bHQgPSBPdXRsaW5lVmlld0FkYXB0ZXIuc3ltYm9sVG9PdXRsaW5lKHNvdXJjZUl0ZW0pO1xuICAgICAgZXhwZWN0KHJlc3VsdC5pY29uKS50by5lcXVhbCgndHlwZS1jbGFzcycpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5yZXByZXNlbnRhdGl2ZU5hbWUpLnRvLmVxdWFsKCdQcm9ncmFtJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmNoaWxkcmVuKS50by5kZWVwLmVxdWFsKFtdKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudG9rZW5pemVkVGV4dCkudG8ubm90LmJlLnVuZGVmaW5lZDtcbiAgICAgIGlmIChyZXN1bHQudG9rZW5pemVkVGV4dCkge1xuICAgICAgICBleHBlY3QocmVzdWx0LnRva2VuaXplZFRleHRbMF0ua2luZCkudG8uZXF1YWwoJ3R5cGUnKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC50b2tlbml6ZWRUZXh0WzBdLnZhbHVlKS50by5lcXVhbCgnUHJvZ3JhbScpO1xuICAgICAgICBleHBlY3QocmVzdWx0LnN0YXJ0UG9zaXRpb24ucm93KS50by5lcXVhbCgxKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5zdGFydFBvc2l0aW9uLmNvbHVtbikudG8uZXF1YWwoMik7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZW5kUG9zaXRpb24pLnRvLm5vdC5iZS51bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQuZW5kUG9zaXRpb24pIHtcbiAgICAgICAgICBleHBlY3QocmVzdWx0LmVuZFBvc2l0aW9uLnJvdykudG8uZXF1YWwoMyk7XG4gICAgICAgICAgZXhwZWN0KHJlc3VsdC5lbmRQb3NpdGlvbi5jb2x1bW4pLnRvLmVxdWFsKDQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=