"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const jsonrpc = require("vscode-jsonrpc");
__export(require("vscode-languageserver-protocol"));
const events_1 = require("events");
const logger_1 = require("./logger");
// TypeScript wrapper around JSONRPC to implement Microsoft Language Server Protocol v3
// https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md
class LanguageClientConnection extends events_1.EventEmitter {
    constructor(rpc, logger) {
        super();
        this._rpc = rpc;
        this._log = logger || new logger_1.NullLogger();
        this.setupLogging();
        rpc.listen();
        this.isConnected = true;
        this._rpc.onClose(() => {
            this.isConnected = false;
            this._log.warn('rpc.onClose', 'The RPC connection closed unexpectedly');
            this.emit('close');
        });
    }
    setupLogging() {
        this._rpc.onError((error) => this._log.error(['rpc.onError', error]));
        this._rpc.onUnhandledNotification((notification) => {
            if (notification.method != null && notification.params != null) {
                this._log.warn(`rpc.onUnhandledNotification ${notification.method}`, notification.params);
            }
            else {
                this._log.warn('rpc.onUnhandledNotification', notification);
            }
        });
        this._rpc.onNotification((...args) => this._log.debug('rpc.onNotification', args));
    }
    dispose() {
        this._rpc.dispose();
    }
    // Public: Initialize the language server with necessary {InitializeParams}.
    //
    // * `params` The {InitializeParams} containing processId, rootPath, options and
    //            server capabilities.
    //
    // Returns a {Promise} containing the {InitializeResult} with details of the server's
    // capabilities.
    initialize(params) {
        return this._sendRequest('initialize', params);
    }
    // Public: Send an `initialized` notification to the language server.
    initialized() {
        this._sendNotification('initialized', {});
    }
    // Public: Send a `shutdown` request to the language server.
    shutdown() {
        return this._sendRequest('shutdown');
    }
    // Public: Send an `exit` notification to the language server.
    exit() {
        this._sendNotification('exit');
    }
    // Public: Register a callback for a custom message.
    //
    // * `method`   A string containing the name of the message to listen for.
    // * `callback` The function to be called when the message is received.
    //              The payload from the message is passed to the function.
    onCustom(method, callback) {
        this._onNotification({ method }, callback);
    }
    // Public: Register a callback for the `window/showMessage` message.
    //
    // * `callback` The function to be called when the `window/showMessage` message is
    //              received with {ShowMessageParams} being passed.
    onShowMessage(callback) {
        this._onNotification({ method: 'window/showMessage' }, callback);
    }
    // Public: Register a callback for the `window/showMessageRequest` message.
    //
    // * `callback` The function to be called when the `window/showMessageRequest` message is
    //              received with {ShowMessageRequestParam}' being passed.
    // Returns a {Promise} containing the {MessageActionItem}.
    onShowMessageRequest(callback) {
        this._onRequest({ method: 'window/showMessageRequest' }, callback);
    }
    // Public: Register a callback for the `window/logMessage` message.
    //
    // * `callback` The function to be called when the `window/logMessage` message is
    //              received with {LogMessageParams} being passed.
    onLogMessage(callback) {
        this._onNotification({ method: 'window/logMessage' }, callback);
    }
    // Public: Register a callback for the `telemetry/event` message.
    //
    // * `callback` The function to be called when the `telemetry/event` message is
    //              received with any parameters received being passed on.
    onTelemetryEvent(callback) {
        this._onNotification({ method: 'telemetry/event' }, callback);
    }
    // Public: Register a callback for the `workspace/applyEdit` message.
    //
    // * `callback` The function to be called when the `workspace/applyEdit` message is
    //              received with {ApplyWorkspaceEditParams} being passed.
    // Returns a {Promise} containing the {ApplyWorkspaceEditResponse}.
    onApplyEdit(callback) {
        this._onRequest({ method: 'workspace/applyEdit' }, callback);
    }
    // Public: Send a `workspace/didChangeConfiguration` notification.
    //
    // * `params` The {DidChangeConfigurationParams} containing the new configuration.
    didChangeConfiguration(params) {
        this._sendNotification('workspace/didChangeConfiguration', params);
    }
    // Public: Send a `textDocument/didOpen` notification.
    //
    // * `params` The {DidOpenTextDocumentParams} containing the opened text document details.
    didOpenTextDocument(params) {
        this._sendNotification('textDocument/didOpen', params);
    }
    // Public: Send a `textDocument/didChange` notification.
    //
    // * `params` The {DidChangeTextDocumentParams} containing the changed text document
    // details including the version number and actual text changes.
    didChangeTextDocument(params) {
        this._sendNotification('textDocument/didChange', params);
    }
    // Public: Send a `textDocument/didClose` notification.
    //
    // * `params` The {DidCloseTextDocumentParams} containing the opened text document details.
    didCloseTextDocument(params) {
        this._sendNotification('textDocument/didClose', params);
    }
    // Public: Send a `textDocument/willSave` notification.
    //
    // * `params` The {WillSaveTextDocumentParams} containing the to-be-saved text document
    // details and the reason for the save.
    willSaveTextDocument(params) {
        this._sendNotification('textDocument/willSave', params);
    }
    // Public: Send a `textDocument/didSave` notification.
    //
    // * `params` The {DidSaveTextDocumentParams} containing the saved text document details.
    didSaveTextDocument(params) {
        this._sendNotification('textDocument/didSave', params);
    }
    // Public: Send a `workspace/didChangeWatchedFiles` notification.
    //
    // * `params` The {DidChangeWatchedFilesParams} containing the array of {FileEvent}s that
    // have been observed upon the watched files.
    didChangeWatchedFiles(params) {
        this._sendNotification('workspace/didChangeWatchedFiles', params);
    }
    // Public: Register a callback for the `textDocument/publishDiagnostics` message.
    //
    // * `callback` The function to be called when the `textDocument/publishDiagnostics` message is
    //              received a {PublishDiagnosticsParams} containing new {Diagnostic} messages for a given uri.
    onPublishDiagnostics(callback) {
        this._onNotification({ method: 'textDocument/publishDiagnostics' }, callback);
    }
    // Public: Send a `textDocument/completion` request.
    //
    // * `params`            The {TextDocumentPositionParams} or {CompletionParams} for which
    //                       {CompletionItem}s are desired.
    // * `cancellationToken` The {CancellationToken} that is used to cancel this request if
    //                       necessary.
    // Returns a {Promise} containing either a {CompletionList} or an {Array} of {CompletionItem}s.
    completion(params, cancellationToken) {
        // Cancel prior request if necessary
        return this._sendRequest('textDocument/completion', params, cancellationToken);
    }
    // Public: Send a `completionItem/resolve` request.
    //
    // * `params` The {CompletionItem} for which a fully resolved {CompletionItem} is desired.
    // Returns a {Promise} containing a fully resolved {CompletionItem}.
    completionItemResolve(params) {
        return this._sendRequest('completionItem/resolve', params);
    }
    // Public: Send a `textDocument/hover` request.
    //
    // * `params` The {TextDocumentPositionParams} for which a {Hover} is desired.
    // Returns a {Promise} containing a {Hover}.
    hover(params) {
        return this._sendRequest('textDocument/hover', params);
    }
    // Public: Send a `textDocument/signatureHelp` request.
    //
    // * `params` The {TextDocumentPositionParams} for which a {SignatureHelp} is desired.
    // Returns a {Promise} containing a {SignatureHelp}.
    signatureHelp(params) {
        return this._sendRequest('textDocument/signatureHelp', params);
    }
    // Public: Send a `textDocument/definition` request.
    //
    // * `params` The {TextDocumentPositionParams} of a symbol for which one or more {Location}s
    // that define that symbol are required.
    // Returns a {Promise} containing either a single {Location} or an {Array} of many {Location}s.
    gotoDefinition(params) {
        return this._sendRequest('textDocument/definition', params);
    }
    // Public: Send a `textDocument/references` request.
    //
    // * `params` The {TextDocumentPositionParams} of a symbol for which all referring {Location}s
    // are desired.
    // Returns a {Promise} containing an {Array} of {Location}s that reference this symbol.
    findReferences(params) {
        return this._sendRequest('textDocument/references', params);
    }
    // Public: Send a `textDocument/documentHighlight` request.
    //
    // * `params` The {TextDocumentPositionParams} of a symbol for which all highlights are desired.
    // Returns a {Promise} containing an {Array} of {DocumentHighlight}s that can be used to
    // highlight this symbol.
    documentHighlight(params) {
        return this._sendRequest('textDocument/documentHighlight', params);
    }
    // Public: Send a `textDocument/documentSymbol` request.
    //
    // * `params`            The {DocumentSymbolParams} that identifies the document for which
    //                       symbols are desired.
    // * `cancellationToken` The {CancellationToken} that is used to cancel this request if
    //                       necessary.
    // Returns a {Promise} containing an {Array} of {SymbolInformation}s that can be used to
    // navigate this document.
    documentSymbol(params, cancellationToken) {
        return this._sendRequest('textDocument/documentSymbol', params);
    }
    // Public: Send a `workspace/symbol` request.
    //
    // * `params` The {WorkspaceSymbolParams} containing the query string to search the workspace for.
    // Returns a {Promise} containing an {Array} of {SymbolInformation}s that identify where the query
    // string occurs within the workspace.
    workspaceSymbol(params) {
        return this._sendRequest('workspace/symbol', params);
    }
    // Public: Send a `textDocument/codeAction` request.
    //
    // * `params` The {CodeActionParams} identifying the document, range and context for the code action.
    // Returns a {Promise} containing an {Array} of {Commands}s that can be performed against the given
    // documents range.
    codeAction(params) {
        return this._sendRequest('textDocument/codeAction', params);
    }
    // Public: Send a `textDocument/codeLens` request.
    //
    // * `params` The {CodeLensParams} identifying the document for which code lens commands are desired.
    // Returns a {Promise} containing an {Array} of {CodeLens}s that associate commands and data with
    // specified ranges within the document.
    codeLens(params) {
        return this._sendRequest('textDocument/codeLens', params);
    }
    // Public: Send a `codeLens/resolve` request.
    //
    // * `params` The {CodeLens} identifying the code lens to be resolved with full detail.
    // Returns a {Promise} containing the {CodeLens} fully resolved.
    codeLensResolve(params) {
        return this._sendRequest('codeLens/resolve', params);
    }
    // Public: Send a `textDocument/documentLink` request.
    //
    // * `params` The {DocumentLinkParams} identifying the document for which links should be identified.
    // Returns a {Promise} containing an {Array} of {DocumentLink}s relating uri's to specific ranges
    // within the document.
    documentLink(params) {
        return this._sendRequest('textDocument/documentLink', params);
    }
    // Public: Send a `documentLink/resolve` request.
    //
    // * `params` The {DocumentLink} identifying the document link to be resolved with full detail.
    // Returns a {Promise} containing the {DocumentLink} fully resolved.
    documentLinkResolve(params) {
        return this._sendRequest('documentLink/resolve', params);
    }
    // Public: Send a `textDocument/formatting` request.
    //
    // * `params` The {DocumentFormattingParams} identifying the document to be formatted as well as
    // additional formatting preferences.
    // Returns a {Promise} containing an {Array} of {TextEdit}s to be applied to the document to
    // correctly reformat it.
    documentFormatting(params) {
        return this._sendRequest('textDocument/formatting', params);
    }
    // Public: Send a `textDocument/rangeFormatting` request.
    //
    // * `params` The {DocumentRangeFormattingParams} identifying the document and range to be formatted
    // as well as additional formatting preferences.
    // Returns a {Promise} containing an {Array} of {TextEdit}s to be applied to the document to
    // correctly reformat it.
    documentRangeFormatting(params) {
        return this._sendRequest('textDocument/rangeFormatting', params);
    }
    // Public: Send a `textDocument/onTypeFormatting` request.
    //
    // * `params` The {DocumentOnTypeFormattingParams} identifying the document to be formatted,
    // the character that was typed and at what position as well as additional formatting preferences.
    // Returns a {Promise} containing an {Array} of {TextEdit}s to be applied to the document to
    // correctly reformat it.
    documentOnTypeFormatting(params) {
        return this._sendRequest('textDocument/onTypeFormatting', params);
    }
    // Public: Send a `textDocument/rename` request.
    //
    // * `params` The {RenameParams} identifying the document containing the symbol to be renamed,
    // as well as the position and new name.
    // Returns a {Promise} containing an {WorkspaceEdit} that contains a list of {TextEdit}s either
    // on the changes property (keyed by uri) or the documentChanges property containing
    // an {Array} of {TextDocumentEdit}s (preferred).
    rename(params) {
        return this._sendRequest('textDocument/rename', params);
    }
    // Public: Send a `workspace/executeCommand` request.
    //
    // * `params` The {ExecuteCommandParams} specifying the command and arguments
    // the language server should execute (these commands are usually from {CodeLens} or {CodeAction}
    // responses).
    // Returns a {Promise} containing anything.
    executeCommand(params) {
        return this._sendRequest('workspace/executeCommand', params);
    }
    _onRequest(type, callback) {
        this._rpc.onRequest(type.method, (value) => {
            this._log.debug(`rpc.onRequest ${type.method}`, value);
            return callback(value);
        });
    }
    _onNotification(type, callback) {
        this._rpc.onNotification(type.method, (value) => {
            this._log.debug(`rpc.onNotification ${type.method}`, value);
            callback(value);
        });
    }
    _sendNotification(method, args) {
        this._log.debug(`rpc.sendNotification ${method}`, args);
        this._rpc.sendNotification(method, args);
    }
    _sendRequest(method, args, cancellationToken) {
        return __awaiter(this, void 0, void 0, function* () {
            this._log.debug(`rpc.sendRequest ${method} sending`, args);
            try {
                const start = performance.now();
                let result;
                if (cancellationToken) {
                    result = yield this._rpc.sendRequest(method, args, cancellationToken);
                }
                else {
                    // If cancellationToken is null or undefined, don't add the third
                    // argument otherwise vscode-jsonrpc will send an additional, null
                    // message parameter to the request
                    result = yield this._rpc.sendRequest(method, args);
                }
                const took = performance.now() - start;
                this._log.debug(`rpc.sendRequest ${method} received (${Math.floor(took)}ms)`, result);
                return result;
            }
            catch (e) {
                const responseError = e;
                if (cancellationToken && responseError.code === jsonrpc.ErrorCodes.RequestCancelled) {
                    this._log.debug(`rpc.sendRequest ${method} was cancelled`);
                }
                else {
                    this._log.error(`rpc.sendRequest ${method} threw`, e);
                }
                throw e;
            }
        });
    }
}
exports.LanguageClientConnection = LanguageClientConnection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2VjbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbGFuZ3VhZ2VjbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLDBDQUEwQztBQUUxQyxvREFBK0M7QUFFL0MsbUNBQXNDO0FBQ3RDLHFDQUE4QztBQUU5Qyx1RkFBdUY7QUFDdkYsZ0ZBQWdGO0FBQ2hGLDhCQUFzQyxTQUFRLHFCQUFZO0lBS3hELFlBQVksR0FBOEIsRUFBRSxNQUFlO1FBQ3pELEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLElBQUksSUFBSSxtQkFBVSxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUViLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtZQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsd0NBQXdDLENBQUMsQ0FBQztZQUN4RSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLFlBQVk7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDakQsRUFBRSxD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SSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNyRCxDQUFDO2dCQUVELE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixNQUFNLGNBQWMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN0RixNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ2hCLENBQUM7WUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNYLE1BQU0sYUFBYSxHQUFHLENBQStCLENBQUM7Z0JBQ3RELEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixJQUFJLGFBQWEsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7b0JBQ3BGLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixNQUFNLGdCQUFnQixDQUFDLENBQUM7Z0JBQzdELENBQUM7Z0JBQ0QsSUFBSSxDQUFDLENBQUM7b0JBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLE1BQU0sUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN4RCxDQUFDO2dCQUVELE1BQU0sQ0FBQyxDQUFDO1lBQ1YsQ0FBQztRQUNILENBQUM7S0FBQTtDQUNGO0FBMVpELDREQTBaQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGpzb25ycGMgZnJvbSAndnNjb2RlLWpzb25ycGMnO1xuaW1wb3J0ICogYXMgbHNwIGZyb20gJ3ZzY29kZS1sYW5ndWFnZXNlcnZlci1wcm90b2NvbCc7XG5leHBvcnQgKiBmcm9tICd2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItcHJvdG9jb2wnO1xuXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgTnVsbExvZ2dlciwgTG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuXG4vLyBUeXBlU2NyaXB0IHdyYXBwZXIgYXJvdW5kIEpTT05SUEMgdG8gaW1wbGVtZW50IE1pY3Jvc29mdCBMYW5ndWFnZSBTZXJ2ZXIgUHJvdG9jb2wgdjNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL2Jsb2IvbWFzdGVyL3Byb3RvY29sLm1kXG5leHBvcnQgY2xhc3MgTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgcHJpdmF0ZSBfcnBjOiBqc29ucnBjLk1lc3NhZ2VDb25uZWN0aW9uO1xuICBwcml2YXRlIF9sb2c6IExvZ2dlcjtcbiAgcHVibGljIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHJwYzoganNvbnJwYy5NZXNzYWdlQ29ubmVjdGlvbiwgbG9nZ2VyPzogTG9nZ2VyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9ycGMgPSBycGM7XG4gICAgdGhpcy5fbG9nID0gbG9nZ2VyIHx8IG5ldyBOdWxsTG9nZ2VyKCk7XG4gICAgdGhpcy5zZXR1cExvZ2dpbmcoKTtcbiAgICBycGMubGlzdGVuKCk7XG5cbiAgICB0aGlzLmlzQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLl9ycGMub25DbG9zZSgoKSA9PiB7XG4gICAgICB0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9sb2cud2FybigncnBjLm9uQ2xvc2UnLCAnVGhlIFJQQyBjb25uZWN0aW9uIGNsb3NlZCB1bmV4cGVjdGVkbHknKTtcbiAgICAgIHRoaXMuZW1pdCgnY2xvc2UnKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0dXBMb2dnaW5nKCk6IHZvaWQge1xuICAgIHRoaXMuX3JwYy5vbkVycm9yKChlcnJvcikgPT4gdGhpcy5fbG9nLmVycm9yKFsncnBjLm9uRXJyb3InLCBlcnJvcl0pKTtcbiAgICB0aGlzLl9ycGMub25VbmhhbmRsZWROb3RpZmljYXRpb24oKG5vdGlmaWNhdGlvbikgPT4ge1xuICAgICAgaWYgKG5vdGlmaWNhdGlvbi5tZXRob2QgIT0gbnVsbCAmJiBub3RpZmljYXRpb24ucGFyYW1zICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fbG9nLndhcm4oYHJwYy5vblVuaGFuZGxlZE5vdGlmaWNhdGlvbiAke25vdGlmaWNhdGlvbi5tZXRob2R9YCwgbm90aWZpY2F0aW9uLnBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9sb2cud2FybigncnBjLm9uVW5oYW5kbGVkTm90aWZpY2F0aW9uJywgbm90aWZpY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLl9ycGMub25Ob3RpZmljYXRpb24oKC4uLmFyZ3M6IGFueVtdKSA9PiB0aGlzLl9sb2cuZGVidWcoJ3JwYy5vbk5vdGlmaWNhdGlvbicsIGFyZ3MpKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuX3JwYy5kaXNwb3NlKCk7XG4gIH1cblxuICAvLyBQdWJsaWM6IEluaXRpYWxpemUgdGhlIGxhbmd1YWdlIHNlcnZlciB3aXRoIG5lY2Vzc2FyeSB7SW5pdGlhbGl6ZVBhcmFtc30uXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtJbml0aWFsaXplUGFyYW1zfSBjb250YWluaW5nIHByb2Nlc3NJZCwgcm9vdFBhdGgsIG9wdGlvbnMgYW5kXG4gIC8vICAgICAgICAgICAgc2VydmVyIGNhcGFiaWxpdGllcy5cbiAgLy9cbiAgLy8gUmV0dXJucyBhIHtQcm9taXNlfSBjb250YWluaW5nIHRoZSB7SW5pdGlhbGl6ZVJlc3VsdH0gd2l0aCBkZXRhaWxzIG9mIHRoZSBzZXJ2ZXInc1xuICAvLyBjYXBhYmlsaXRpZXMuXG4gIHB1YmxpYyBpbml0aWFsaXplKHBhcmFtczogbHNwLkluaXRpYWxpemVQYXJhbXMpOiBQcm9taXNlPGxzcC5Jbml0aWFsaXplUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KCdpbml0aWFsaXplJywgcGFyYW1zKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogU2VuZCBhbiBgaW5pdGlhbGl6ZWRgIG5vdGlmaWNhdGlvbiB0byB0aGUgbGFuZ3VhZ2Ugc2VydmVyLlxuICBwdWJsaWMgaW5pdGlhbGl6ZWQoKTogdm9pZCB7XG4gICAgdGhpcy5fc2VuZE5vdGlmaWNhdGlvbignaW5pdGlhbGl6ZWQnLCB7fSk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFNlbmQgYSBgc2h1dGRvd25gIHJlcXVlc3QgdG8gdGhlIGxhbmd1YWdlIHNlcnZlci5cbiAgcHVibGljIHNodXRkb3duKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdCgnc2h1dGRvd24nKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogU2VuZCBhbiBgZXhpdGAgbm90aWZpY2F0aW9uIHRvIHRoZSBsYW5ndWFnZSBzZXJ2ZXIuXG4gIHB1YmxpYyBleGl0KCk6IHZvaWQge1xuICAgIHRoaXMuX3NlbmROb3RpZmljYXRpb24oJ2V4aXQnKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogUmVnaXN0ZXIgYSBjYWxsYmFjayBmb3IgYSBjdXN0b20gbWVzc2FnZS5cbiAgLy9cbiAgLy8gKiBgbWV0aG9kYCAgIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIG1lc3NhZ2UgdG8gbGlzdGVuIGZvci5cbiAgLy8gKiBgY2FsbGJhY2tgIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgbWVzc2FnZSBpcyByZWNlaXZlZC5cbiAgLy8gICAgICAgICAgICAgIFRoZSBwYXlsb2FkIGZyb20gdGhlIG1lc3NhZ2UgaXMgcGFzc2VkIHRvIHRoZSBmdW5jdGlvbi5cbiAgcHVibGljIG9uQ3VzdG9tKG1ldGhvZDogc3RyaW5nLCBjYWxsYmFjazogKG9iajogb2JqZWN0KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fb25Ob3RpZmljYXRpb24oe21ldGhvZH0sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogUmVnaXN0ZXIgYSBjYWxsYmFjayBmb3IgdGhlIGB3aW5kb3cvc2hvd01lc3NhZ2VgIG1lc3NhZ2UuXG4gIC8vXG4gIC8vICogYGNhbGxiYWNrYCBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGB3aW5kb3cvc2hvd01lc3NhZ2VgIG1lc3NhZ2UgaXNcbiAgLy8gICAgICAgICAgICAgIHJlY2VpdmVkIHdpdGgge1Nob3dNZXNzYWdlUGFyYW1zfSBiZWluZyBwYXNzZWQuXG4gIHB1YmxpYyBvblNob3dNZXNzYWdlKGNhbGxiYWNrOiAocGFyYW1zOiBsc3AuU2hvd01lc3NhZ2VQYXJhbXMpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLl9vbk5vdGlmaWNhdGlvbih7bWV0aG9kOiAnd2luZG93L3Nob3dNZXNzYWdlJ30sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogUmVnaXN0ZXIgYSBjYWxsYmFjayBmb3IgdGhlIGB3aW5kb3cvc2hvd01lc3NhZ2VSZXF1ZXN0YCBtZXNzYWdlLlxuICAvL1xuICAvLyAqIGBjYWxsYmFja2AgVGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBgd2luZG93L3Nob3dNZXNzYWdlUmVxdWVzdGAgbWVzc2FnZSBpc1xuICAvLyAgICAgICAgICAgICAgcmVjZWl2ZWQgd2l0aCB7U2hvd01lc3NhZ2VSZXF1ZXN0UGFyYW19JyBiZWluZyBwYXNzZWQuXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyB0aGUge01lc3NhZ2VBY3Rpb25JdGVtfS5cbiAgcHVibGljIG9uU2hvd01lc3NhZ2VSZXF1ZXN0KGNhbGxiYWNrOiAocGFyYW1zOiBsc3AuU2hvd01lc3NhZ2VSZXF1ZXN0UGFyYW1zKVxuICA9PiBQcm9taXNlPGxzcC5NZXNzYWdlQWN0aW9uSXRlbSB8IG51bGw+KTogdm9pZCB7XG4gICAgdGhpcy5fb25SZXF1ZXN0KHttZXRob2Q6ICd3aW5kb3cvc2hvd01lc3NhZ2VSZXF1ZXN0J30sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogUmVnaXN0ZXIgYSBjYWxsYmFjayBmb3IgdGhlIGB3aW5kb3cvbG9nTWVzc2FnZWAgbWVzc2FnZS5cbiAgLy9cbiAgLy8gKiBgY2FsbGJhY2tgIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgYHdpbmRvdy9sb2dNZXNzYWdlYCBtZXNzYWdlIGlzXG4gIC8vICAgICAgICAgICAgICByZWNlaXZlZCB3aXRoIHtMb2dNZXNzYWdlUGFyYW1zfSBiZWluZyBwYXNzZWQuXG4gIHB1YmxpYyBvbkxvZ01lc3NhZ2UoY2FsbGJhY2s6IChwYXJhbXM6IGxzcC5Mb2dNZXNzYWdlUGFyYW1zKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fb25Ob3RpZmljYXRpb24oe21ldGhvZDogJ3dpbmRvdy9sb2dNZXNzYWdlJ30sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogUmVnaXN0ZXIgYSBjYWxsYmFjayBmb3IgdGhlIGB0ZWxlbWV0cnkvZXZlbnRgIG1lc3NhZ2UuXG4gIC8vXG4gIC8vICogYGNhbGxiYWNrYCBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGB0ZWxlbWV0cnkvZXZlbnRgIG1lc3NhZ2UgaXNcbiAgLy8gICAgICAgICAgICAgIHJlY2VpdmVkIHdpdGggYW55IHBhcmFtZXRlcnMgcmVjZWl2ZWQgYmVpbmcgcGFzc2VkIG9uLlxuICBwdWJsaWMgb25UZWxlbWV0cnlFdmVudChjYWxsYmFjazogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fb25Ob3RpZmljYXRpb24oe21ldGhvZDogJ3RlbGVtZXRyeS9ldmVudCd9LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFJlZ2lzdGVyIGEgY2FsbGJhY2sgZm9yIHRoZSBgd29ya3NwYWNlL2FwcGx5RWRpdGAgbWVzc2FnZS5cbiAgLy9cbiAgLy8gKiBgY2FsbGJhY2tgIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgYHdvcmtzcGFjZS9hcHBseUVkaXRgIG1lc3NhZ2UgaXNcbiAgLy8gICAgICAgICAgICAgIHJlY2VpdmVkIHdpdGgge0FwcGx5V29ya3NwYWNlRWRpdFBhcmFtc30gYmVpbmcgcGFzc2VkLlxuICAvLyBSZXR1cm5zIGEge1Byb21pc2V9IGNvbnRhaW5pbmcgdGhlIHtBcHBseVdvcmtzcGFjZUVkaXRSZXNwb25zZX0uXG4gIHB1YmxpYyBvbkFwcGx5RWRpdChjYWxsYmFjazogKHBhcmFtczogbHNwLkFwcGx5V29ya3NwYWNlRWRpdFBhcmFtcykgPT5cbiAgUHJvbWlzZTxsc3AuQXBwbHlXb3Jrc3BhY2VFZGl0UmVzcG9uc2U+KTogdm9pZCB7XG4gICAgdGhpcy5fb25SZXF1ZXN0KHttZXRob2Q6ICd3b3Jrc3BhY2UvYXBwbHlFZGl0J30sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogU2VuZCBhIGB3b3Jrc3BhY2UvZGlkQ2hhbmdlQ29uZmlndXJhdGlvbmAgbm90aWZpY2F0aW9uLlxuICAvL1xuICAvLyAqIGBwYXJhbXNgIFRoZSB7RGlkQ2hhbmdlQ29uZmlndXJhdGlvblBhcmFtc30gY29udGFpbmluZyB0aGUgbmV3IGNvbmZpZ3VyYXRpb24uXG4gIHB1YmxpYyBkaWRDaGFuZ2VDb25maWd1cmF0aW9uKHBhcmFtczogbHNwLkRpZENoYW5nZUNvbmZpZ3VyYXRpb25QYXJhbXMpOiB2b2lkIHtcbiAgICB0aGlzLl9zZW5kTm90aWZpY2F0aW9uKCd3b3Jrc3BhY2UvZGlkQ2hhbmdlQ29uZmlndXJhdGlvbicsIHBhcmFtcyk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFNlbmQgYSBgdGV4dERvY3VtZW50L2RpZE9wZW5gIG5vdGlmaWNhdGlvbi5cbiAgLy9cbiAgLy8gKiBgcGFyYW1zYCBUaGUge0RpZE9wZW5UZXh0RG9jdW1lbnRQYXJhbXN9IGNvbnRhaW5pbmcgdGhlIG9wZW5lZCB0ZXh0IGRvY3VtZW50IGRldGFpbHMuXG4gIHB1YmxpYyBkaWRPcGVuVGV4dERvY3VtZW50KHBhcmFtczogbHNwLkRpZE9wZW5UZXh0RG9jdW1lbnRQYXJhbXMpOiB2b2lkIHtcbiAgICB0aGlzLl9zZW5kTm90aWZpY2F0aW9uKCd0ZXh0RG9jdW1lbnQvZGlkT3BlbicsIHBhcmFtcyk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFNlbmQgYSBgdGV4dERvY3VtZW50L2RpZENoYW5nZWAgbm90aWZpY2F0aW9uLlxuICAvL1xuICAvLyAqIGBwYXJhbXNgIFRoZSB7RGlkQ2hhbmdlVGV4dERvY3VtZW50UGFyYW1zfSBjb250YWluaW5nIHRoZSBjaGFuZ2VkIHRleHQgZG9jdW1lbnRcbiAgLy8gZGV0YWlscyBpbmNsdWRpbmcgdGhlIHZlcnNpb24gbnVtYmVyIGFuZCBhY3R1YWwgdGV4dCBjaGFuZ2VzLlxuICBwdWJsaWMgZGlkQ2hhbmdlVGV4dERvY3VtZW50KHBhcmFtczogbHNwLkRpZENoYW5nZVRleHREb2N1bWVudFBhcmFtcyk6IHZvaWQge1xuICAgIHRoaXMuX3NlbmROb3RpZmljYXRpb24oJ3RleHREb2N1bWVudC9kaWRDaGFuZ2UnLCBwYXJhbXMpO1xuICB9XG5cbiAgLy8gUHVibGljOiBTZW5kIGEgYHRleHREb2N1bWVudC9kaWRDbG9zZWAgbm90aWZpY2F0aW9uLlxuICAvL1xuICAvLyAqIGBwYXJhbXNgIFRoZSB7RGlkQ2xvc2VUZXh0RG9jdW1lbnRQYXJhbXN9IGNvbnRhaW5pbmcgdGhlIG9wZW5lZCB0ZXh0IGRvY3VtZW50IGRldGFpbHMuXG4gIHB1YmxpYyBkaWRDbG9zZVRleHREb2N1bWVudChwYXJhbXM6IGxzcC5EaWRDbG9zZVRleHREb2N1bWVudFBhcmFtcyk6IHZvaWQge1xuICAgIHRoaXMuX3NlbmROb3RpZmljYXRpb24oJ3RleHREb2N1bWVudC9kaWRDbG9zZScsIHBhcmFtcyk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFNlbmQgYSBgdGV4dERvY3VtZW50L3dpbGxTYXZlYCBub3RpZmljYXRpb24uXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtXaWxsU2F2ZVRleHREb2N1bWVudFBhcmFtc30gY29udGFpbmluZyB0aGUgdG8tYmUtc2F2ZWQgdGV4dCBkb2N1bWVudFxuICAvLyBkZXRhaWxzIGFuZCB0aGUgcmVhc29uIGZvciB0aGUgc2F2ZS5cbiAgcHVibGljIHdpbGxTYXZlVGV4dERvY3VtZW50KHBhcmFtczogbHNwLldpbGxTYXZlVGV4dERvY3VtZW50UGFyYW1zKTogdm9pZCB7XG4gICAgdGhpcy5fc2VuZE5vdGlmaWNhdGlvbigndGV4dERvY3VtZW50L3dpbGxTYXZlJywgcGFyYW1zKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogU2VuZCBhIGB0ZXh0RG9jdW1lbnQvZGlkU2F2ZWAgbm90aWZpY2F0aW9uLlxuICAvL1xuICAvLyAqIGBwYXJhbXNgIFRoZSB7RGlkU2F2ZVRleHREb2N1bWVudFBhcmFtc30gY29udGFpbmluZyB0aGUgc2F2ZWQgdGV4dCBkb2N1bWVudCBkZXRhaWxzLlxuICBwdWJsaWMgZGlkU2F2ZVRleHREb2N1bWVudChwYXJhbXM6IGxzcC5EaWRTYXZlVGV4dERvY3VtZW50UGFyYW1zKTogdm9pZCB7XG4gICAgdGhpcy5fc2VuZE5vdGlmaWNhdGlvbigndGV4dERvY3VtZW50L2RpZFNhdmUnLCBwYXJhbXMpO1xuICB9XG5cbiAgLy8gUHVibGljOiBTZW5kIGEgYHdvcmtzcGFjZS9kaWRDaGFuZ2VXYXRjaGVkRmlsZXNgIG5vdGlmaWNhdGlvbi5cbiAgLy9cbiAgLy8gKiBgcGFyYW1zYCBUaGUge0RpZENoYW5nZVdhdGNoZWRGaWxlc1BhcmFtc30gY29udGFpbmluZyB0aGUgYXJyYXkgb2Yge0ZpbGVFdmVudH1zIHRoYXRcbiAgLy8gaGF2ZSBiZWVuIG9ic2VydmVkIHVwb24gdGhlIHdhdGNoZWQgZmlsZXMuXG4gIHB1YmxpYyBkaWRDaGFuZ2VXYXRjaGVkRmlsZXMocGFyYW1zOiBsc3AuRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzUGFyYW1zKTogdm9pZCB7XG4gICAgdGhpcy5fc2VuZE5vdGlmaWNhdGlvbignd29ya3NwYWNlL2RpZENoYW5nZVdhdGNoZWRGaWxlcycsIHBhcmFtcyk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFJlZ2lzdGVyIGEgY2FsbGJhY2sgZm9yIHRoZSBgdGV4dERvY3VtZW50L3B1Ymxpc2hEaWFnbm9zdGljc2AgbWVzc2FnZS5cbiAgLy9cbiAgLy8gKiBgY2FsbGJhY2tgIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgYHRleHREb2N1bWVudC9wdWJsaXNoRGlhZ25vc3RpY3NgIG1lc3NhZ2UgaXNcbiAgLy8gICAgICAgICAgICAgIHJlY2VpdmVkIGEge1B1Ymxpc2hEaWFnbm9zdGljc1BhcmFtc30gY29udGFpbmluZyBuZXcge0RpYWdub3N0aWN9IG1lc3NhZ2VzIGZvciBhIGdpdmVuIHVyaS5cbiAgcHVibGljIG9uUHVibGlzaERpYWdub3N0aWNzKGNhbGxiYWNrOiAocGFyYW1zOiBsc3AuUHVibGlzaERpYWdub3N0aWNzUGFyYW1zKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fb25Ob3RpZmljYXRpb24oe21ldGhvZDogJ3RleHREb2N1bWVudC9wdWJsaXNoRGlhZ25vc3RpY3MnfSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gUHVibGljOiBTZW5kIGEgYHRleHREb2N1bWVudC9jb21wbGV0aW9uYCByZXF1ZXN0LlxuICAvL1xuICAvLyAqIGBwYXJhbXNgICAgICAgICAgICAgVGhlIHtUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtc30gb3Ige0NvbXBsZXRpb25QYXJhbXN9IGZvciB3aGljaFxuICAvLyAgICAgICAgICAgICAgICAgICAgICAge0NvbXBsZXRpb25JdGVtfXMgYXJlIGRlc2lyZWQuXG4gIC8vICogYGNhbmNlbGxhdGlvblRva2VuYCBUaGUge0NhbmNlbGxhdGlvblRva2VufSB0aGF0IGlzIHVzZWQgdG8gY2FuY2VsIHRoaXMgcmVxdWVzdCBpZlxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5LlxuICAvLyBSZXR1cm5zIGEge1Byb21pc2V9IGNvbnRhaW5pbmcgZWl0aGVyIGEge0NvbXBsZXRpb25MaXN0fSBvciBhbiB7QXJyYXl9IG9mIHtDb21wbGV0aW9uSXRlbX1zLlxuICBwdWJsaWMgY29tcGxldGlvbihcbiAgICBwYXJhbXM6IGxzcC5UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyB8IENvbXBsZXRpb25QYXJhbXMsXG4gICAgY2FuY2VsbGF0aW9uVG9rZW4/OiBqc29ucnBjLkNhbmNlbGxhdGlvblRva2VuKTogUHJvbWlzZTxsc3AuQ29tcGxldGlvbkl0ZW1bXSB8IGxzcC5Db21wbGV0aW9uTGlzdD4ge1xuICAgIC8vIENhbmNlbCBwcmlvciByZXF1ZXN0IGlmIG5lY2Vzc2FyeVxuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdCgndGV4dERvY3VtZW50L2NvbXBsZXRpb24nLCBwYXJhbXMsIGNhbmNlbGxhdGlvblRva2VuKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogU2VuZCBhIGBjb21wbGV0aW9uSXRlbS9yZXNvbHZlYCByZXF1ZXN0LlxuICAvL1xuICAvLyAqIGBwYXJhbXNgIFRoZSB7Q29tcGxldGlvbkl0ZW19IGZvciB3aGljaCBhIGZ1bGx5IHJlc29sdmVkIHtDb21wbGV0aW9uSXRlbX0gaXMgZGVzaXJlZC5cbiAgLy8gUmV0dXJucyBhIHtQcm9taXNlfSBjb250YWluaW5nIGEgZnVsbHkgcmVzb2x2ZWQge0NvbXBsZXRpb25JdGVtfS5cbiAgcHVibGljIGNvbXBsZXRpb25JdGVtUmVzb2x2ZShwYXJhbXM6IGxzcC5Db21wbGV0aW9uSXRlbSk6IFByb21pc2U8bHNwLkNvbXBsZXRpb25JdGVtIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdCgnY29tcGxldGlvbkl0ZW0vcmVzb2x2ZScsIHBhcmFtcyk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFNlbmQgYSBgdGV4dERvY3VtZW50L2hvdmVyYCByZXF1ZXN0LlxuICAvL1xuICAvLyAqIGBwYXJhbXNgIFRoZSB7VGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXN9IGZvciB3aGljaCBhIHtIb3Zlcn0gaXMgZGVzaXJlZC5cbiAgLy8gUmV0dXJucyBhIHtQcm9taXNlfSBjb250YWluaW5nIGEge0hvdmVyfS5cbiAgcHVibGljIGhvdmVyKHBhcmFtczogbHNwLlRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKTogUHJvbWlzZTxsc3AuSG92ZXIgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KCd0ZXh0RG9jdW1lbnQvaG92ZXInLCBwYXJhbXMpO1xuICB9XG5cbiAgLy8gUHVibGljOiBTZW5kIGEgYHRleHREb2N1bWVudC9zaWduYXR1cmVIZWxwYCByZXF1ZXN0LlxuICAvL1xuICAvLyAqIGBwYXJhbXNgIFRoZSB7VGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXN9IGZvciB3aGljaCBhIHtTaWduYXR1cmVIZWxwfSBpcyBkZXNpcmVkLlxuICAvLyBSZXR1cm5zIGEge1Byb21pc2V9IGNvbnRhaW5pbmcgYSB7U2lnbmF0dXJlSGVscH0uXG4gIHB1YmxpYyBzaWduYXR1cmVIZWxwKHBhcmFtczogbHNwLlRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKTogUHJvbWlzZTxsc3AuU2lnbmF0dXJlSGVscCB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5fc2VuZFJlcXVlc3QoJ3RleHREb2N1bWVudC9zaWduYXR1cmVIZWxwJywgcGFyYW1zKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogU2VuZCBhIGB0ZXh0RG9jdW1lbnQvZGVmaW5pdGlvbmAgcmVxdWVzdC5cbiAgLy9cbiAgLy8gKiBgcGFyYW1zYCBUaGUge1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zfSBvZiBhIHN5bWJvbCBmb3Igd2hpY2ggb25lIG9yIG1vcmUge0xvY2F0aW9ufXNcbiAgLy8gdGhhdCBkZWZpbmUgdGhhdCBzeW1ib2wgYXJlIHJlcXVpcmVkLlxuICAvLyBSZXR1cm5zIGEge1Byb21pc2V9IGNvbnRhaW5pbmcgZWl0aGVyIGEgc2luZ2xlIHtMb2NhdGlvbn0gb3IgYW4ge0FycmF5fSBvZiBtYW55IHtMb2NhdGlvbn1zLlxuICBwdWJsaWMgZ290b0RlZmluaXRpb24ocGFyYW1zOiBsc3AuVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMpOiBQcm9taXNlPGxzcC5Mb2NhdGlvbiB8IGxzcC5Mb2NhdGlvbltdPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KCd0ZXh0RG9jdW1lbnQvZGVmaW5pdGlvbicsIHBhcmFtcyk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFNlbmQgYSBgdGV4dERvY3VtZW50L3JlZmVyZW5jZXNgIHJlcXVlc3QuXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtc30gb2YgYSBzeW1ib2wgZm9yIHdoaWNoIGFsbCByZWZlcnJpbmcge0xvY2F0aW9ufXNcbiAgLy8gYXJlIGRlc2lyZWQuXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyBhbiB7QXJyYXl9IG9mIHtMb2NhdGlvbn1zIHRoYXQgcmVmZXJlbmNlIHRoaXMgc3ltYm9sLlxuICBwdWJsaWMgZmluZFJlZmVyZW5jZXMocGFyYW1zOiBsc3AuUmVmZXJlbmNlUGFyYW1zKTogUHJvbWlzZTxsc3AuTG9jYXRpb25bXT4ge1xuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdCgndGV4dERvY3VtZW50L3JlZmVyZW5jZXMnLCBwYXJhbXMpO1xuICB9XG5cbiAgLy8gUHVibGljOiBTZW5kIGEgYHRleHREb2N1bWVudC9kb2N1bWVudEhpZ2hsaWdodGAgcmVxdWVzdC5cbiAgLy9cbiAgLy8gKiBgcGFyYW1zYCBUaGUge1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zfSBvZiBhIHN5bWJvbCBmb3Igd2hpY2ggYWxsIGhpZ2hsaWdodHMgYXJlIGRlc2lyZWQuXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyBhbiB7QXJyYXl9IG9mIHtEb2N1bWVudEhpZ2hsaWdodH1zIHRoYXQgY2FuIGJlIHVzZWQgdG9cbiAgLy8gaGlnaGxpZ2h0IHRoaXMgc3ltYm9sLlxuICBwdWJsaWMgZG9jdW1lbnRIaWdobGlnaHQocGFyYW1zOiBsc3AuVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMpOiBQcm9taXNlPGxzcC5Eb2N1bWVudEhpZ2hsaWdodFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KCd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRIaWdobGlnaHQnLCBwYXJhbXMpO1xuICB9XG5cbiAgLy8gUHVibGljOiBTZW5kIGEgYHRleHREb2N1bWVudC9kb2N1bWVudFN5bWJvbGAgcmVxdWVzdC5cbiAgLy9cbiAgLy8gKiBgcGFyYW1zYCAgICAgICAgICAgIFRoZSB7RG9jdW1lbnRTeW1ib2xQYXJhbXN9IHRoYXQgaWRlbnRpZmllcyB0aGUgZG9jdW1lbnQgZm9yIHdoaWNoXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xzIGFyZSBkZXNpcmVkLlxuICAvLyAqIGBjYW5jZWxsYXRpb25Ub2tlbmAgVGhlIHtDYW5jZWxsYXRpb25Ub2tlbn0gdGhhdCBpcyB1c2VkIHRvIGNhbmNlbCB0aGlzIHJlcXVlc3QgaWZcbiAgLy8gICAgICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeS5cbiAgLy8gUmV0dXJucyBhIHtQcm9taXNlfSBjb250YWluaW5nIGFuIHtBcnJheX0gb2Yge1N5bWJvbEluZm9ybWF0aW9ufXMgdGhhdCBjYW4gYmUgdXNlZCB0b1xuICAvLyBuYXZpZ2F0ZSB0aGlzIGRvY3VtZW50LlxuICBwdWJsaWMgZG9jdW1lbnRTeW1ib2woXG4gICAgcGFyYW1zOiBsc3AuRG9jdW1lbnRTeW1ib2xQYXJhbXMsXG4gICAgY2FuY2VsbGF0aW9uVG9rZW4/OiBqc29ucnBjLkNhbmNlbGxhdGlvblRva2VuLFxuICApOiBQcm9taXNlPGxzcC5TeW1ib2xJbmZvcm1hdGlvbltdPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KCd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRTeW1ib2wnLCBwYXJhbXMpO1xuICB9XG5cbiAgLy8gUHVibGljOiBTZW5kIGEgYHdvcmtzcGFjZS9zeW1ib2xgIHJlcXVlc3QuXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtXb3Jrc3BhY2VTeW1ib2xQYXJhbXN9IGNvbnRhaW5pbmcgdGhlIHF1ZXJ5IHN0cmluZyB0byBzZWFyY2ggdGhlIHdvcmtzcGFjZSBmb3IuXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyBhbiB7QXJyYXl9IG9mIHtTeW1ib2xJbmZvcm1hdGlvbn1zIHRoYXQgaWRlbnRpZnkgd2hlcmUgdGhlIHF1ZXJ5XG4gIC8vIHN0cmluZyBvY2N1cnMgd2l0aGluIHRoZSB3b3Jrc3BhY2UuXG4gIHB1YmxpYyB3b3Jrc3BhY2VTeW1ib2wocGFyYW1zOiBsc3AuV29ya3NwYWNlU3ltYm9sUGFyYW1zKTogUHJvbWlzZTxsc3AuU3ltYm9sSW5mb3JtYXRpb25bXT4ge1xuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdCgnd29ya3NwYWNlL3N5bWJvbCcsIHBhcmFtcyk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFNlbmQgYSBgdGV4dERvY3VtZW50L2NvZGVBY3Rpb25gIHJlcXVlc3QuXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtDb2RlQWN0aW9uUGFyYW1zfSBpZGVudGlmeWluZyB0aGUgZG9jdW1lbnQsIHJhbmdlIGFuZCBjb250ZXh0IGZvciB0aGUgY29kZSBhY3Rpb24uXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyBhbiB7QXJyYXl9IG9mIHtDb21tYW5kc31zIHRoYXQgY2FuIGJlIHBlcmZvcm1lZCBhZ2FpbnN0IHRoZSBnaXZlblxuICAvLyBkb2N1bWVudHMgcmFuZ2UuXG4gIHB1YmxpYyBjb2RlQWN0aW9uKHBhcmFtczogbHNwLkNvZGVBY3Rpb25QYXJhbXMpOiBQcm9taXNlPGxzcC5Db21tYW5kW10+IHtcbiAgICByZXR1cm4gdGhpcy5fc2VuZFJlcXVlc3QoJ3RleHREb2N1bWVudC9jb2RlQWN0aW9uJywgcGFyYW1zKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogU2VuZCBhIGB0ZXh0RG9jdW1lbnQvY29kZUxlbnNgIHJlcXVlc3QuXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtDb2RlTGVuc1BhcmFtc30gaWRlbnRpZnlpbmcgdGhlIGRvY3VtZW50IGZvciB3aGljaCBjb2RlIGxlbnMgY29tbWFuZHMgYXJlIGRlc2lyZWQuXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyBhbiB7QXJyYXl9IG9mIHtDb2RlTGVuc31zIHRoYXQgYXNzb2NpYXRlIGNvbW1hbmRzIGFuZCBkYXRhIHdpdGhcbiAgLy8gc3BlY2lmaWVkIHJhbmdlcyB3aXRoaW4gdGhlIGRvY3VtZW50LlxuICBwdWJsaWMgY29kZUxlbnMocGFyYW1zOiBsc3AuQ29kZUxlbnNQYXJhbXMpOiBQcm9taXNlPGxzcC5Db2RlTGVuc1tdPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KCd0ZXh0RG9jdW1lbnQvY29kZUxlbnMnLCBwYXJhbXMpO1xuICB9XG5cbiAgLy8gUHVibGljOiBTZW5kIGEgYGNvZGVMZW5zL3Jlc29sdmVgIHJlcXVlc3QuXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtDb2RlTGVuc30gaWRlbnRpZnlpbmcgdGhlIGNvZGUgbGVucyB0byBiZSByZXNvbHZlZCB3aXRoIGZ1bGwgZGV0YWlsLlxuICAvLyBSZXR1cm5zIGEge1Byb21pc2V9IGNvbnRhaW5pbmcgdGhlIHtDb2RlTGVuc30gZnVsbHkgcmVzb2x2ZWQuXG4gIHB1YmxpYyBjb2RlTGVuc1Jlc29sdmUocGFyYW1zOiBsc3AuQ29kZUxlbnMpOiBQcm9taXNlPGxzcC5Db2RlTGVucyB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5fc2VuZFJlcXVlc3QoJ2NvZGVMZW5zL3Jlc29sdmUnLCBwYXJhbXMpO1xuICB9XG5cbiAgLy8gUHVibGljOiBTZW5kIGEgYHRleHREb2N1bWVudC9kb2N1bWVudExpbmtgIHJlcXVlc3QuXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtEb2N1bWVudExpbmtQYXJhbXN9IGlkZW50aWZ5aW5nIHRoZSBkb2N1bWVudCBmb3Igd2hpY2ggbGlua3Mgc2hvdWxkIGJlIGlkZW50aWZpZWQuXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyBhbiB7QXJyYXl9IG9mIHtEb2N1bWVudExpbmt9cyByZWxhdGluZyB1cmkncyB0byBzcGVjaWZpYyByYW5nZXNcbiAgLy8gd2l0aGluIHRoZSBkb2N1bWVudC5cbiAgcHVibGljIGRvY3VtZW50TGluayhwYXJhbXM6IGxzcC5Eb2N1bWVudExpbmtQYXJhbXMpOiBQcm9taXNlPGxzcC5Eb2N1bWVudExpbmtbXT4ge1xuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdCgndGV4dERvY3VtZW50L2RvY3VtZW50TGluaycsIHBhcmFtcyk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFNlbmQgYSBgZG9jdW1lbnRMaW5rL3Jlc29sdmVgIHJlcXVlc3QuXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtEb2N1bWVudExpbmt9IGlkZW50aWZ5aW5nIHRoZSBkb2N1bWVudCBsaW5rIHRvIGJlIHJlc29sdmVkIHdpdGggZnVsbCBkZXRhaWwuXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyB0aGUge0RvY3VtZW50TGlua30gZnVsbHkgcmVzb2x2ZWQuXG4gIHB1YmxpYyBkb2N1bWVudExpbmtSZXNvbHZlKHBhcmFtczogbHNwLkRvY3VtZW50TGluayk6IFByb21pc2U8bHNwLkRvY3VtZW50TGluaz4ge1xuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdCgnZG9jdW1lbnRMaW5rL3Jlc29sdmUnLCBwYXJhbXMpO1xuICB9XG5cbiAgLy8gUHVibGljOiBTZW5kIGEgYHRleHREb2N1bWVudC9mb3JtYXR0aW5nYCByZXF1ZXN0LlxuICAvL1xuICAvLyAqIGBwYXJhbXNgIFRoZSB7RG9jdW1lbnRGb3JtYXR0aW5nUGFyYW1zfSBpZGVudGlmeWluZyB0aGUgZG9jdW1lbnQgdG8gYmUgZm9ybWF0dGVkIGFzIHdlbGwgYXNcbiAgLy8gYWRkaXRpb25hbCBmb3JtYXR0aW5nIHByZWZlcmVuY2VzLlxuICAvLyBSZXR1cm5zIGEge1Byb21pc2V9IGNvbnRhaW5pbmcgYW4ge0FycmF5fSBvZiB7VGV4dEVkaXR9cyB0byBiZSBhcHBsaWVkIHRvIHRoZSBkb2N1bWVudCB0b1xuICAvLyBjb3JyZWN0bHkgcmVmb3JtYXQgaXQuXG4gIHB1YmxpYyBkb2N1bWVudEZvcm1hdHRpbmcocGFyYW1zOiBsc3AuRG9jdW1lbnRGb3JtYXR0aW5nUGFyYW1zKTogUHJvbWlzZTxsc3AuVGV4dEVkaXRbXT4ge1xuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdCgndGV4dERvY3VtZW50L2Zvcm1hdHRpbmcnLCBwYXJhbXMpO1xuICB9XG5cbiAgLy8gUHVibGljOiBTZW5kIGEgYHRleHREb2N1bWVudC9yYW5nZUZvcm1hdHRpbmdgIHJlcXVlc3QuXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtEb2N1bWVudFJhbmdlRm9ybWF0dGluZ1BhcmFtc30gaWRlbnRpZnlpbmcgdGhlIGRvY3VtZW50IGFuZCByYW5nZSB0byBiZSBmb3JtYXR0ZWRcbiAgLy8gYXMgd2VsbCBhcyBhZGRpdGlvbmFsIGZvcm1hdHRpbmcgcHJlZmVyZW5jZXMuXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyBhbiB7QXJyYXl9IG9mIHtUZXh0RWRpdH1zIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGRvY3VtZW50IHRvXG4gIC8vIGNvcnJlY3RseSByZWZvcm1hdCBpdC5cbiAgcHVibGljIGRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nKHBhcmFtczogbHNwLkRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUGFyYW1zKTogUHJvbWlzZTxsc3AuVGV4dEVkaXRbXT4ge1xuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdCgndGV4dERvY3VtZW50L3JhbmdlRm9ybWF0dGluZycsIHBhcmFtcyk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFNlbmQgYSBgdGV4dERvY3VtZW50L29uVHlwZUZvcm1hdHRpbmdgIHJlcXVlc3QuXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtEb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdQYXJhbXN9IGlkZW50aWZ5aW5nIHRoZSBkb2N1bWVudCB0byBiZSBmb3JtYXR0ZWQsXG4gIC8vIHRoZSBjaGFyYWN0ZXIgdGhhdCB3YXMgdHlwZWQgYW5kIGF0IHdoYXQgcG9zaXRpb24gYXMgd2VsbCBhcyBhZGRpdGlvbmFsIGZvcm1hdHRpbmcgcHJlZmVyZW5jZXMuXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyBhbiB7QXJyYXl9IG9mIHtUZXh0RWRpdH1zIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGRvY3VtZW50IHRvXG4gIC8vIGNvcnJlY3RseSByZWZvcm1hdCBpdC5cbiAgcHVibGljIGRvY3VtZW50T25UeXBlRm9ybWF0dGluZyhwYXJhbXM6IGxzcC5Eb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdQYXJhbXMpOiBQcm9taXNlPGxzcC5UZXh0RWRpdFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KCd0ZXh0RG9jdW1lbnQvb25UeXBlRm9ybWF0dGluZycsIHBhcmFtcyk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFNlbmQgYSBgdGV4dERvY3VtZW50L3JlbmFtZWAgcmVxdWVzdC5cbiAgLy9cbiAgLy8gKiBgcGFyYW1zYCBUaGUge1JlbmFtZVBhcmFtc30gaWRlbnRpZnlpbmcgdGhlIGRvY3VtZW50IGNvbnRhaW5pbmcgdGhlIHN5bWJvbCB0byBiZSByZW5hbWVkLFxuICAvLyBhcyB3ZWxsIGFzIHRoZSBwb3NpdGlvbiBhbmQgbmV3IG5hbWUuXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyBhbiB7V29ya3NwYWNlRWRpdH0gdGhhdCBjb250YWlucyBhIGxpc3Qgb2Yge1RleHRFZGl0fXMgZWl0aGVyXG4gIC8vIG9uIHRoZSBjaGFuZ2VzIHByb3BlcnR5IChrZXllZCBieSB1cmkpIG9yIHRoZSBkb2N1bWVudENoYW5nZXMgcHJvcGVydHkgY29udGFpbmluZ1xuICAvLyBhbiB7QXJyYXl9IG9mIHtUZXh0RG9jdW1lbnRFZGl0fXMgKHByZWZlcnJlZCkuXG4gIHB1YmxpYyByZW5hbWUocGFyYW1zOiBsc3AuUmVuYW1lUGFyYW1zKTogUHJvbWlzZTxsc3AuV29ya3NwYWNlRWRpdD4ge1xuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdCgndGV4dERvY3VtZW50L3JlbmFtZScsIHBhcmFtcyk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFNlbmQgYSBgd29ya3NwYWNlL2V4ZWN1dGVDb21tYW5kYCByZXF1ZXN0LlxuICAvL1xuICAvLyAqIGBwYXJhbXNgIFRoZSB7RXhlY3V0ZUNvbW1hbmRQYXJhbXN9IHNwZWNpZnlpbmcgdGhlIGNvbW1hbmQgYW5kIGFyZ3VtZW50c1xuICAvLyB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHNob3VsZCBleGVjdXRlICh0aGVzZSBjb21tYW5kcyBhcmUgdXN1YWxseSBmcm9tIHtDb2RlTGVuc30gb3Ige0NvZGVBY3Rpb259XG4gIC8vIHJlc3BvbnNlcykuXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyBhbnl0aGluZy5cbiAgcHVibGljIGV4ZWN1dGVDb21tYW5kKHBhcmFtczogbHNwLkV4ZWN1dGVDb21tYW5kUGFyYW1zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fc2VuZFJlcXVlc3QoJ3dvcmtzcGFjZS9leGVjdXRlQ29tbWFuZCcsIHBhcmFtcyk7XG4gIH1cblxuICBwcml2YXRlIF9vblJlcXVlc3QodHlwZToge21ldGhvZDogc3RyaW5nfSwgY2FsbGJhY2s6IChvYmo6IG9iamVjdCkgPT4gUHJvbWlzZTxhbnk+KTogdm9pZCB7XG4gICAgdGhpcy5fcnBjLm9uUmVxdWVzdCh0eXBlLm1ldGhvZCwgKHZhbHVlKSA9PiB7XG4gICAgICB0aGlzLl9sb2cuZGVidWcoYHJwYy5vblJlcXVlc3QgJHt0eXBlLm1ldGhvZH1gLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gY2FsbGJhY2sodmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25Ob3RpZmljYXRpb24odHlwZToge21ldGhvZDogc3RyaW5nfSwgY2FsbGJhY2s6IChvYmo6IG9iamVjdCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuX3JwYy5vbk5vdGlmaWNhdGlvbih0eXBlLm1ldGhvZCwgKHZhbHVlKSA9PiB7XG4gICAgICB0aGlzLl9sb2cuZGVidWcoYHJwYy5vbk5vdGlmaWNhdGlvbiAke3R5cGUubWV0aG9kfWAsIHZhbHVlKTtcbiAgICAgIGNhbGxiYWNrKHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX3NlbmROb3RpZmljYXRpb24obWV0aG9kOiBzdHJpbmcsIGFyZ3M/OiBvYmplY3QpOiB2b2lkIHtcbiAgICB0aGlzLl9sb2cuZGVidWcoYHJwYy5zZW5kTm90aWZpY2F0aW9uICR7bWV0aG9kfWAsIGFyZ3MpO1xuICAgIHRoaXMuX3JwYy5zZW5kTm90aWZpY2F0aW9uKG1ldGhvZCwgYXJncyk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIF9zZW5kUmVxdWVzdChcbiAgICBtZXRob2Q6IHN0cmluZyxcbiAgICBhcmdzPzogb2JqZWN0LFxuICAgIGNhbmNlbGxhdGlvblRva2VuPzoganNvbnJwYy5DYW5jZWxsYXRpb25Ub2tlbixcbiAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICB0aGlzLl9sb2cuZGVidWcoYHJwYy5zZW5kUmVxdWVzdCAke21ldGhvZH0gc2VuZGluZ2AsIGFyZ3MpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgbGV0IHJlc3VsdDtcbiAgICAgIGlmIChjYW5jZWxsYXRpb25Ub2tlbikge1xuICAgICAgICByZXN1bHQgPSBhd2FpdCB0aGlzLl9ycGMuc2VuZFJlcXVlc3QobWV0aG9kLCBhcmdzLCBjYW5jZWxsYXRpb25Ub2tlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBjYW5jZWxsYXRpb25Ub2tlbiBpcyBudWxsIG9yIHVuZGVmaW5lZCwgZG9uJ3QgYWRkIHRoZSB0aGlyZFxuICAgICAgICAvLyBhcmd1bWVudCBvdGhlcndpc2UgdnNjb2RlLWpzb25ycGMgd2lsbCBzZW5kIGFuIGFkZGl0aW9uYWwsIG51bGxcbiAgICAgICAgLy8gbWVzc2FnZSBwYXJhbWV0ZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5fcnBjLnNlbmRSZXF1ZXN0KG1ldGhvZCwgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRvb2sgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0O1xuICAgICAgdGhpcy5fbG9nLmRlYnVnKGBycGMuc2VuZFJlcXVlc3QgJHttZXRob2R9IHJlY2VpdmVkICgke01hdGguZmxvb3IodG9vayl9bXMpYCwgcmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3QgcmVzcG9uc2VFcnJvciA9IGUgYXMganNvbnJwYy5SZXNwb25zZUVycm9yPGFueT47XG4gICAgICBpZiAoY2FuY2VsbGF0aW9uVG9rZW4gJiYgcmVzcG9uc2VFcnJvci5jb2RlID09PSBqc29ucnBjLkVycm9yQ29kZXMuUmVxdWVzdENhbmNlbGxlZCkge1xuICAgICAgICB0aGlzLl9sb2cuZGVidWcoYHJwYy5zZW5kUmVxdWVzdCAke21ldGhvZH0gd2FzIGNhbmNlbGxlZGApO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX2xvZy5lcnJvcihgcnBjLnNlbmRSZXF1ZXN0ICR7bWV0aG9kfSB0aHJld2AsIGUpO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgdHlwZSBEaWFnbm9zdGljQ29kZSA9IG51bWJlciB8IHN0cmluZztcblxuLyoqXG4gKiBDb250YWlucyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb250ZXh0IGluIHdoaWNoIGEgY29tcGxldGlvbiByZXF1ZXN0IGlzIHRyaWdnZXJlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uQ29udGV4dCB7XG4gIC8qKlxuICAgKiBIb3cgdGhlIGNvbXBsZXRpb24gd2FzIHRyaWdnZXJlZC5cbiAgICovXG4gIHRyaWdnZXJLaW5kOiBsc3AuQ29tcGxldGlvblRyaWdnZXJLaW5kO1xuXG4gIC8qKlxuICAgKiBUaGUgdHJpZ2dlciBjaGFyYWN0ZXIgKGEgc2luZ2xlIGNoYXJhY3RlcikgdGhhdCBoYXMgdHJpZ2dlciBjb2RlIGNvbXBsZXRlLlxuICAgKiBJcyB1bmRlZmluZWQgaWYgYHRyaWdnZXJLaW5kICE9PSBDb21wbGV0aW9uVHJpZ2dlcktpbmQuVHJpZ2dlckNoYXJhY3RlcmBcbiAgICovXG4gIHRyaWdnZXJDaGFyYWN0ZXI/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29tcGxldGlvbiBwYXJhbWV0ZXJzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGlvblBhcmFtcyBleHRlbmRzIGxzcC5UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyB7XG5cbiAgLyoqXG4gICAqIFRoZSBjb21wbGV0aW9uIGNvbnRleHQuIFRoaXMgaXMgb25seSBhdmFpbGFibGUgaXQgdGhlIGNsaWVudCBzcGVjaWZpZXNcbiAgICogdG8gc2VuZCB0aGlzIHVzaW5nIGBDbGllbnRDYXBhYmlsaXRpZXMudGV4dERvY3VtZW50LmNvbXBsZXRpb24uY29udGV4dFN1cHBvcnQgPT09IHRydWVgXG4gICAqL1xuICBjb250ZXh0PzogQ29tcGxldGlvbkNvbnRleHQ7XG59XG4iXX0=