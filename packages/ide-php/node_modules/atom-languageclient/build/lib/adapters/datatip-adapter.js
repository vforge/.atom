"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const convert_1 = require("../convert");
const utils_1 = require("../utils");
// Public: Adapts the language server protocol "textDocument/hover" to the
// Atom IDE UI Datatip package.
class DatatipAdapter {
    // Public: Determine whether this adapter can be used to adapt a language server
    // based on the serverCapabilities matrix containing a hoverProvider.
    //
    // * `serverCapabilities` The {ServerCapabilities} of the language server to consider.
    //
    // Returns a {Boolean} indicating adapter can adapt the server based on the
    // given serverCapabilities.
    static canAdapt(serverCapabilities) {
        return serverCapabilities.hoverProvider === true;
    }
    // Public: Get the Datatip for this {Point} in a {TextEditor} by querying
    // the language server.
    //
    // * `connection` A {LanguageClientConnection} to the language server that will be queried
    //                for the hover text/datatip.
    // * `editor` The Atom {TextEditor} containing the text the Datatip should relate to.
    // * `point` The Atom {Point} containing the point within the text the Datatip should relate to.
    //
    // Returns a {Promise} containing the {Datatip} to display or {null} if no Datatip is available.
    getDatatip(connection, editor, point) {
        return __awaiter(this, void 0, void 0, function* () {
            const documentPositionParams = convert_1.default.editorToTextDocumentPositionParams(editor, point);
            const hover = yield connection.hover(documentPositionParams);
            if (hover == null ||
                hover.contents == null ||
                (typeof hover.contents === 'string' && hover.contents.length === 0) ||
                (Array.isArray(hover.contents) && hover.contents.length === 0)) {
                return null;
            }
            const range = hover.range == null ? utils_1.default.getWordAtPosition(editor, point) : convert_1.default.lsRangeToAtomRange(hover.range);
            const markedStrings = (Array.isArray(hover.contents) ? hover.contents : [hover.contents]).map((str) => DatatipAdapter.convertMarkedString(editor, str));
            return { range, markedStrings };
        });
    }
    static convertMarkedString(editor, markedString) {
        if (typeof markedString === 'string') {
            return { type: 'markdown', value: markedString };
        }
        if (markedString.kind) {
            return {
                type: 'markdown',
                value: markedString.value,
            };
        }
        // Must check as <{language: string}> to disambiguate between
        // string and the more explicit object type because MarkedString
        // is a union of the two types
        if (markedString.language) {
            return {
                type: 'snippet',
                // TODO: find a better mapping from language -> grammar
                grammar: atom.grammars.grammarForScopeName(`source.${markedString.language}`) || editor.getGrammar(),
                value: markedString.value,
            };
        }
        // Catch-all case
        return { type: 'markdown', value: markedString.toString() };
    }
}
exports.default = DatatipAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRpcC1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2FkYXB0ZXJzL2RhdGF0aXAtYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBUUEsd0NBQWlDO0FBQ2pDLG9DQUE2QjtBQUU3QiwwRUFBMEU7QUFDMUUsK0JBQStCO0FBQy9CO0lBQ0UsZ0ZBQWdGO0lBQ2hGLHFFQUFxRTtJQUNyRSxFQUFFO0lBQ0Ysc0ZBQXNGO0lBQ3RGLEVBQUU7SUFDRiwyRUFBMkU7SUFDM0UsNEJBQTRCO0lBQ3JCLE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBQXNDO1FBQzNELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDO0lBQ25ELENBQUM7SUFFRCx5RUFBeUU7SUFDekUsdUJBQXVCO0lBQ3ZCLEVBQUU7SUFDRiwwRkFBMEY7SUFDMUYsNkNBQTZDO0lBQzdDLHFGQUFxRjtJQUNyRixnR0FBZ0c7SUFDaEcsRUFBRTtJQUNGLGdHQUFnRztJQUNuRixVQUFVLENBQ3JCLFVBQW9DLEVBQ3BDLE1BQWtCLEVBQ2xCLEtBQVk7O1lBRVosTUFBTSxzQkFBc0IsR0FBRyxpQkFBTyxDQUFDLGtDQUFrQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUV6RixNQUFNLEtBQUssR0FBRyxNQUFNLFVBQVUsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUM3RCxFQUFFLENBQUMsQ0FDRCxLQUFLLElBQUksSUFBSTtnQkFDYixLQUFLLENBQUMsUUFBUSxJQUFJLElBQUk7Z0JBQ3RCLENBQUMsT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7Z0JBQ25FLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUMvRCxDQUFDLENBQUMsQ0FBQztnQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2QsQ0FBQztZQUVELE1BQU0sS0FBSyxHQUNULEtBQUssQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxlQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBTyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUV6RyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQ3BHLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQ2hELENBQUM7WUFFRixNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLENBQUM7UUFDbEMsQ0FBQztLQUFBO0lBRU8sTUFBTSxDQUFDLG1CQUFtQixDQUNoQyxNQUFrQixFQUNsQixZQUEwQztRQUUxQyxFQUFFLENBQUMsQ0FBQyxPQUFPLFlBQVksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxDQUFDO1FBQ25ELENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBRSxZQUE4QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDekMsTUFBTSxDQUFDO2dCQUNMLElBQUksRUFBRSxVQUFVO2dCQUNoQixLQUFLLEVBQUUsWUFBWSxDQUFDLEtBQUs7YUFDMUIsQ0FBQztRQUNKLENBQUM7UUFFRCw2REFBNkQ7UUFDN0QsZ0VBQWdFO1FBQ2hFLDhCQUE4QjtRQUM5QixFQUFFLENBQUMsQ0FBRSxZQUFtQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbEQsTUFBTSxDQUFDO2dCQUNMLElBQUksRUFBRSxTQUFTO2dCQUNmLHVEQUF1RDtnQkFDdkQsT0FBTyxFQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQy9CLFVBQVcsWUFBbUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7Z0JBQ3JGLEtBQUssRUFBRSxZQUFZLENBQUMsS0FBSzthQUMxQixDQUFDO1FBQ0osQ0FBQztRQUVELGlCQUFpQjtRQUNqQixNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztJQUM5RCxDQUFDO0NBQ0Y7QUFoRkQsaUNBZ0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLFxuICBNYXJrdXBDb250ZW50LFxuICBNYXJrZWRTdHJpbmcsXG4gIFNlcnZlckNhcGFiaWxpdGllcyxcbn0gZnJvbSAnLi4vbGFuZ3VhZ2VjbGllbnQnO1xuaW1wb3J0IHsgUG9pbnQsIFRleHRFZGl0b3IgfSBmcm9tICdhdG9tJztcbmltcG9ydCAqIGFzIGF0b21JZGUgZnJvbSAnYXRvbS1pZGUnO1xuaW1wb3J0IENvbnZlcnQgZnJvbSAnLi4vY29udmVydCc7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuXG4vLyBQdWJsaWM6IEFkYXB0cyB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHByb3RvY29sIFwidGV4dERvY3VtZW50L2hvdmVyXCIgdG8gdGhlXG4vLyBBdG9tIElERSBVSSBEYXRhdGlwIHBhY2thZ2UuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhdGlwQWRhcHRlciB7XG4gIC8vIFB1YmxpYzogRGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBhZGFwdGVyIGNhbiBiZSB1c2VkIHRvIGFkYXB0IGEgbGFuZ3VhZ2Ugc2VydmVyXG4gIC8vIGJhc2VkIG9uIHRoZSBzZXJ2ZXJDYXBhYmlsaXRpZXMgbWF0cml4IGNvbnRhaW5pbmcgYSBob3ZlclByb3ZpZGVyLlxuICAvL1xuICAvLyAqIGBzZXJ2ZXJDYXBhYmlsaXRpZXNgIFRoZSB7U2VydmVyQ2FwYWJpbGl0aWVzfSBvZiB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHRvIGNvbnNpZGVyLlxuICAvL1xuICAvLyBSZXR1cm5zIGEge0Jvb2xlYW59IGluZGljYXRpbmcgYWRhcHRlciBjYW4gYWRhcHQgdGhlIHNlcnZlciBiYXNlZCBvbiB0aGVcbiAgLy8gZ2l2ZW4gc2VydmVyQ2FwYWJpbGl0aWVzLlxuICBwdWJsaWMgc3RhdGljIGNhbkFkYXB0KHNlcnZlckNhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHNlcnZlckNhcGFiaWxpdGllcy5ob3ZlclByb3ZpZGVyID09PSB0cnVlO1xuICB9XG5cbiAgLy8gUHVibGljOiBHZXQgdGhlIERhdGF0aXAgZm9yIHRoaXMge1BvaW50fSBpbiBhIHtUZXh0RWRpdG9yfSBieSBxdWVyeWluZ1xuICAvLyB0aGUgbGFuZ3VhZ2Ugc2VydmVyLlxuICAvL1xuICAvLyAqIGBjb25uZWN0aW9uYCBBIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259IHRvIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgdGhhdCB3aWxsIGJlIHF1ZXJpZWRcbiAgLy8gICAgICAgICAgICAgICAgZm9yIHRoZSBob3ZlciB0ZXh0L2RhdGF0aXAuXG4gIC8vICogYGVkaXRvcmAgVGhlIEF0b20ge1RleHRFZGl0b3J9IGNvbnRhaW5pbmcgdGhlIHRleHQgdGhlIERhdGF0aXAgc2hvdWxkIHJlbGF0ZSB0by5cbiAgLy8gKiBgcG9pbnRgIFRoZSBBdG9tIHtQb2ludH0gY29udGFpbmluZyB0aGUgcG9pbnQgd2l0aGluIHRoZSB0ZXh0IHRoZSBEYXRhdGlwIHNob3VsZCByZWxhdGUgdG8uXG4gIC8vXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyB0aGUge0RhdGF0aXB9IHRvIGRpc3BsYXkgb3Ige251bGx9IGlmIG5vIERhdGF0aXAgaXMgYXZhaWxhYmxlLlxuICBwdWJsaWMgYXN5bmMgZ2V0RGF0YXRpcChcbiAgICBjb25uZWN0aW9uOiBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sXG4gICAgZWRpdG9yOiBUZXh0RWRpdG9yLFxuICAgIHBvaW50OiBQb2ludCxcbiAgKTogUHJvbWlzZTxhdG9tSWRlLkRhdGF0aXAgfCBudWxsPiB7XG4gICAgY29uc3QgZG9jdW1lbnRQb3NpdGlvblBhcmFtcyA9IENvbnZlcnQuZWRpdG9yVG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyhlZGl0b3IsIHBvaW50KTtcblxuICAgIGNvbnN0IGhvdmVyID0gYXdhaXQgY29ubmVjdGlvbi5ob3Zlcihkb2N1bWVudFBvc2l0aW9uUGFyYW1zKTtcbiAgICBpZiAoXG4gICAgICBob3ZlciA9PSBudWxsIHx8XG4gICAgICBob3Zlci5jb250ZW50cyA9PSBudWxsIHx8XG4gICAgICAodHlwZW9mIGhvdmVyLmNvbnRlbnRzID09PSAnc3RyaW5nJyAmJiBob3Zlci5jb250ZW50cy5sZW5ndGggPT09IDApIHx8XG4gICAgICAoQXJyYXkuaXNBcnJheShob3Zlci5jb250ZW50cykgJiYgaG92ZXIuY29udGVudHMubGVuZ3RoID09PSAwKVxuICAgICkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcmFuZ2UgPVxuICAgICAgaG92ZXIucmFuZ2UgPT0gbnVsbCA/IFV0aWxzLmdldFdvcmRBdFBvc2l0aW9uKGVkaXRvciwgcG9pbnQpIDogQ29udmVydC5sc1JhbmdlVG9BdG9tUmFuZ2UoaG92ZXIucmFuZ2UpO1xuXG4gICAgY29uc3QgbWFya2VkU3RyaW5ncyA9IChBcnJheS5pc0FycmF5KGhvdmVyLmNvbnRlbnRzKSA/IGhvdmVyLmNvbnRlbnRzIDogW2hvdmVyLmNvbnRlbnRzXSkubWFwKChzdHIpID0+XG4gICAgICBEYXRhdGlwQWRhcHRlci5jb252ZXJ0TWFya2VkU3RyaW5nKGVkaXRvciwgc3RyKSxcbiAgICApO1xuXG4gICAgcmV0dXJuIHsgcmFuZ2UsIG1hcmtlZFN0cmluZ3MgfTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNvbnZlcnRNYXJrZWRTdHJpbmcoXG4gICAgZWRpdG9yOiBUZXh0RWRpdG9yLFxuICAgIG1hcmtlZFN0cmluZzogTWFya2VkU3RyaW5nIHwgTWFya3VwQ29udGVudCxcbiAgKTogYXRvbUlkZS5NYXJrZWRTdHJpbmcge1xuICAgIGlmICh0eXBlb2YgbWFya2VkU3RyaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHsgdHlwZTogJ21hcmtkb3duJywgdmFsdWU6IG1hcmtlZFN0cmluZyB9O1xuICAgIH1cblxuICAgIGlmICgobWFya2VkU3RyaW5nIGFzIE1hcmt1cENvbnRlbnQpLmtpbmQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdtYXJrZG93bicsXG4gICAgICAgIHZhbHVlOiBtYXJrZWRTdHJpbmcudmFsdWUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIE11c3QgY2hlY2sgYXMgPHtsYW5ndWFnZTogc3RyaW5nfT4gdG8gZGlzYW1iaWd1YXRlIGJldHdlZW5cbiAgICAvLyBzdHJpbmcgYW5kIHRoZSBtb3JlIGV4cGxpY2l0IG9iamVjdCB0eXBlIGJlY2F1c2UgTWFya2VkU3RyaW5nXG4gICAgLy8gaXMgYSB1bmlvbiBvZiB0aGUgdHdvIHR5cGVzXG4gICAgaWYgKChtYXJrZWRTdHJpbmcgYXMge2xhbmd1YWdlOiBzdHJpbmd9KS5sYW5ndWFnZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ3NuaXBwZXQnLFxuICAgICAgICAvLyBUT0RPOiBmaW5kIGEgYmV0dGVyIG1hcHBpbmcgZnJvbSBsYW5ndWFnZSAtPiBncmFtbWFyXG4gICAgICAgIGdyYW1tYXI6XG4gICAgICAgICAgYXRvbS5ncmFtbWFycy5ncmFtbWFyRm9yU2NvcGVOYW1lKFxuICAgICAgICAgICAgYHNvdXJjZS4keyhtYXJrZWRTdHJpbmcgYXMge2xhbmd1YWdlOiBzdHJpbmd9KS5sYW5ndWFnZX1gKSB8fCBlZGl0b3IuZ2V0R3JhbW1hcigpLFxuICAgICAgICB2YWx1ZTogbWFya2VkU3RyaW5nLnZhbHVlLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBDYXRjaC1hbGwgY2FzZVxuICAgIHJldHVybiB7IHR5cGU6ICdtYXJrZG93bicsIHZhbHVlOiBtYXJrZWRTdHJpbmcudG9TdHJpbmcoKSB9O1xuICB9XG59XG4iXX0=