"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const convert_1 = require("../convert");
class CodeActionAdapter {
    // Returns a {Boolean} indicating this adapter can adapt the server based on the
    // given serverCapabilities.
    static canAdapt(serverCapabilities) {
        return serverCapabilities.codeActionProvider === true;
    }
    // Public: Retrieves code actions for a given editor, range, and context (diagnostics).
    // Throws an error if codeActionProvider is not a registered capability.
    //
    // * `connection` A {LanguageClientConnection} to the language server that provides highlights.
    // * `serverCapabilities` The {ServerCapabilities} of the language server that will be used.
    // * `editor` The Atom {TextEditor} containing the diagnostics.
    // * `range` The Atom {Range} to fetch code actions for.
    // * `diagnostics` An {Array<atomIde$Diagnostic>} to fetch code actions for.
    //                 This is typically a list of diagnostics intersecting `range`.
    //
    // Returns a {Promise} of an {Array} of {atomIde$CodeAction}s to display.
    static getCodeActions(connection, serverCapabilities, linterAdapter, editor, range, diagnostics) {
        return __awaiter(this, void 0, void 0, function* () {
            if (linterAdapter == null) {
                return [];
            }
            assert(serverCapabilities.codeActionProvider, 'Must have the textDocument/codeAction capability');
            const commands = yield connection.codeAction({
                textDocument: convert_1.default.editorToTextDocumentIdentifier(editor),
                range: convert_1.default.atomRangeToLSRange(range),
                context: {
                    diagnostics: diagnostics.map((diagnostic) => {
                        // Retrieve the stored diagnostic code if it exists.
                        // Until the Linter API provides a place to store the code,
                        // there's no real way for the code actions API to give it back to us.
                        const converted = convert_1.default.atomIdeDiagnosticToLSDiagnostic(diagnostic);
                        if (diagnostic.range != null && diagnostic.text != null) {
                            const code = linterAdapter.getDiagnosticCode(editor, diagnostic.range, diagnostic.text);
                            if (code != null) {
                                converted.code = code;
                            }
                        }
                        return converted;
                    }),
                },
            });
            return commands.map((command) => ({
                apply() {
                    return __awaiter(this, void 0, void 0, function* () {
                        yield connection.executeCommand({
                            command: command.command,
                            arguments: command.arguments,
                        });
                    });
                },
                getTitle() {
                    return Promise.resolve(command.title);
                },
                // tslint:disable-next-line:no-empty
                dispose() { },
            }));
        });
    }
}
exports.default = CodeActionAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1hY3Rpb24tYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9jb2RlLWFjdGlvbi1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFQSxpQ0FBa0M7QUFHbEMsd0NBQWlDO0FBR2pDO0lBQ0UsZ0ZBQWdGO0lBQ2hGLDRCQUE0QjtJQUNyQixNQUFNLENBQUMsUUFBUSxDQUFDLGtCQUFzQztRQUMzRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLEtBQUssSUFBSSxDQUFDO0lBQ3hELENBQUM7SUFFRCx1RkFBdUY7SUFDdkYsd0VBQXdFO0lBQ3hFLEVBQUU7SUFDRiwrRkFBK0Y7SUFDL0YsNEZBQTRGO0lBQzVGLCtEQUErRDtJQUMvRCx3REFBd0Q7SUFDeEQsNEVBQTRFO0lBQzVFLGdGQUFnRjtJQUNoRixFQUFFO0lBQ0YseUVBQXlFO0lBQ2xFLE1BQU0sQ0FBTyxjQUFjLENBQ2hDLFVBQW9DLEVBQ3BDLGtCQUFzQyxFQUN0QyxhQUE4QyxFQUM5QyxNQUFrQixFQUNsQixLQUFZLEVBQ1osV0FBaUM7O1lBRWpDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUMxQixNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ1osQ0FBQztZQUNELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsRUFBRSxrREFBa0QsQ0FBQyxDQUFDO1lBQ2xHLE1BQU0sUUFBUSxHQUFHLE1BQU0sVUFBVSxDQUFDLFVBQVUsQ0FBQztnQkFDM0MsWUFBWSxFQUFFLGlCQUFPLENBQUMsOEJBQThCLENBQUMsTUFBTSxDQUFDO2dCQUM1RCxLQUFLLEVBQUUsaUJBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUM7Z0JBQ3hDLE9BQU8sRUFBRTtvQkFDUCxXQUFXLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO3dCQUMxQyxvREFBb0Q7d0JBQ3BELDJEQUEyRDt3QkFDM0Qsc0VBQXNFO3dCQUN0RSxNQUFNLFNBQVMsR0FBRyxpQkFBTyxDQUFDLCtCQUErQixDQUFDLFVBQVUsQ0FBQyxDQUFDO3dCQUN0RSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLElBQUksSUFBSSxVQUFVLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7NEJBQ3hELE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7NEJBQ3hGLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO2dDQUNqQixTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQzs0QkFDeEIsQ0FBQzt3QkFDSCxDQUFDO3dCQUNELE1BQU0sQ0FBQyxTQUFTLENBQUM7b0JBQ25CLENBQUMsQ0FBQztpQkFDSDthQUNGLENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMxQixLQUFLOzt3QkFDVCxNQUFNLFVBQVUsQ0FBQyxjQUFjLENBQUM7NEJBQzlCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTzs0QkFDeEIsU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFTO3lCQUM3QixDQUFDLENBQUM7b0JBQ0wsQ0FBQztpQkFBQTtnQkFDRCxRQUFRO29CQUNOLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDeEMsQ0FBQztnQkFDRCxvQ0FBb0M7Z0JBQ3BDLE9BQU8sS0FBSSxDQUFDO2FBQ2IsQ0FBQyxDQUFDLENBQUM7UUFDTixDQUFDO0tBQUE7Q0FDRjtBQS9ERCxvQ0ErREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGludGVyUHVzaFYyQWRhcHRlciBmcm9tICcuL2xpbnRlci1wdXNoLXYyLWFkYXB0ZXInO1xuXG5pbXBvcnQgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5pbXBvcnQgeyBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sIFNlcnZlckNhcGFiaWxpdGllcyB9IGZyb20gJy4uL2xhbmd1YWdlY2xpZW50JztcbmltcG9ydCB7IFRleHRFZGl0b3IsIFJhbmdlIH0gZnJvbSAnYXRvbSc7XG5pbXBvcnQgQ29udmVydCBmcm9tICcuLi9jb252ZXJ0JztcbmltcG9ydCAqIGFzIGF0b21JZGUgZnJvbSAnYXRvbS1pZGUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2RlQWN0aW9uQWRhcHRlciB7XG4gIC8vIFJldHVybnMgYSB7Qm9vbGVhbn0gaW5kaWNhdGluZyB0aGlzIGFkYXB0ZXIgY2FuIGFkYXB0IHRoZSBzZXJ2ZXIgYmFzZWQgb24gdGhlXG4gIC8vIGdpdmVuIHNlcnZlckNhcGFiaWxpdGllcy5cbiAgcHVibGljIHN0YXRpYyBjYW5BZGFwdChzZXJ2ZXJDYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzZXJ2ZXJDYXBhYmlsaXRpZXMuY29kZUFjdGlvblByb3ZpZGVyID09PSB0cnVlO1xuICB9XG5cbiAgLy8gUHVibGljOiBSZXRyaWV2ZXMgY29kZSBhY3Rpb25zIGZvciBhIGdpdmVuIGVkaXRvciwgcmFuZ2UsIGFuZCBjb250ZXh0IChkaWFnbm9zdGljcykuXG4gIC8vIFRocm93cyBhbiBlcnJvciBpZiBjb2RlQWN0aW9uUHJvdmlkZXIgaXMgbm90IGEgcmVnaXN0ZXJlZCBjYXBhYmlsaXR5LlxuICAvL1xuICAvLyAqIGBjb25uZWN0aW9uYCBBIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259IHRvIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgdGhhdCBwcm92aWRlcyBoaWdobGlnaHRzLlxuICAvLyAqIGBzZXJ2ZXJDYXBhYmlsaXRpZXNgIFRoZSB7U2VydmVyQ2FwYWJpbGl0aWVzfSBvZiB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHRoYXQgd2lsbCBiZSB1c2VkLlxuICAvLyAqIGBlZGl0b3JgIFRoZSBBdG9tIHtUZXh0RWRpdG9yfSBjb250YWluaW5nIHRoZSBkaWFnbm9zdGljcy5cbiAgLy8gKiBgcmFuZ2VgIFRoZSBBdG9tIHtSYW5nZX0gdG8gZmV0Y2ggY29kZSBhY3Rpb25zIGZvci5cbiAgLy8gKiBgZGlhZ25vc3RpY3NgIEFuIHtBcnJheTxhdG9tSWRlJERpYWdub3N0aWM+fSB0byBmZXRjaCBjb2RlIGFjdGlvbnMgZm9yLlxuICAvLyAgICAgICAgICAgICAgICAgVGhpcyBpcyB0eXBpY2FsbHkgYSBsaXN0IG9mIGRpYWdub3N0aWNzIGludGVyc2VjdGluZyBgcmFuZ2VgLlxuICAvL1xuICAvLyBSZXR1cm5zIGEge1Byb21pc2V9IG9mIGFuIHtBcnJheX0gb2Yge2F0b21JZGUkQ29kZUFjdGlvbn1zIHRvIGRpc3BsYXkuXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0Q29kZUFjdGlvbnMoXG4gICAgY29ubmVjdGlvbjogTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLFxuICAgIHNlcnZlckNhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzLFxuICAgIGxpbnRlckFkYXB0ZXI6IExpbnRlclB1c2hWMkFkYXB0ZXIgfCB1bmRlZmluZWQgLFxuICAgIGVkaXRvcjogVGV4dEVkaXRvcixcbiAgICByYW5nZTogUmFuZ2UsXG4gICAgZGlhZ25vc3RpY3M6IGF0b21JZGUuRGlhZ25vc3RpY1tdLFxuICApOiBQcm9taXNlPGF0b21JZGUuQ29kZUFjdGlvbltdPiB7XG4gICAgaWYgKGxpbnRlckFkYXB0ZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBhc3NlcnQoc2VydmVyQ2FwYWJpbGl0aWVzLmNvZGVBY3Rpb25Qcm92aWRlciwgJ011c3QgaGF2ZSB0aGUgdGV4dERvY3VtZW50L2NvZGVBY3Rpb24gY2FwYWJpbGl0eScpO1xuICAgIGNvbnN0IGNvbW1hbmRzID0gYXdhaXQgY29ubmVjdGlvbi5jb2RlQWN0aW9uKHtcbiAgICAgIHRleHREb2N1bWVudDogQ29udmVydC5lZGl0b3JUb1RleHREb2N1bWVudElkZW50aWZpZXIoZWRpdG9yKSxcbiAgICAgIHJhbmdlOiBDb252ZXJ0LmF0b21SYW5nZVRvTFNSYW5nZShyYW5nZSksXG4gICAgICBjb250ZXh0OiB7XG4gICAgICAgIGRpYWdub3N0aWNzOiBkaWFnbm9zdGljcy5tYXAoKGRpYWdub3N0aWMpID0+IHtcbiAgICAgICAgICAvLyBSZXRyaWV2ZSB0aGUgc3RvcmVkIGRpYWdub3N0aWMgY29kZSBpZiBpdCBleGlzdHMuXG4gICAgICAgICAgLy8gVW50aWwgdGhlIExpbnRlciBBUEkgcHJvdmlkZXMgYSBwbGFjZSB0byBzdG9yZSB0aGUgY29kZSxcbiAgICAgICAgICAvLyB0aGVyZSdzIG5vIHJlYWwgd2F5IGZvciB0aGUgY29kZSBhY3Rpb25zIEFQSSB0byBnaXZlIGl0IGJhY2sgdG8gdXMuXG4gICAgICAgICAgY29uc3QgY29udmVydGVkID0gQ29udmVydC5hdG9tSWRlRGlhZ25vc3RpY1RvTFNEaWFnbm9zdGljKGRpYWdub3N0aWMpO1xuICAgICAgICAgIGlmIChkaWFnbm9zdGljLnJhbmdlICE9IG51bGwgJiYgZGlhZ25vc3RpYy50ZXh0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBsaW50ZXJBZGFwdGVyLmdldERpYWdub3N0aWNDb2RlKGVkaXRvciwgZGlhZ25vc3RpYy5yYW5nZSwgZGlhZ25vc3RpYy50ZXh0KTtcbiAgICAgICAgICAgIGlmIChjb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgY29udmVydGVkLmNvZGUgPSBjb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY29udmVydGVkO1xuICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbW1hbmRzLm1hcCgoY29tbWFuZCkgPT4gKHtcbiAgICAgIGFzeW5jIGFwcGx5KCkge1xuICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGVDb21tYW5kKHtcbiAgICAgICAgICBjb21tYW5kOiBjb21tYW5kLmNvbW1hbmQsXG4gICAgICAgICAgYXJndW1lbnRzOiBjb21tYW5kLmFyZ3VtZW50cyxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZ2V0VGl0bGUoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29tbWFuZC50aXRsZSk7XG4gICAgICB9LFxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWVtcHR5XG4gICAgICBkaXNwb3NlKCkge30sXG4gICAgfSkpO1xuICB9XG59XG4iXX0=