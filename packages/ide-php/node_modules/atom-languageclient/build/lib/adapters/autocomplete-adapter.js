Object.defineProperty(exports, "__esModule", {
  value: true
});

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Public: Adapts the language server protocol "textDocument/completion" to the Atom
// AutoComplete+ package.
class AutocompleteAdapter {
  static canAdapt(serverCapabilities) {
    return serverCapabilities.completionProvider != null;
  }

  // Public: Primary entry point for obtaining suggestions for AutoComplete+ by
  // querying the language server.
  //
  // * `connection` A {LanguageClientConnection} to the language server to query.
  // * `request` An {Object} with the AutoComplete+ request to satisfy.
  //
  // Returns a {Promise} of an {Array} of {Object}s containing the AutoComplete+
  // suggestions to display.
  async getSuggestions(connection, request) {
    const completionItems = await connection.completion(AutocompleteAdapter.requestToTextDocumentPositionParams(request));
    return AutocompleteAdapter.completionItemsToSuggestions(completionItems, request);
  }

  // Public: Create TextDocumentPositionParams to be sent to the language server
  // based on the editor and position from the AutoCompleteRequest.
  //
  // * `request` An {Object} with the AutoComplete+ request to use.
  //
  // Returns an {Object} containing the TextDocumentPositionParams object with the keys:
  //  * `textDocument` the language server protocol textDocument identification.
  //  * `position` the position within the text document to display completion request for.
  static requestToTextDocumentPositionParams(request) {
    return {
      textDocument: _convert2.default.editorToTextDocumentIdentifier(request.editor),
      position: _convert2.default.pointToPosition(request.bufferPosition)
    };
  }

  // Public: Convert a language server protocol CompletionItem array or CompletionList to
  // an array of ordered AutoComplete+ suggestions.
  //
  // * `completionItems` An {Array} of {CompletionItem} objects or a {CompletionList} containing completion
  //           items to be converted.
  // * `request` An {Object} with the AutoComplete+ request to use.
  //
  // Returns an {Array} of AutoComplete+ suggestions ordered by the CompletionItems sortText.
  static completionItemsToSuggestions(completionItems, request) {
    return (Array.isArray(completionItems) ? completionItems : completionItems.items || []).sort((a, b) => (a.sortText || a.label).localeCompare(b.sortText || b.label)).map(s => AutocompleteAdapter.completionItemToSuggestion(s, request));
  }

  // Public: Convert a language server protocol CompletionItem to an AutoComplete+ suggestion.
  //
  // * `item` An {Array} of {CompletionItem} objects or a {CompletionList} containing completion
  //             items to be converted.
  // * `request` An {Object} with the AutoComplete+ request to use.
  //
  // Returns an AutoComplete+ suggestion.
  static completionItemToSuggestion(item, request) {
    const suggestion = AutocompleteAdapter.basicCompletionItemToSuggestion(item);
    AutocompleteAdapter.applyTextEditToSuggestion(item.textEdit, request.editor, suggestion);
    return suggestion;
  }

  // Public: Convert the primary parts of a language server protocol CompletionItem to an AutoComplete+ suggestion.
  //
  // * `item` An {Array} of {CompletionItem} objects or a {CompletionList} containing completion
  //             items to be converted.
  //
  // Returns an AutoComplete+ suggestion.
  static basicCompletionItemToSuggestion(item) {
    return {
      text: item.insertText || item.label,
      displayText: item.label,
      filterText: item.filterText || item.label,
      snippet: item.insertTextFormat === 2 ? item.insertText : undefined,
      type: AutocompleteAdapter.completionKindToSuggestionType(item.kind),
      rightLabel: item.detail,
      description: item.documentation,
      descriptionMarkdown: item.documentation
    };
  }

  // Public: Applies the textEdit part of a language server protocol CompletionItem to an
  // AutoComplete+ Suggestion via the replacementPrefix and text properties.
  //
  // * `textEdit` A {TextEdit} from a CompletionItem to apply.
  // * `editor` An Atom {TextEditor} used to obtain the necessary text replacement.
  // * `suggestion` An AutoComplete+ suggestion to set the replacementPrefix and text properties of.
  static applyTextEditToSuggestion(textEdit, editor, suggestion) {
    if (textEdit != null) {
      suggestion.replacementPrefix = editor.getTextInBufferRange(_convert2.default.lsRangeToAtomRange(textEdit.range));
      suggestion.text = textEdit.newText;
    }
  }

  // Public: Obtain the textual suggestion type required by AutoComplete+ that
  // most closely maps to the numeric completion kind supplies by the language server.
  //
  // * `kind` A {Number} that represents the suggestion kind to be converted.
  //
  // Returns a {String} containing the AutoComplete+ suggestion type equivalent
  // to the given completion kind.
  static completionKindToSuggestionType(kind) {
    switch (kind) {
      case _languageclient.CompletionItemKind.Method:
        return 'method';
      case _languageclient.CompletionItemKind.Function:
      case _languageclient.CompletionItemKind.Constructor:
        return 'function';
      case _languageclient.CompletionItemKind.Field:
      case _languageclient.CompletionItemKind.Property:
        return 'property';
      case _languageclient.CompletionItemKind.Variable:
        return 'variable';
      case _languageclient.CompletionItemKind.Class:
        return 'class';
      case _languageclient.CompletionItemKind.Interface:
        return 'interface';
      case _languageclient.CompletionItemKind.Module:
        return 'module';
      case _languageclient.CompletionItemKind.Unit:
        return 'builtin';
      case _languageclient.CompletionItemKind.Enum:
        return 'enum';
      case _languageclient.CompletionItemKind.Keyword:
        return 'keyword';
      case _languageclient.CompletionItemKind.Snippet:
        return 'snippet';
      case _languageclient.CompletionItemKind.File:
        return 'import';
      case _languageclient.CompletionItemKind.Reference:
        return 'require';
      default:
        return 'value';
    }
  }
}
exports.default = AutocompleteAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,