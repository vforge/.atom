'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scrollIntoView = scrollIntoView;
exports.scrollIntoViewIfNeeded = scrollIntoViewIfNeeded;
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* globals getComputedStyle */

/**
 * Use these functions instead of `Element::scrollIntoView()` and
 * `Element::scrollIntoViewIfNeeded()`!
 *
 * We've had a recurring issue in Nuclide (e.g. T20028138) where the UI would shift, leaving part of
 * the workspace element offscreen and a blank area in the window. This was caused by called to the
 * native `scrollIntoView()` and `scrollIntoViewIfNeeded()` which, according to the spec, has two
 * potentially surprising behaviors:
 *
 * 1. [It scrolls every scrollable ancestor (not just the closest)][1], where
 * 2. "scrollable" is [explicitly defined][2] to include elements with `overflow: hidden`
 *
 * This is surprising because `overflow: hidden` is typically used to make elements *not
 * scrollable*.
 *
 * Once the `overflow: hidden` element is scrolled, the user has no way to return it to its original
 * position (as it has no scrollbars).
 *
 * Note that this API doesn't support smooth scrolling. If that becomes necessary, we'll need to
 * come up with a better fix.
 *
 * It's tempting to assume that using `scrollIntoViewIfNeeded()` would fix this issue, however, if
 * the window is small enough so that no amount of scrolling the desired scrollable element would
 * ever reveal the element you're trying to, the browser will keep scrolling ancestors.
 *
 * [1]: https://drafts.csswg.org/cssom-view/#element-scrolling-members
 * [2]: https://drafts.csswg.org/cssom-view/#scrolling-box
 */

function scrollIntoView(el, alignToTop) {
  const scrollTops = getOverflowHiddenScrollTops(el);
  el.scrollIntoView(alignToTop); // eslint-disable-line rulesdir/dom-apis
  restoreScrollTops(scrollTops);
}

function scrollIntoViewIfNeeded(el, center) {
  const scrollTops = getOverflowHiddenScrollTops(el);
  // $FlowIgnore: This should be added to the element type.
  el.scrollIntoViewIfNeeded(center); // eslint-disable-line rulesdir/dom-apis
  restoreScrollTops(scrollTops);
}

function getOverflowHiddenScrollTops(el_) {
  let el = el_;
  const scrollTops = new Map();
  while (el != null) {
    if (getComputedStyle(el).overflow === 'hidden') {
      scrollTops.set(el, el.scrollTop);
    }
    el = el.parentElement;
  }
  return scrollTops;
}

function restoreScrollTops(scrollTops) {
  scrollTops.forEach((scrollTop, el) => {
    el.scrollTop = scrollTop;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcm9sbEludG9WaWV3LmpzIl0sIm5hbWVzIjpbInNjcm9sbEludG9WaWV3Iiwic2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCIsImVsIiwiYWxpZ25Ub1RvcCIsInNjcm9sbFRvcHMiLCJnZXRPdmVyZmxvd0hpZGRlblNjcm9sbFRvcHMiLCJyZXN0b3JlU2Nyb2xsVG9wcyIsImNlbnRlciIsImVsXyIsIk1hcCIsImdldENvbXB1dGVkU3R5bGUiLCJvdmVyZmxvdyIsInNldCIsInNjcm9sbFRvcCIsInBhcmVudEVsZW1lbnQiLCJmb3JFYWNoIl0sIm1hcHBpbmdzIjoiOzs7OztRQTJDZ0JBLGMsR0FBQUEsYztRQU1BQyxzQixHQUFBQSxzQjtBQWpEaEI7Ozs7Ozs7Ozs7OztBQVlBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCTyxTQUFTRCxjQUFULENBQXdCRSxFQUF4QixFQUFxQ0MsVUFBckMsRUFBaUU7QUFDdEUsUUFBTUMsYUFBYUMsNEJBQTRCSCxFQUE1QixDQUFuQjtBQUNBQSxLQUFHRixjQUFILENBQWtCRyxVQUFsQixFQUZzRSxDQUV2QztBQUMvQkcsb0JBQWtCRixVQUFsQjtBQUNEOztBQUVNLFNBQVNILHNCQUFULENBQWdDQyxFQUFoQyxFQUE2Q0ssTUFBN0MsRUFBcUU7QUFDMUUsUUFBTUgsYUFBYUMsNEJBQTRCSCxFQUE1QixDQUFuQjtBQUNBO0FBQ0FBLEtBQUdELHNCQUFILENBQTBCTSxNQUExQixFQUgwRSxDQUd2QztBQUNuQ0Qsb0JBQWtCRixVQUFsQjtBQUNEOztBQUVELFNBQVNDLDJCQUFULENBQXFDRyxHQUFyQyxFQUF5RTtBQUN2RSxNQUFJTixLQUFLTSxHQUFUO0FBQ0EsUUFBTUosYUFBYSxJQUFJSyxHQUFKLEVBQW5CO0FBQ0EsU0FBT1AsTUFBTSxJQUFiLEVBQW1CO0FBQ2pCLFFBQUlRLGlCQUFpQlIsRUFBakIsRUFBcUJTLFFBQXJCLEtBQWtDLFFBQXRDLEVBQWdEO0FBQzlDUCxpQkFBV1EsR0FBWCxDQUFlVixFQUFmLEVBQW1CQSxHQUFHVyxTQUF0QjtBQUNEO0FBQ0RYLFNBQUtBLEdBQUdZLGFBQVI7QUFDRDtBQUNELFNBQU9WLFVBQVA7QUFDRDs7QUFFRCxTQUFTRSxpQkFBVCxDQUEyQkYsVUFBM0IsRUFBbUU7QUFDakVBLGFBQVdXLE9BQVgsQ0FBbUIsQ0FBQ0YsU0FBRCxFQUFZWCxFQUFaLEtBQW1CO0FBQ3BDQSxPQUFHVyxTQUFILEdBQWVBLFNBQWY7QUFDRCxHQUZEO0FBR0QiLCJmaWxlIjoic2Nyb2xsSW50b1ZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4vKiBnbG9iYWxzIGdldENvbXB1dGVkU3R5bGUgKi9cblxuLyoqXG4gKiBVc2UgdGhlc2UgZnVuY3Rpb25zIGluc3RlYWQgb2YgYEVsZW1lbnQ6OnNjcm9sbEludG9WaWV3KClgIGFuZFxuICogYEVsZW1lbnQ6OnNjcm9sbEludG9WaWV3SWZOZWVkZWQoKWAhXG4gKlxuICogV2UndmUgaGFkIGEgcmVjdXJyaW5nIGlzc3VlIGluIE51Y2xpZGUgKGUuZy4gVDIwMDI4MTM4KSB3aGVyZSB0aGUgVUkgd291bGQgc2hpZnQsIGxlYXZpbmcgcGFydCBvZlxuICogdGhlIHdvcmtzcGFjZSBlbGVtZW50IG9mZnNjcmVlbiBhbmQgYSBibGFuayBhcmVhIGluIHRoZSB3aW5kb3cuIFRoaXMgd2FzIGNhdXNlZCBieSBjYWxsZWQgdG8gdGhlXG4gKiBuYXRpdmUgYHNjcm9sbEludG9WaWV3KClgIGFuZCBgc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCgpYCB3aGljaCwgYWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBoYXMgdHdvXG4gKiBwb3RlbnRpYWxseSBzdXJwcmlzaW5nIGJlaGF2aW9yczpcbiAqXG4gKiAxLiBbSXQgc2Nyb2xscyBldmVyeSBzY3JvbGxhYmxlIGFuY2VzdG9yIChub3QganVzdCB0aGUgY2xvc2VzdCldWzFdLCB3aGVyZVxuICogMi4gXCJzY3JvbGxhYmxlXCIgaXMgW2V4cGxpY2l0bHkgZGVmaW5lZF1bMl0gdG8gaW5jbHVkZSBlbGVtZW50cyB3aXRoIGBvdmVyZmxvdzogaGlkZGVuYFxuICpcbiAqIFRoaXMgaXMgc3VycHJpc2luZyBiZWNhdXNlIGBvdmVyZmxvdzogaGlkZGVuYCBpcyB0eXBpY2FsbHkgdXNlZCB0byBtYWtlIGVsZW1lbnRzICpub3RcbiAqIHNjcm9sbGFibGUqLlxuICpcbiAqIE9uY2UgdGhlIGBvdmVyZmxvdzogaGlkZGVuYCBlbGVtZW50IGlzIHNjcm9sbGVkLCB0aGUgdXNlciBoYXMgbm8gd2F5IHRvIHJldHVybiBpdCB0byBpdHMgb3JpZ2luYWxcbiAqIHBvc2l0aW9uIChhcyBpdCBoYXMgbm8gc2Nyb2xsYmFycykuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgQVBJIGRvZXNuJ3Qgc3VwcG9ydCBzbW9vdGggc2Nyb2xsaW5nLiBJZiB0aGF0IGJlY29tZXMgbmVjZXNzYXJ5LCB3ZSdsbCBuZWVkIHRvXG4gKiBjb21lIHVwIHdpdGggYSBiZXR0ZXIgZml4LlxuICpcbiAqIEl0J3MgdGVtcHRpbmcgdG8gYXNzdW1lIHRoYXQgdXNpbmcgYHNjcm9sbEludG9WaWV3SWZOZWVkZWQoKWAgd291bGQgZml4IHRoaXMgaXNzdWUsIGhvd2V2ZXIsIGlmXG4gKiB0aGUgd2luZG93IGlzIHNtYWxsIGVub3VnaCBzbyB0aGF0IG5vIGFtb3VudCBvZiBzY3JvbGxpbmcgdGhlIGRlc2lyZWQgc2Nyb2xsYWJsZSBlbGVtZW50IHdvdWxkXG4gKiBldmVyIHJldmVhbCB0aGUgZWxlbWVudCB5b3UncmUgdHJ5aW5nIHRvLCB0aGUgYnJvd3NlciB3aWxsIGtlZXAgc2Nyb2xsaW5nIGFuY2VzdG9ycy5cbiAqXG4gKiBbMV06IGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS12aWV3LyNlbGVtZW50LXNjcm9sbGluZy1tZW1iZXJzXG4gKiBbMl06IGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS12aWV3LyNzY3JvbGxpbmctYm94XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KGVsOiBFbGVtZW50LCBhbGlnblRvVG9wPzogYm9vbGVhbik6IHZvaWQge1xuICBjb25zdCBzY3JvbGxUb3BzID0gZ2V0T3ZlcmZsb3dIaWRkZW5TY3JvbGxUb3BzKGVsKTtcbiAgZWwuc2Nyb2xsSW50b1ZpZXcoYWxpZ25Ub1RvcCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcnVsZXNkaXIvZG9tLWFwaXNcbiAgcmVzdG9yZVNjcm9sbFRvcHMoc2Nyb2xsVG9wcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxJbnRvVmlld0lmTmVlZGVkKGVsOiBFbGVtZW50LCBjZW50ZXI/OiBib29sZWFuKTogdm9pZCB7XG4gIGNvbnN0IHNjcm9sbFRvcHMgPSBnZXRPdmVyZmxvd0hpZGRlblNjcm9sbFRvcHMoZWwpO1xuICAvLyAkRmxvd0lnbm9yZTogVGhpcyBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQgdHlwZS5cbiAgZWwuc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZChjZW50ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJ1bGVzZGlyL2RvbS1hcGlzXG4gIHJlc3RvcmVTY3JvbGxUb3BzKHNjcm9sbFRvcHMpO1xufVxuXG5mdW5jdGlvbiBnZXRPdmVyZmxvd0hpZGRlblNjcm9sbFRvcHMoZWxfOiBFbGVtZW50KTogTWFwPEVsZW1lbnQsIG51bWJlcj4ge1xuICBsZXQgZWwgPSBlbF87XG4gIGNvbnN0IHNjcm9sbFRvcHMgPSBuZXcgTWFwKCk7XG4gIHdoaWxlIChlbCAhPSBudWxsKSB7XG4gICAgaWYgKGdldENvbXB1dGVkU3R5bGUoZWwpLm92ZXJmbG93ID09PSAnaGlkZGVuJykge1xuICAgICAgc2Nyb2xsVG9wcy5zZXQoZWwsIGVsLnNjcm9sbFRvcCk7XG4gICAgfVxuICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gc2Nyb2xsVG9wcztcbn1cblxuZnVuY3Rpb24gcmVzdG9yZVNjcm9sbFRvcHMoc2Nyb2xsVG9wczogTWFwPEVsZW1lbnQsIG51bWJlcj4pOiB2b2lkIHtcbiAgc2Nyb2xsVG9wcy5mb3JFYWNoKChzY3JvbGxUb3AsIGVsKSA9PiB7XG4gICAgZWwuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICB9KTtcbn1cbiJdfQ==