"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const js_beautify_1 = require("js-beautify");
const formatterOptions_1 = require("./formatterOptions");
const _ = require("lodash");
const strings_1 = require("../../../utils/strings");
function htmlFormat(document, currRange, formattingOptions) {
    const { value, range } = getValueAndRange(document, currRange);
    formatterOptions_1.defaultHtmlOptions.indent_with_tabs = !formattingOptions.insertSpaces;
    formatterOptions_1.defaultHtmlOptions.indent_size = formattingOptions.tabSize;
    let htmlFormattingOptions = formatterOptions_1.defaultHtmlOptions;
    if (formattingOptions.html) {
        htmlFormattingOptions = _.assign(formatterOptions_1.defaultHtmlOptions, formattingOptions.html);
    }
    const beautifiedHtml = js_beautify_1.html(value, htmlFormattingOptions);
    const wrappedHtml = strings_1.wrapSection(beautifiedHtml, /*needIndent*/ true, formattingOptions);
    return [{
            range,
            newText: wrappedHtml
        }];
}
exports.htmlFormat = htmlFormat;
function getValueAndRange(document, currRange) {
    let value = document.getText();
    let range = currRange;
    let includesEnd = true;
    if (currRange) {
        const startOffset = document.offsetAt(currRange.start);
        const endOffset = document.offsetAt(currRange.end);
        includesEnd = endOffset === value.length;
        value = value.substring(startOffset, endOffset);
    }
    else {
        range = vscode_languageserver_types_1.Range.create(vscode_languageserver_types_1.Position.create(0, 0), document.positionAt(value.length));
    }
    return { value, range };
}
//# sourceMappingURL=formatters.js.map