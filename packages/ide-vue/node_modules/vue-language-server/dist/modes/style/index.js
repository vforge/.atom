"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const vscode_css_languageservice_1 = require("vscode-css-languageservice");
const _ = require("lodash");
const js_beautify_1 = require("js-beautify");
const emmet = require("vscode-emmet-helper");
const emmet_1 = require("./emmet");
const languageModelCache_1 = require("../languageModelCache");
const defaultOption_1 = require("./defaultOption");
const strings_1 = require("../../utils/strings");
function getCSSMode(documentRegions) {
    const languageService = vscode_css_languageservice_1.getCSSLanguageService();
    return getStyleMode('css', languageService, documentRegions);
}
exports.getCSSMode = getCSSMode;
function getPostCSSMode(documentRegions) {
    const languageService = vscode_css_languageservice_1.getCSSLanguageService();
    return getStyleMode('postcss', languageService, documentRegions);
}
exports.getPostCSSMode = getPostCSSMode;
function getSCSSMode(documentRegions) {
    const languageService = vscode_css_languageservice_1.getSCSSLanguageService();
    return getStyleMode('scss', languageService, documentRegions);
}
exports.getSCSSMode = getSCSSMode;
function getLESSMode(documentRegions) {
    const languageService = vscode_css_languageservice_1.getLESSLanguageService();
    return getStyleMode('less', languageService, documentRegions);
}
exports.getLESSMode = getLESSMode;
function getStyleMode(languageId, languageService, documentRegions) {
    const embeddedDocuments = languageModelCache_1.getLanguageModelCache(10, 60, document => documentRegions.get(document).getEmbeddedDocument(languageId));
    const stylesheets = languageModelCache_1.getLanguageModelCache(10, 60, document => languageService.parseStylesheet(document));
    return {
        getId() {
            return languageId;
        },
        configure(config) {
            languageService.configure(config && config.css);
        },
        doValidation(document) {
            const embedded = embeddedDocuments.get(document);
            return languageService.doValidation(embedded, stylesheets.get(embedded));
        },
        doComplete(document, position) {
            const embedded = embeddedDocuments.get(document);
            const emmetSyntax = languageId === 'postcss' ? 'css' : languageId;
            const emmetCompletions = emmet.doComplete(document, position, emmetSyntax, {
                useNewEmmet: true,
                showExpandedAbbreviation: true,
                showAbbreviationSuggestions: true,
                syntaxProfiles: {},
                variables: {}
            });
            const emmetItems = _.map(emmetCompletions.items, i => {
                return Object.assign({}, i, { sortText: emmet_1.Priority.Emmet + i.label });
            });
            const lsCompletions = languageService.doComplete(embedded, position, stylesheets.get(embedded));
            const lsItems = _.map(lsCompletions.items, i => {
                return Object.assign({}, i, { sortText: emmet_1.Priority.Platform + i.label });
            });
            return {
                isIncomplete: true,
                items: _.concat(emmetItems, lsItems)
            };
        },
        doHover(document, position) {
            const embedded = embeddedDocuments.get(document);
            return languageService.doHover(embedded, position, stylesheets.get(embedded));
        },
        findDocumentHighlight(document, position) {
            const embedded = embeddedDocuments.get(document);
            return languageService.findDocumentHighlights(embedded, position, stylesheets.get(embedded));
        },
        findDocumentSymbols(document) {
            const embedded = embeddedDocuments.get(document);
            return languageService.findDocumentSymbols(embedded, stylesheets.get(embedded));
        },
        findDefinition(document, position) {
            const embedded = embeddedDocuments.get(document);
            return languageService.findDefinition(embedded, position, stylesheets.get(embedded));
        },
        findReferences(document, position) {
            const embedded = embeddedDocuments.get(document);
            return languageService.findReferences(embedded, position, stylesheets.get(embedded));
        },
        findColorSymbols(document) {
            const embedded = embeddedDocuments.get(document);
            return languageService.findColorSymbols(embedded, stylesheets.get(embedded));
        },
        format(document, range, formattingOptions) {
            return cssFormat(document, range, formattingOptions);
        },
        onDocumentRemoved(document) {
            embeddedDocuments.onDocumentRemoved(document);
            stylesheets.onDocumentRemoved(document);
        },
        dispose() {
            embeddedDocuments.dispose();
            stylesheets.dispose();
        }
    };
}
function cssFormat(document, currRange, formattingOptions) {
    const { value, range } = getValueAndRange(document, currRange);
    defaultOption_1.defaultCssOptions.indent_with_tabs = !formattingOptions.insertSpaces;
    defaultOption_1.defaultCssOptions.indent_size = formattingOptions.tabSize;
    let cssFormattingOptions = defaultOption_1.defaultCssOptions;
    if (formattingOptions.css) {
        cssFormattingOptions = _.assign(defaultOption_1.defaultCssOptions, formattingOptions.css);
    }
    const beautifiedCss = js_beautify_1.css(value, cssFormattingOptions);
    const needIndent = !!formattingOptions.styleInitialIndent;
    const wrappedCss = strings_1.wrapSection(beautifiedCss, needIndent, formattingOptions);
    return [
        {
            range,
            newText: wrappedCss
        }
    ];
}
exports.cssFormat = cssFormat;
function getValueAndRange(document, currRange) {
    let value = document.getText();
    let range = currRange;
    let includesEnd = true;
    if (currRange) {
        const startOffset = document.offsetAt(currRange.start);
        const endOffset = document.offsetAt(currRange.end);
        includesEnd = endOffset === value.length;
        value = value.substring(startOffset, endOffset);
    }
    else {
        range = vscode_languageserver_types_1.Range.create(vscode_languageserver_types_1.Position.create(0, 0), document.positionAt(value.length));
    }
    return { value, range };
}
//# sourceMappingURL=index.js.map