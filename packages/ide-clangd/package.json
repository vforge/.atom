{
  "_args": [
    [
      {
        "raw": "/private/var/folders/98/ljr9tzhs7mq7hbjtsxrjqr8h0000gn/T/d-118216-83195-1zgpls.irhc6561or/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/98/ljr9tzhs7mq7hbjtsxrjqr8h0000gn/T/d-118216-83195-1zgpls.irhc6561or/package.tgz",
        "spec": "/private/var/folders/98/ljr9tzhs7mq7hbjtsxrjqr8h0000gn/T/d-118216-83195-1zgpls.irhc6561or/package.tgz",
        "type": "local"
      },
      "/private/var/folders/98/ljr9tzhs7mq7hbjtsxrjqr8h0000gn/T/apm-install-dir-118216-83195-i0lpyu.k8nbhgp66r"
    ]
  ],
  "_from": "../d-118216-83195-1zgpls.irhc6561or/package.tgz",
  "_id": "ide-clangd@0.3.0",
  "_inCache": true,
  "_location": "/ide-clangd",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/98/ljr9tzhs7mq7hbjtsxrjqr8h0000gn/T/d-118216-83195-1zgpls.irhc6561or/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/98/ljr9tzhs7mq7hbjtsxrjqr8h0000gn/T/d-118216-83195-1zgpls.irhc6561or/package.tgz",
    "spec": "/private/var/folders/98/ljr9tzhs7mq7hbjtsxrjqr8h0000gn/T/d-118216-83195-1zgpls.irhc6561or/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-118216-83195-1zgpls.irhc6561or/package.tgz",
  "_shasum": "a299ed54db8e2c29806e55ab1bfd86c147421fc9",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/98/ljr9tzhs7mq7hbjtsxrjqr8h0000gn/T/d-118216-83195-1zgpls.irhc6561or/package.tgz",
  "_where": "/private/var/folders/98/ljr9tzhs7mq7hbjtsxrjqr8h0000gn/T/apm-install-dir-118216-83195-i0lpyu.k8nbhgp66r",
  "author": {
    "name": "Joshua Breeden",
    "email": "jbreeden@me.com"
  },
  "bugs": {
    "url": "https://github.com/jbree/ide-clangd/issues"
  },
  "consumedServices": {
    "linter-indie": {
      "versions": {
        "2.0.0": "consumeLinterV2"
      }
    },
    "datatip": {
      "versions": {
        "0.1.0": "consumeDatatip"
      }
    }
  },
  "dependencies": {
    "atom-languageclient": "^0.9.4"
  },
  "description": "C/C++ language support for Atom IDE",
  "devDependencies": {},
  "engines ": {
    "atom": ">=1.21.0"
  },
  "enhancedScopes": [
    "source.c",
    "source.cpp"
  ],
  "homepage": "https://github.com/jbree/ide-clangd#readme",
  "keywords": [
    "atom-ide",
    "ide",
    "c",
    "c++",
    "cpp",
    "clang",
    "clangd",
    "languageserver",
    "language-server-protocol",
    "language-client"
  ],
  "license": "MIT",
  "main": "lib/main.js",
  "name": "ide-clangd",
  "optionalDependencies": {},
  "providedServices": {
    "autocomplete.provider": {
      "versions": {
        "2.0.0": "provideAutocomplete"
      }
    },
    "code-actions": {
      "versions": {
        "0.1.0": "provideCodeActions"
      }
    },
    "code-format.range": {
      "versions": {
        "0.1.0": "provideCodeFormat"
      }
    },
    "code-highlight": {
      "versions": {
        "0.1.0": "provideCodeHighlight"
      }
    },
    "definitions": {
      "versions": {
        "0.1.0": "provideDefinitions"
      }
    },
    "signature-help": {
      "versions": {
        "0.1.0": "provideSignatureHelp"
      }
    }
  },
  "readme": "# ide-clangd\n\nProvides C and C++ language support for [Atom][atom] using\n[Clangd language server](clangd)\n\n## About\n\nThis plugin only provides some of the functionality designated by the language\nserver protocol. This plugin currently enables many of the features supported by Clangd:\n+ Diagnostics (errors, warnings, info)\n+ Code Formatting\n+ Completion\n+ Fix-its\n+ Function signature help\n+ Document highlights\n+ ~~Go To Definition~~ (it will go to the declaration, but not the definition)\n+ ~~Rename~~ (not yet supported by Atom)\n\nAll contributions and feedback are appreciated.\n\n## Requirements\n\n+ [Atom 1.21-beta][atom]\n+ [atom-ide-ui][atom-ide-ui] atom plugin\n+ Clangd executable installed in your path ([prebuilt binaries][llvm-releases])\n\n## Additional Notes\n\n### compile_commands.json\n+ In order to make this plugin work effectively, you need to generate a compile_commands.json file in a place where clangd can find it (project root). CMake is currently your best bet for making that happen. If you're doing an out-of-source build and you're already in your `project/build` directory, the CMake command to generate compile_commands.json along with your project looks like this: `cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON`\n\nClangd won't see your compile_commands.json file if you do an out of source build like this, though. The best solution I've come up with so far is to symlink compile_commands.json from my build directory to my project root with `ln -s build/compile_commands.json .`\n\n## Areas of interest\n\n+ `clang-format` supports a plethora of formatting options. Need to figure out\nhow to use `.clang-format` options with Clangd.\n+ Automatic installation of Clangd\n\n[atom]: http://atom.io/beta\n[clangd]: https://clang.llvm.org/extra/clangd.html\n[langserver]: http://langserver.org\n[llvm-releases]: http://releases.llvm.org/download.html\n[atom-ide-ui]: https://atom.io/packages/atom-ide-ui\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jbree/ide-clangd.git"
  },
  "version": "0.3.0"
}
