"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const convert_1 = require("../convert");
const languageclient_1 = require("../languageclient");
const atom_1 = require("atom");
// Public: Synchronizes the documents between Atom and the language server by notifying
// each end of changes, opening, closing and other events as well as sending and applying
// changes either in whole or in part depending on what the language server supports.
class DocumentSyncAdapter {
    // Public: Create a new {DocumentSyncAdapter} for the given language server.
    //
    // * `connection` A {LanguageClientConnection} to the language server to be kept in sync.
    // * `documentSyncKind` The type of document syncing supported - Full or Incremental.
    // * `editorSelector` A predicate function that takes a {TextEditor} and returns a {boolean}
    //                    indicating whether this adapter should care about the contents of the editor.
    constructor(connection, documentSyncKind, editorSelector) {
        this._disposable = new atom_1.CompositeDisposable();
        this._editors = new WeakMap();
        this._versions = new Map();
        this._connection = connection;
        if (typeof documentSyncKind === 'number') {
            this._documentSyncKind = documentSyncKind;
        }
        else if (documentSyncKind != null && documentSyncKind.change != null) {
            this._documentSyncKind = documentSyncKind.change;
        }
        else {
            this._documentSyncKind = languageclient_1.TextDocumentSyncKind.Full;
        }
        this._editorSelector = editorSelector;
        this._disposable.add(atom.textEditors.observe(this.observeTextEditor.bind(this)));
    }
    // Public: Determine whether this adapter can be used to adapt a language server
    // based on the serverCapabilities matrix textDocumentSync capability either being Full or
    // Incremental.
    //
    // * `serverCapabilities` The {ServerCapabilities} of the language server to consider.
    //
    // Returns a {Boolean} indicating adapter can adapt the server based on the
    // given serverCapabilities.
    static canAdapt(serverCapabilities) {
        return this.canAdaptV2(serverCapabilities) || this.canAdaptV3(serverCapabilities);
    }
    static canAdaptV2(serverCapabilities) {
        return (serverCapabilities.textDocumentSync === languageclient_1.TextDocumentSyncKind.Incremental ||
            serverCapabilities.textDocumentSync === languageclient_1.TextDocumentSyncKind.Full);
    }
    static canAdaptV3(serverCapabilities) {
        const options = serverCapabilities.textDocumentSync;
        return (options !== null &&
            typeof options === 'object' &&
            (options.change === languageclient_1.TextDocumentSyncKind.Incremental || options.change === languageclient_1.TextDocumentSyncKind.Full));
    }
    // Dispose this adapter ensuring any resources are freed and events unhooked.
    dispose() {
        this._disposable.dispose();
    }
    // Examine a {TextEditor} and decide if we wish to observe it. If so ensure that we stop observing it
    // when it is closed or otherwise destroyed.
    //
    // * `editor` A {TextEditor} to consider for observation.
    observeTextEditor(editor) {
        const listener = editor.observeGrammar((grammar) => this._handleGrammarChange(editor));
        this._disposable.add(editor.onDidDestroy(() => {
            this._disposable.remove(listener);
            listener.dispose();
        }));
        this._disposable.add(listener);
        if (!this._editors.has(editor) && this._editorSelector(editor)) {
            this._handleNewEditor(editor);
        }
    }
    _handleGrammarChange(editor) {
        const sync = this._editors.get(editor);
        if (sync != null && !this._editorSelector(editor)) {
            this._editors.delete(editor);
            this._disposable.remove(sync);
            sync.dispose();
        }
        else if (sync == null && this._editorSelector(editor)) {
            this._handleNewEditor(editor);
        }
    }
    _handleNewEditor(editor) {
        const sync = new TextEditorSyncAdapter(editor, this._connection, this._documentSyncKind, this._versions);
        this._editors.set(editor, sync);
        this._disposable.add(sync);
        this._disposable.add(editor.onDidDestroy(() => {
            const destroyedSync = this._editors.get(editor);
            if (destroyedSync) {
                this._editors.delete(editor);
                this._disposable.remove(destroyedSync);
                destroyedSync.dispose();
            }
        }));
    }
    getEditorSyncAdapter(editor) {
        return this._editors.get(editor);
    }
}
exports.default = DocumentSyncAdapter;
// Public: Keep a single {TextEditor} in sync with a given language server.
class TextEditorSyncAdapter {
    // Public: Create a {TextEditorSyncAdapter} in sync with a given language server.
    //
    // * `editor` A {TextEditor} to keep in sync.
    // * `connection` A {LanguageClientConnection} to a language server to keep in sync.
    // * `documentSyncKind` Whether to use Full (1) or Incremental (2) when sending changes.
    constructor(editor, connection, documentSyncKind, versions) {
        this._disposable = new atom_1.CompositeDisposable();
        this._editor = editor;
        this._connection = connection;
        this._versions = versions;
        this._fakeDidChangeWatchedFiles = atom.project.onDidChangeFiles == null;
        const changeTracking = this.setupChangeTracking(documentSyncKind);
        if (changeTracking != null) {
            this._disposable.add(changeTracking);
        }
        this._disposable.add(editor.getBuffer().onWillSave(this.willSave.bind(this)), editor.onDidSave(this.didSave.bind(this)), editor.onDidDestroy(this.didClose.bind(this)), editor.onDidChangePath(this.didRename.bind(this)));
        this._currentUri = this.getEditorUri();
        this.didOpen();
    }
    // The change tracking disposable listener that will ensure that changes are sent to the
    // language server as appropriate.
    setupChangeTracking(documentSyncKind) {
        switch (documentSyncKind) {
            case languageclient_1.TextDocumentSyncKind.Full:
                return this._editor.onDidChange(this.sendFullChanges.bind(this));
            case languageclient_1.TextDocumentSyncKind.Incremental:
                return this._editor.getBuffer().onDidChangeText(this.sendIncrementalChanges.bind(this));
        }
        return null;
    }
    // Dispose this adapter ensuring any resources are freed and events unhooked.
    dispose() {
        this._disposable.dispose();
    }
    // Get the languageId field that will be sent to the language server by simply
    // using the grammar name.
    getLanguageId() {
        return this._editor.getGrammar().name;
    }
    // Public: Create a {VersionedTextDocumentIdentifier} for the document observed by
    // this adapter including both the Uri and the current Version.
    getVersionedTextDocumentIdentifier() {
        return {
            uri: this.getEditorUri(),
            version: this._getVersion(this._editor.getPath() || ''),
        };
    }
    // Public: Send the entire document to the language server. This is used when
    // operating in Full (1) sync mode.
    sendFullChanges() {
        if (!this._isPrimaryAdapter()) {
            return;
        } // Multiple editors, we are not first
        this._bumpVersion();
        this._connection.didChangeTextDocument({
            textDocument: this.getVersionedTextDocumentIdentifier(),
            contentChanges: [{ text: this._editor.getText() }],
        });
    }
    // Public: Send the incremental text changes to the language server. This is used
    // when operating in Incremental (2) sync mode.
    //
    // * `event` The event fired by Atom to indicate the document has stopped changing
    //           including a list of changes since the last time this event fired for this
    //           text editor.
    // Note: The order of changes in the event is guaranteed top to bottom.  Language server
    // expects this in reverse.
    sendIncrementalChanges(event) {
        if (event.changes.length > 0) {
            if (!this._isPrimaryAdapter()) {
                return;
            } // Multiple editors, we are not first
            this._bumpVersion();
            this._connection.didChangeTextDocument({
                textDocument: this.getVersionedTextDocumentIdentifier(),
                contentChanges: event.changes.map(TextEditorSyncAdapter.textEditToContentChange).reverse(),
            });
        }
    }
    // Public: Convert an Atom {TextEditEvent} to a language server {TextDocumentContentChangeEvent}
    // object.
    //
    // * `change` The Atom {TextEditEvent} to convert.
    //
    // Returns a {TextDocumentContentChangeEvent} that represents the converted {TextEditEvent}.
    static textEditToContentChange(change) {
        return {
            range: convert_1.default.atomRangeToLSRange(change.oldRange),
            rangeLength: change.oldText.length,
            text: change.newText,
        };
    }
    _isPrimaryAdapter() {
        const lowestIdForBuffer = Math.min(...atom.workspace
            .getTextEditors()
            .filter((t) => t.getBuffer() === this._editor.getBuffer())
            .map((t) => t.id));
        return lowestIdForBuffer === this._editor.id;
    }
    _bumpVersion() {
        const filePath = this._editor.getPath();
        if (filePath == null) {
            return;
        }
        this._versions.set(filePath, this._getVersion(filePath) + 1);
    }
    // Ensure when the document is opened we send notification to the language server
    // so it can load it in and keep track of diagnostics etc.
    didOpen() {
        const filePath = this._editor.getPath();
        if (filePath == null) {
            return;
        } // Not yet saved
        if (!this._isPrimaryAdapter()) {
            return;
        } // Multiple editors, we are not first
        this._connection.didOpenTextDocument({
            textDocument: {
                uri: this.getEditorUri(),
                languageId: this.getLanguageId().toLowerCase(),
                version: this._getVersion(filePath),
                text: this._editor.getText(),
            },
        });
    }
    _getVersion(filePath) {
        return this._versions.get(filePath) || 1;
    }
    // Called when the {TextEditor} is closed and sends the 'didCloseTextDocument' notification to
    // the connected language server.
    didClose() {
        if (this._editor.getPath() == null) {
            return;
        } // Not yet saved
        const fileStillOpen = atom.workspace.getTextEditors().find((t) => t.getBuffer() === this._editor.getBuffer());
        if (fileStillOpen) {
            return; // Other windows or editors still have this file open
        }
        this._connection.didCloseTextDocument({ textDocument: { uri: this.getEditorUri() } });
    }
    // Called just before the {TextEditor} saves and sends the 'willSaveTextDocument' notification to
    // the connected language server.
    willSave() {
        if (!this._isPrimaryAdapter()) {
            return;
        }
        const uri = this.getEditorUri();
        this._connection.willSaveTextDocument({
            textDocument: { uri },
            reason: languageclient_1.TextDocumentSaveReason.Manual,
        });
    }
    // Called when the {TextEditor} saves and sends the 'didSaveTextDocument' notification to
    // the connected language server.
    // Note: Right now this also sends the `didChangeWatchedFiles` notification as well but that
    // will be sent from elsewhere soon.
    didSave() {
        if (!this._isPrimaryAdapter()) {
            return;
        }
        const uri = this.getEditorUri();
        this._connection.didSaveTextDocument({ textDocument: { uri, version: this._getVersion((uri)) } });
        if (this._fakeDidChangeWatchedFiles) {
            this._connection.didChangeWatchedFiles({
                changes: [{ uri, type: languageclient_1.FileChangeType.Changed }],
            });
        }
    }
    didRename() {
        if (!this._isPrimaryAdapter()) {
            return;
        }
        const oldUri = this._currentUri;
        this._currentUri = this.getEditorUri();
        if (!oldUri) {
            return; // Didn't previously have a name
        }
        this._connection.didCloseTextDocument({
            textDocument: { uri: oldUri },
        });
        if (this._fakeDidChangeWatchedFiles) {
            this._connection.didChangeWatchedFiles({
                changes: [{ uri: oldUri, type: languageclient_1.FileChangeType.Deleted }, { uri: this._currentUri, type: languageclient_1.FileChangeType.Created }],
            });
        }
        // Send an equivalent open event for this editor, which will now use the new
        // file path.
        this.didOpen();
    }
    // Public: Obtain the current {TextEditor} path and convert it to a Uri.
    getEditorUri() {
        return convert_1.default.pathToUri(this._editor.getPath() || '');
    }
}
exports.TextEditorSyncAdapter = TextEditorSyncAdapter;
//# sourceMappingURL=data:application/json;base64,