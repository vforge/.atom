"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const linter_push_v2_adapter_1 = require("../../lib/adapters/linter-push-v2-adapter");
const ls = require("../../lib/languageclient");
const chai_1 = require("chai");
const atom_1 = require("atom");
const messageUrl = 'dummy';
const messageSolutions = ['dummy'];
class CustomLinterPushV2Adapter extends linter_push_v2_adapter_1.default {
    diagnosticToV2Message(path, diagnostic) {
        const message = super.diagnosticToV2Message(path, diagnostic);
        message.url = messageUrl;
        message.solutions = messageSolutions;
        return message;
    }
}
describe('CustomLinterPushV2Adapter', () => {
    describe('diagnosticToMessage', () => {
        it('converts Diagnostic and path to a linter$Message', () => {
            const filePath = '/a/b/c/d';
            const diagnostic = {
                message: 'This is a message',
                range: {
                    start: { line: 1, character: 2 },
                    end: { line: 3, character: 4 },
                },
                source: 'source',
                code: 'code',
                severity: ls.DiagnosticSeverity.Information,
            };
            const connection = { onPublishDiagnostics() { } };
            const adapter = new CustomLinterPushV2Adapter(connection);
            const result = adapter.diagnosticToV2Message(filePath, diagnostic);
            chai_1.expect(result.excerpt).equals(diagnostic.message);
            chai_1.expect(result.linterName).equals(diagnostic.source);
            chai_1.expect(result.location.file).equals(filePath);
            chai_1.expect(result.location.position).deep.equals(new atom_1.Range(new atom_1.Point(1, 2), new atom_1.Point(3, 4)));
            chai_1.expect(result.severity).equals('info');
            chai_1.expect(result.url).equals(messageUrl);
            chai_1.expect(result.solutions).deep.equals(messageSolutions);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWxpbnRlci1wdXNoLXYyLWFkYXB0ZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvY3VzdG9tLWxpbnRlci1wdXNoLXYyLWFkYXB0ZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNGQUE0RTtBQUM1RSwrQ0FBK0M7QUFDL0MsK0JBQThCO0FBQzlCLCtCQUFvQztBQUVwQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUM7QUFDM0IsTUFBTSxnQkFBZ0IsR0FBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRTFDLCtCQUFnQyxTQUFRLGdDQUFtQjtJQUNsRCxxQkFBcUIsQ0FBQyxJQUFZLEVBQUUsVUFBeUI7UUFDbEUsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM5RCxPQUFPLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQztRQUN6QixPQUFPLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDakIsQ0FBQztDQUNGO0FBRUQsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtJQUN6QyxRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO1FBQ25DLEVBQUUsQ0FBQyxrREFBa0QsRUFBRSxHQUFHLEVBQUU7WUFDMUQsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDO1lBQzVCLE1BQU0sVUFBVSxHQUFrQjtnQkFDaEMsT0FBTyxFQUFFLG1CQUFtQjtnQkFDNUIsS0FBSyxFQUFFO29CQUNMLEtBQUssRUFBRSxFQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBQztvQkFDOUIsR0FBRyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFDO2lCQUM3QjtnQkFDRCxNQUFNLEVBQUUsUUFBUTtnQkFDaEIsSUFBSSxFQUFFLE1BQU07Z0JBQ1osUUFBUSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXO2FBQzVDLENBQUM7WUFFRixNQUFNLFVBQVUsR0FBUSxFQUFDLG9CQUFvQixLQUFJLENBQUMsRUFBQyxDQUFDO1lBQ3BELE1BQU0sT0FBTyxHQUFHLElBQUkseUJBQXlCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDMUQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUVuRSxhQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEQsYUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BELGFBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5QyxhQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksWUFBSyxDQUFDLElBQUksWUFBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLFlBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFGLGFBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZDLGFBQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3RDLGFBQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMaW50ZXJQdXNoVjJBZGFwdGVyIGZyb20gJy4uLy4uL2xpYi9hZGFwdGVycy9saW50ZXItcHVzaC12Mi1hZGFwdGVyJztcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4uLy4uL2xpYi9sYW5ndWFnZWNsaWVudCc7XG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcbmltcG9ydCB7IFBvaW50LCBSYW5nZSB9IGZyb20gJ2F0b20nO1xuXG5jb25zdCBtZXNzYWdlVXJsID0gJ2R1bW15JztcbmNvbnN0IG1lc3NhZ2VTb2x1dGlvbnM6IGFueVtdID0gWydkdW1teSddO1xuXG5jbGFzcyBDdXN0b21MaW50ZXJQdXNoVjJBZGFwdGVyIGV4dGVuZHMgTGludGVyUHVzaFYyQWRhcHRlciB7XG4gIHB1YmxpYyBkaWFnbm9zdGljVG9WMk1lc3NhZ2UocGF0aDogc3RyaW5nLCBkaWFnbm9zdGljOiBscy5EaWFnbm9zdGljKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHN1cGVyLmRpYWdub3N0aWNUb1YyTWVzc2FnZShwYXRoLCBkaWFnbm9zdGljKTtcbiAgICBtZXNzYWdlLnVybCA9IG1lc3NhZ2VVcmw7XG4gICAgbWVzc2FnZS5zb2x1dGlvbnMgPSBtZXNzYWdlU29sdXRpb25zO1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG59XG5cbmRlc2NyaWJlKCdDdXN0b21MaW50ZXJQdXNoVjJBZGFwdGVyJywgKCkgPT4ge1xuICBkZXNjcmliZSgnZGlhZ25vc3RpY1RvTWVzc2FnZScsICgpID0+IHtcbiAgICBpdCgnY29udmVydHMgRGlhZ25vc3RpYyBhbmQgcGF0aCB0byBhIGxpbnRlciRNZXNzYWdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZmlsZVBhdGggPSAnL2EvYi9jL2QnO1xuICAgICAgY29uc3QgZGlhZ25vc3RpYzogbHMuRGlhZ25vc3RpYyA9IHtcbiAgICAgICAgbWVzc2FnZTogJ1RoaXMgaXMgYSBtZXNzYWdlJyxcbiAgICAgICAgcmFuZ2U6IHtcbiAgICAgICAgICBzdGFydDoge2xpbmU6IDEsIGNoYXJhY3RlcjogMn0sXG4gICAgICAgICAgZW5kOiB7bGluZTogMywgY2hhcmFjdGVyOiA0fSxcbiAgICAgICAgfSxcbiAgICAgICAgc291cmNlOiAnc291cmNlJyxcbiAgICAgICAgY29kZTogJ2NvZGUnLFxuICAgICAgICBzZXZlcml0eTogbHMuRGlhZ25vc3RpY1NldmVyaXR5LkluZm9ybWF0aW9uLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgY29ubmVjdGlvbjogYW55ID0ge29uUHVibGlzaERpYWdub3N0aWNzKCkge319O1xuICAgICAgY29uc3QgYWRhcHRlciA9IG5ldyBDdXN0b21MaW50ZXJQdXNoVjJBZGFwdGVyKGNvbm5lY3Rpb24pO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYWRhcHRlci5kaWFnbm9zdGljVG9WMk1lc3NhZ2UoZmlsZVBhdGgsIGRpYWdub3N0aWMpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmV4Y2VycHQpLmVxdWFscyhkaWFnbm9zdGljLm1lc3NhZ2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5saW50ZXJOYW1lKS5lcXVhbHMoZGlhZ25vc3RpYy5zb3VyY2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5sb2NhdGlvbi5maWxlKS5lcXVhbHMoZmlsZVBhdGgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5sb2NhdGlvbi5wb3NpdGlvbikuZGVlcC5lcXVhbHMobmV3IFJhbmdlKG5ldyBQb2ludCgxLCAyKSwgbmV3IFBvaW50KDMsIDQpKSk7XG4gICAgICBleHBlY3QocmVzdWx0LnNldmVyaXR5KS5lcXVhbHMoJ2luZm8nKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudXJsKS5lcXVhbHMobWVzc2FnZVVybCk7XG4gICAgICBleHBlY3QocmVzdWx0LnNvbHV0aW9ucykuZGVlcC5lcXVhbHMobWVzc2FnZVNvbHV0aW9ucyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=